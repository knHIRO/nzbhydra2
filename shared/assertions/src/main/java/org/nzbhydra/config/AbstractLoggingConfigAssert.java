package org.nzbhydra.config;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link LoggingConfig} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractLoggingConfigAssert<S extends AbstractLoggingConfigAssert<S, A>, A extends LoggingConfig> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractLoggingConfigAssert}</code> to make assertions on actual LoggingConfig.
     *
     * @param actual the LoggingConfig we want to make assertions on.
     */
    protected AbstractLoggingConfigAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual LoggingConfig's consolelevel is equal to the given one.
     *
     * @param consolelevel the given consolelevel to compare the actual LoggingConfig's consolelevel to.
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig's consolelevel is not equal to the given one.
     */
    public S hasConsolelevel(String consolelevel) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting consolelevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualConsolelevel = actual.getConsolelevel();
        if (!Objects.areEqual(actualConsolelevel, consolelevel)) {
            failWithMessage(assertjErrorMessage, actual, consolelevel, actualConsolelevel);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's historyUserInfoType is equal to the given one.
     *
     * @param historyUserInfoType the given historyUserInfoType to compare the actual LoggingConfig's historyUserInfoType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig's historyUserInfoType is not equal to the given one.
     */
    public S hasHistoryUserInfoType(HistoryUserInfoType historyUserInfoType) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting historyUserInfoType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        HistoryUserInfoType actualHistoryUserInfoType = actual.getHistoryUserInfoType();
        if (!Objects.areEqual(actualHistoryUserInfoType, historyUserInfoType)) {
            failWithMessage(assertjErrorMessage, actual, historyUserInfoType, actualHistoryUserInfoType);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is log gc.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is not log gc.
     */
    public S isLogGc() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isLogGc()) {
            failWithMessage("\nExpecting that actual LoggingConfig is log gc but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is not log gc.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is log gc.
     */
    public S isNotLogGc() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isLogGc()) {
            failWithMessage("\nExpecting that actual LoggingConfig is not log gc but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is log ip addresses.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is not log ip addresses.
     */
    public S isLogIpAddresses() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isLogIpAddresses()) {
            failWithMessage("\nExpecting that actual LoggingConfig is log ip addresses but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is not log ip addresses.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is log ip addresses.
     */
    public S isNotLogIpAddresses() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isLogIpAddresses()) {
            failWithMessage("\nExpecting that actual LoggingConfig is not log ip addresses but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's logMaxHistory is equal to the given one.
     *
     * @param logMaxHistory the given logMaxHistory to compare the actual LoggingConfig's logMaxHistory to.
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig's logMaxHistory is not equal to the given one.
     */
    public S hasLogMaxHistory(int logMaxHistory) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting logMaxHistory of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualLogMaxHistory = actual.getLogMaxHistory();
        if (actualLogMaxHistory != logMaxHistory) {
            failWithMessage(assertjErrorMessage, actual, logMaxHistory, actualLogMaxHistory);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is log username.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is not log username.
     */
    public S isLogUsername() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isLogUsername()) {
            failWithMessage("\nExpecting that actual LoggingConfig is log username but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is not log username.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is log username.
     */
    public S isNotLogUsername() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isLogUsername()) {
            failWithMessage("\nExpecting that actual LoggingConfig is not log username but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's logfilelevel is equal to the given one.
     *
     * @param logfilelevel the given logfilelevel to compare the actual LoggingConfig's logfilelevel to.
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig's logfilelevel is not equal to the given one.
     */
    public S hasLogfilelevel(String logfilelevel) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting logfilelevel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualLogfilelevel = actual.getLogfilelevel();
        if (!Objects.areEqual(actualLogfilelevel, logfilelevel)) {
            failWithMessage(assertjErrorMessage, actual, logfilelevel, actualLogfilelevel);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is map ip to host.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is not map ip to host.
     */
    public S isMapIpToHost() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isMapIpToHost()) {
            failWithMessage("\nExpecting that actual LoggingConfig is map ip to host but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig is not map ip to host.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual LoggingConfig is map ip to host.
     */
    public S isNotMapIpToHost() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isMapIpToHost()) {
            failWithMessage("\nExpecting that actual LoggingConfig is not map ip to host but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's markersToLog contains the given String elements.
     *
     * @param markersToLog the given elements that should be contained in actual LoggingConfig's markersToLog.
     * @return this assertion object.
     * @throws AssertionError if the actual LoggingConfig's markersToLog does not contain all given String elements.
     */
    public S hasMarkersToLog(String... markersToLog) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (markersToLog == null) {
            failWithMessage("Expecting markersToLog parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getMarkersToLog(), markersToLog);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's markersToLog contains the given String elements in Collection.
     *
     * @param markersToLog the given elements that should be contained in actual LoggingConfig's markersToLog.
     * @return this assertion object.
     * @throws AssertionError if the actual LoggingConfig's markersToLog does not contain all given String elements.
     */
    public S hasMarkersToLog(java.util.Collection<? extends String> markersToLog) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (markersToLog == null) {
            failWithMessage("Expecting markersToLog parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getMarkersToLog(), markersToLog.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's markersToLog contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param markersToLog the given elements that should be contained in actual LoggingConfig's markersToLog.
     * @return this assertion object.
     * @throws AssertionError if the actual LoggingConfig's markersToLog does not contain all given String elements.
     */
    public S hasOnlyMarkersToLog(String... markersToLog) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (markersToLog == null) {
            failWithMessage("Expecting markersToLog parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getMarkersToLog(), markersToLog);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's markersToLog contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param markersToLog the given elements that should be contained in actual LoggingConfig's markersToLog.
     * @return this assertion object.
     * @throws AssertionError if the actual LoggingConfig's markersToLog does not contain all given String elements.
     */
    public S hasOnlyMarkersToLog(java.util.Collection<? extends String> markersToLog) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (markersToLog == null) {
            failWithMessage("Expecting markersToLog parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getMarkersToLog(), markersToLog.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's markersToLog does not contain the given String elements.
     *
     * @param markersToLog the given elements that should not be in actual LoggingConfig's markersToLog.
     * @return this assertion object.
     * @throws AssertionError if the actual LoggingConfig's markersToLog contains any given String elements.
     */
    public S doesNotHaveMarkersToLog(String... markersToLog) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (markersToLog == null) {
            failWithMessage("Expecting markersToLog parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getMarkersToLog(), markersToLog);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig's markersToLog does not contain the given String elements in Collection.
     *
     * @param markersToLog the given elements that should not be in actual LoggingConfig's markersToLog.
     * @return this assertion object.
     * @throws AssertionError if the actual LoggingConfig's markersToLog contains any given String elements.
     */
    public S doesNotHaveMarkersToLog(java.util.Collection<? extends String> markersToLog) {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (markersToLog == null) {
            failWithMessage("Expecting markersToLog parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getMarkersToLog(), markersToLog.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual LoggingConfig has no markersToLog.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual LoggingConfig's markersToLog is not empty.
     */
    public S hasNoMarkersToLog() {
        // check that actual LoggingConfig we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have markersToLog but had :\n  <%s>";

        // check
        if (actual.getMarkersToLog().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getMarkersToLog());
        }

        // return the current assertion for method chaining
        return myself;
    }


}
