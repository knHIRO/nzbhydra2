package org.nzbhydra.config.category;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CategoriesConfig} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCategoriesConfigAssert<S extends AbstractCategoriesConfigAssert<S, A>, A extends CategoriesConfig> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCategoriesConfigAssert}</code> to make assertions on actual CategoriesConfig.
     *
     * @param actual the CategoriesConfig we want to make assertions on.
     */
    protected AbstractCategoriesConfigAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CategoriesConfig's categories contains the given Category elements.
     *
     * @param categories the given elements that should be contained in actual CategoriesConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CategoriesConfig's categories does not contain all given Category elements.
     */
    public S hasCategories(Category... categories) {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that given Category varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig's categories contains the given Category elements in Collection.
     *
     * @param categories the given elements that should be contained in actual CategoriesConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CategoriesConfig's categories does not contain all given Category elements.
     */
    public S hasCategories(java.util.Collection<? extends Category> categories) {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that given Category collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig's categories contains <b>only</b> the given Category elements and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual CategoriesConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CategoriesConfig's categories does not contain all given Category elements.
     */
    public S hasOnlyCategories(Category... categories) {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that given Category varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig's categories contains <b>only</b> the given Category elements in Collection and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual CategoriesConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CategoriesConfig's categories does not contain all given Category elements.
     */
    public S hasOnlyCategories(java.util.Collection<? extends Category> categories) {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that given Category collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig's categories does not contain the given Category elements.
     *
     * @param categories the given elements that should not be in actual CategoriesConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CategoriesConfig's categories contains any given Category elements.
     */
    public S doesNotHaveCategories(Category... categories) {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that given Category varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig's categories does not contain the given Category elements in Collection.
     *
     * @param categories the given elements that should not be in actual CategoriesConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CategoriesConfig's categories contains any given Category elements.
     */
    public S doesNotHaveCategories(java.util.Collection<? extends Category> categories) {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that given Category collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig has no categories.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual CategoriesConfig's categories is not empty.
     */
    public S hasNoCategories() {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have categories but had :\n  <%s>";

        // check
        if (actual.getCategories().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getCategories());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual CategoriesConfig's defaultCategory is equal to the given one.
     *
     * @param defaultCategory the given defaultCategory to compare the actual CategoriesConfig's defaultCategory to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CategoriesConfig's defaultCategory is not equal to the given one.
     */
    public S hasDefaultCategory(String defaultCategory) {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting defaultCategory of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDefaultCategory = actual.getDefaultCategory();
        if (!Objects.areEqual(actualDefaultCategory, defaultCategory)) {
            failWithMessage(assertjErrorMessage, actual, defaultCategory, actualDefaultCategory);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig is enable category sizes.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual CategoriesConfig is not enable category sizes.
     */
    public S isEnableCategorySizes() {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isEnableCategorySizes()) {
            failWithMessage("\nExpecting that actual CategoriesConfig is enable category sizes but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CategoriesConfig is not enable category sizes.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual CategoriesConfig is enable category sizes.
     */
    public S isNotEnableCategorySizes() {
        // check that actual CategoriesConfig we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isEnableCategorySizes()) {
            failWithMessage("\nExpecting that actual CategoriesConfig is not enable category sizes but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

}
