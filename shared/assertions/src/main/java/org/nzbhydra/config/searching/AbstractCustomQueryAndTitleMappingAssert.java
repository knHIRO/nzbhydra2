package org.nzbhydra.config.searching;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CustomQueryAndTitleMapping} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCustomQueryAndTitleMappingAssert<S extends AbstractCustomQueryAndTitleMappingAssert<S, A>, A extends CustomQueryAndTitleMapping> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCustomQueryAndTitleMappingAssert}</code> to make assertions on actual CustomQueryAndTitleMapping.
     *
     * @param actual the CustomQueryAndTitleMapping we want to make assertions on.
     */
    protected AbstractCustomQueryAndTitleMappingAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CustomQueryAndTitleMapping's affectedValue is equal to the given one.
     *
     * @param affectedValue the given affectedValue to compare the actual CustomQueryAndTitleMapping's affectedValue to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CustomQueryAndTitleMapping's affectedValue is not equal to the given one.
     */
    public S hasAffectedValue(AffectedValue affectedValue) {
        // check that actual CustomQueryAndTitleMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting affectedValue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        AffectedValue actualAffectedValue = actual.getAffectedValue();
        if (!Objects.areEqual(actualAffectedValue, affectedValue)) {
            failWithMessage(assertjErrorMessage, actual, affectedValue, actualAffectedValue);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CustomQueryAndTitleMapping's from is equal to the given one.
     *
     * @param from the given from to compare the actual CustomQueryAndTitleMapping's from to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CustomQueryAndTitleMapping's from is not equal to the given one.
     */
    public S hasFrom(String from) {
        // check that actual CustomQueryAndTitleMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting from of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualFrom = actual.getFrom();
        if (!Objects.areEqual(actualFrom, from)) {
            failWithMessage(assertjErrorMessage, actual, from, actualFrom);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CustomQueryAndTitleMapping's fromPattern is equal to the given one.
     *
     * @param fromPattern the given fromPattern to compare the actual CustomQueryAndTitleMapping's fromPattern to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CustomQueryAndTitleMapping's fromPattern is not equal to the given one.
     */
    public S hasFromPattern(java.util.regex.Pattern fromPattern) {
        // check that actual CustomQueryAndTitleMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting fromPattern of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.regex.Pattern actualFromPattern = actual.getFromPattern();
        if (!Objects.areEqual(actualFromPattern, fromPattern)) {
            failWithMessage(assertjErrorMessage, actual, fromPattern, actualFromPattern);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CustomQueryAndTitleMapping's searchType is equal to the given one.
     *
     * @param searchType the given searchType to compare the actual CustomQueryAndTitleMapping's searchType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CustomQueryAndTitleMapping's searchType is not equal to the given one.
     */
    public S hasSearchType(SearchType searchType) {
        // check that actual CustomQueryAndTitleMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting searchType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        SearchType actualSearchType = actual.getSearchType();
        if (!Objects.areEqual(actualSearchType, searchType)) {
            failWithMessage(assertjErrorMessage, actual, searchType, actualSearchType);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CustomQueryAndTitleMapping's to is equal to the given one.
     *
     * @param to the given to to compare the actual CustomQueryAndTitleMapping's to to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CustomQueryAndTitleMapping's to is not equal to the given one.
     */
    public S hasTo(String to) {
        // check that actual CustomQueryAndTitleMapping we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting to of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTo = actual.getTo();
        if (!Objects.areEqual(actualTo, to)) {
            failWithMessage(assertjErrorMessage, actual, to, actualTo);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
