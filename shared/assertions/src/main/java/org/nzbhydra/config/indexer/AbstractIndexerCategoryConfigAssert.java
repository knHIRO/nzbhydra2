package org.nzbhydra.config.indexer;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link IndexerCategoryConfig} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractIndexerCategoryConfigAssert<S extends AbstractIndexerCategoryConfigAssert<S, A>, A extends IndexerCategoryConfig> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractIndexerCategoryConfigAssert}</code> to make assertions on actual IndexerCategoryConfig.
     *
     * @param actual the IndexerCategoryConfig we want to make assertions on.
     */
    protected AbstractIndexerCategoryConfigAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's anime is equal to the given one.
     *
     * @param anime the given anime to compare the actual IndexerCategoryConfig's anime to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerCategoryConfig's anime is not equal to the given one.
     */
    public S hasAnime(java.util.Optional anime) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting anime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Optional actualAnime = actual.getAnime();
        if (!Objects.areEqual(actualAnime, anime)) {
            failWithMessage(assertjErrorMessage, actual, anime, actualAnime);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's audiobook is equal to the given one.
     *
     * @param audiobook the given audiobook to compare the actual IndexerCategoryConfig's audiobook to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerCategoryConfig's audiobook is not equal to the given one.
     */
    public S hasAudiobook(java.util.Optional audiobook) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting audiobook of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Optional actualAudiobook = actual.getAudiobook();
        if (!Objects.areEqual(actualAudiobook, audiobook)) {
            failWithMessage(assertjErrorMessage, actual, audiobook, actualAudiobook);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's categories contains the given IndexerCategoryConfig.MainCategory elements.
     *
     * @param categories the given elements that should be contained in actual IndexerCategoryConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual IndexerCategoryConfig's categories does not contain all given IndexerCategoryConfig.MainCategory elements.
     */
    public S hasCategories(IndexerCategoryConfig.MainCategory... categories) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // check that given IndexerCategoryConfig.MainCategory varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's categories contains the given IndexerCategoryConfig.MainCategory elements in Collection.
     *
     * @param categories the given elements that should be contained in actual IndexerCategoryConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual IndexerCategoryConfig's categories does not contain all given IndexerCategoryConfig.MainCategory elements.
     */
    public S hasCategories(java.util.Collection<? extends IndexerCategoryConfig.MainCategory> categories) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // check that given IndexerCategoryConfig.MainCategory collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's categories contains <b>only</b> the given IndexerCategoryConfig.MainCategory elements and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual IndexerCategoryConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual IndexerCategoryConfig's categories does not contain all given IndexerCategoryConfig.MainCategory elements.
     */
    public S hasOnlyCategories(IndexerCategoryConfig.MainCategory... categories) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // check that given IndexerCategoryConfig.MainCategory varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's categories contains <b>only</b> the given IndexerCategoryConfig.MainCategory elements in Collection and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual IndexerCategoryConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual IndexerCategoryConfig's categories does not contain all given IndexerCategoryConfig.MainCategory elements.
     */
    public S hasOnlyCategories(java.util.Collection<? extends IndexerCategoryConfig.MainCategory> categories) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // check that given IndexerCategoryConfig.MainCategory collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's categories does not contain the given IndexerCategoryConfig.MainCategory elements.
     *
     * @param categories the given elements that should not be in actual IndexerCategoryConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual IndexerCategoryConfig's categories contains any given IndexerCategoryConfig.MainCategory elements.
     */
    public S doesNotHaveCategories(IndexerCategoryConfig.MainCategory... categories) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // check that given IndexerCategoryConfig.MainCategory varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's categories does not contain the given IndexerCategoryConfig.MainCategory elements in Collection.
     *
     * @param categories the given elements that should not be in actual IndexerCategoryConfig's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual IndexerCategoryConfig's categories contains any given IndexerCategoryConfig.MainCategory elements.
     */
    public S doesNotHaveCategories(java.util.Collection<? extends IndexerCategoryConfig.MainCategory> categories) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // check that given IndexerCategoryConfig.MainCategory collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig has no categories.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual IndexerCategoryConfig's categories is not empty.
     */
    public S hasNoCategories() {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have categories but had :\n  <%s>";

        // check
        if (actual.getCategories().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getCategories());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual IndexerCategoryConfig's comic is equal to the given one.
     *
     * @param comic the given comic to compare the actual IndexerCategoryConfig's comic to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerCategoryConfig's comic is not equal to the given one.
     */
    public S hasComic(java.util.Optional comic) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting comic of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Optional actualComic = actual.getComic();
        if (!Objects.areEqual(actualComic, comic)) {
            failWithMessage(assertjErrorMessage, actual, comic, actualComic);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's ebook is equal to the given one.
     *
     * @param ebook the given ebook to compare the actual IndexerCategoryConfig's ebook to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerCategoryConfig's ebook is not equal to the given one.
     */
    public S hasEbook(java.util.Optional ebook) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting ebook of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Optional actualEbook = actual.getEbook();
        if (!Objects.areEqual(actualEbook, ebook)) {
            failWithMessage(assertjErrorMessage, actual, ebook, actualEbook);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerCategoryConfig's magazine is equal to the given one.
     *
     * @param magazine the given magazine to compare the actual IndexerCategoryConfig's magazine to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerCategoryConfig's magazine is not equal to the given one.
     */
    public S hasMagazine(java.util.Optional magazine) {
        // check that actual IndexerCategoryConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting magazine of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Optional actualMagazine = actual.getMagazine();
        if (!Objects.areEqual(actualMagazine, magazine)) {
            failWithMessage(assertjErrorMessage, actual, magazine, actualMagazine);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
