package org.nzbhydra.config;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link BaseConfig} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractBaseConfigAssert<S extends AbstractBaseConfigAssert<S, A>, A extends BaseConfig> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractBaseConfigAssert}</code> to make assertions on actual BaseConfig.
     *
     * @param actual the BaseConfig we want to make assertions on.
     */
    protected AbstractBaseConfigAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual BaseConfig's auth is equal to the given one.
     *
     * @param auth the given auth to compare the actual BaseConfig's auth to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseConfig's auth is not equal to the given one.
     */
    public S hasAuth(org.nzbhydra.config.auth.AuthConfig auth) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting auth of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.config.auth.AuthConfig actualAuth = actual.getAuth();
        if (!Objects.areEqual(actualAuth, auth)) {
            failWithMessage(assertjErrorMessage, actual, auth, actualAuth);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's categoriesConfig is equal to the given one.
     *
     * @param categoriesConfig the given categoriesConfig to compare the actual BaseConfig's categoriesConfig to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseConfig's categoriesConfig is not equal to the given one.
     */
    public S hasCategoriesConfig(org.nzbhydra.config.category.CategoriesConfig categoriesConfig) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting categoriesConfig of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.config.category.CategoriesConfig actualCategoriesConfig = actual.getCategoriesConfig();
        if (!Objects.areEqual(actualCategoriesConfig, categoriesConfig)) {
            failWithMessage(assertjErrorMessage, actual, categoriesConfig, actualCategoriesConfig);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's downloading is equal to the given one.
     *
     * @param downloading the given downloading to compare the actual BaseConfig's downloading to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseConfig's downloading is not equal to the given one.
     */
    public S hasDownloading(org.nzbhydra.config.downloading.DownloadingConfig downloading) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloading of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.config.downloading.DownloadingConfig actualDownloading = actual.getDownloading();
        if (!Objects.areEqual(actualDownloading, downloading)) {
            failWithMessage(assertjErrorMessage, actual, downloading, actualDownloading);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's genericStorage is equal to the given one.
     *
     * @param genericStorage the given genericStorage to compare the actual BaseConfig's genericStorage to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseConfig's genericStorage is not equal to the given one.
     */
    public S hasGenericStorage(java.util.Map genericStorage) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting genericStorage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Map actualGenericStorage = actual.getGenericStorage();
        if (!Objects.areEqual(actualGenericStorage, genericStorage)) {
            failWithMessage(assertjErrorMessage, actual, genericStorage, actualGenericStorage);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's indexers contains the given org.nzbhydra.config.indexer.IndexerConfig elements.
     *
     * @param indexers the given elements that should be contained in actual BaseConfig's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual BaseConfig's indexers does not contain all given org.nzbhydra.config.indexer.IndexerConfig elements.
     */
    public S hasIndexers(org.nzbhydra.config.indexer.IndexerConfig... indexers) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.config.indexer.IndexerConfig varargs is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexers(), indexers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's indexers contains the given org.nzbhydra.config.indexer.IndexerConfig elements in Collection.
     *
     * @param indexers the given elements that should be contained in actual BaseConfig's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual BaseConfig's indexers does not contain all given org.nzbhydra.config.indexer.IndexerConfig elements.
     */
    public S hasIndexers(java.util.Collection<? extends org.nzbhydra.config.indexer.IndexerConfig> indexers) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.config.indexer.IndexerConfig collection is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexers(), indexers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's indexers contains <b>only</b> the given org.nzbhydra.config.indexer.IndexerConfig elements and nothing else in whatever order.
     *
     * @param indexers the given elements that should be contained in actual BaseConfig's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual BaseConfig's indexers does not contain all given org.nzbhydra.config.indexer.IndexerConfig elements.
     */
    public S hasOnlyIndexers(org.nzbhydra.config.indexer.IndexerConfig... indexers) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.config.indexer.IndexerConfig varargs is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexers(), indexers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's indexers contains <b>only</b> the given org.nzbhydra.config.indexer.IndexerConfig elements in Collection and nothing else in whatever order.
     *
     * @param indexers the given elements that should be contained in actual BaseConfig's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual BaseConfig's indexers does not contain all given org.nzbhydra.config.indexer.IndexerConfig elements.
     */
    public S hasOnlyIndexers(java.util.Collection<? extends org.nzbhydra.config.indexer.IndexerConfig> indexers) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.config.indexer.IndexerConfig collection is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexers(), indexers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's indexers does not contain the given org.nzbhydra.config.indexer.IndexerConfig elements.
     *
     * @param indexers the given elements that should not be in actual BaseConfig's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual BaseConfig's indexers contains any given org.nzbhydra.config.indexer.IndexerConfig elements.
     */
    public S doesNotHaveIndexers(org.nzbhydra.config.indexer.IndexerConfig... indexers) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.config.indexer.IndexerConfig varargs is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexers(), indexers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's indexers does not contain the given org.nzbhydra.config.indexer.IndexerConfig elements in Collection.
     *
     * @param indexers the given elements that should not be in actual BaseConfig's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual BaseConfig's indexers contains any given org.nzbhydra.config.indexer.IndexerConfig elements.
     */
    public S doesNotHaveIndexers(java.util.Collection<? extends org.nzbhydra.config.indexer.IndexerConfig> indexers) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.config.indexer.IndexerConfig collection is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexers(), indexers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig has no indexers.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual BaseConfig's indexers is not empty.
     */
    public S hasNoIndexers() {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have indexers but had :\n  <%s>";

        // check
        if (actual.getIndexers().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getIndexers());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual BaseConfig's main is equal to the given one.
     *
     * @param main the given main to compare the actual BaseConfig's main to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseConfig's main is not equal to the given one.
     */
    public S hasMain(MainConfig main) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting main of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        MainConfig actualMain = actual.getMain();
        if (!Objects.areEqual(actualMain, main)) {
            failWithMessage(assertjErrorMessage, actual, main, actualMain);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's notificationConfig is equal to the given one.
     *
     * @param notificationConfig the given notificationConfig to compare the actual BaseConfig's notificationConfig to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseConfig's notificationConfig is not equal to the given one.
     */
    public S hasNotificationConfig(NotificationConfig notificationConfig) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting notificationConfig of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        NotificationConfig actualNotificationConfig = actual.getNotificationConfig();
        if (!Objects.areEqual(actualNotificationConfig, notificationConfig)) {
            failWithMessage(assertjErrorMessage, actual, notificationConfig, actualNotificationConfig);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual BaseConfig's searching is equal to the given one.
     *
     * @param searching the given searching to compare the actual BaseConfig's searching to.
     * @return this assertion object.
     * @throws AssertionError - if the actual BaseConfig's searching is not equal to the given one.
     */
    public S hasSearching(SearchingConfig searching) {
        // check that actual BaseConfig we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting searching of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        SearchingConfig actualSearching = actual.getSearching();
        if (!Objects.areEqual(actualSearching, searching)) {
            failWithMessage(assertjErrorMessage, actual, searching, actualSearching);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
