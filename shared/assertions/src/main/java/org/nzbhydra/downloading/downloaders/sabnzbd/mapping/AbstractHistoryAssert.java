package org.nzbhydra.downloading.downloaders.sabnzbd.mapping;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link History} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractHistoryAssert<S extends AbstractHistoryAssert<S, A>, A extends History> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractHistoryAssert}</code> to make assertions on actual History.
     *
     * @param actual the History we want to make assertions on.
     */
    protected AbstractHistoryAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual History's day_size is equal to the given one.
     *
     * @param day_size the given day_size to compare the actual History's day_size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual History's day_size is not equal to the given one.
     */
    public S hasDay_size(String day_size) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting day_size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDay_size = actual.getDay_size();
        if (!Objects.areEqual(actualDay_size, day_size)) {
            failWithMessage(assertjErrorMessage, actual, day_size, actualDay_size);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's last_history_update is equal to the given one.
     *
     * @param last_history_update the given last_history_update to compare the actual History's last_history_update to.
     * @return this assertion object.
     * @throws AssertionError - if the actual History's last_history_update is not equal to the given one.
     */
    public S hasLast_history_update(Long last_history_update) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting last_history_update of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualLast_history_update = actual.getLast_history_update();
        if (!Objects.areEqual(actualLast_history_update, last_history_update)) {
            failWithMessage(assertjErrorMessage, actual, last_history_update, actualLast_history_update);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's month_size is equal to the given one.
     *
     * @param month_size the given month_size to compare the actual History's month_size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual History's month_size is not equal to the given one.
     */
    public S hasMonth_size(String month_size) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting month_size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMonth_size = actual.getMonth_size();
        if (!Objects.areEqual(actualMonth_size, month_size)) {
            failWithMessage(assertjErrorMessage, actual, month_size, actualMonth_size);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's noofslots is equal to the given one.
     *
     * @param noofslots the given noofslots to compare the actual History's noofslots to.
     * @return this assertion object.
     * @throws AssertionError - if the actual History's noofslots is not equal to the given one.
     */
    public S hasNoofslots(Integer noofslots) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting noofslots of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualNoofslots = actual.getNoofslots();
        if (!Objects.areEqual(actualNoofslots, noofslots)) {
            failWithMessage(assertjErrorMessage, actual, noofslots, actualNoofslots);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's slots contains the given HistoryEntry elements.
     *
     * @param slots the given elements that should be contained in actual History's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual History's slots does not contain all given HistoryEntry elements.
     */
    public S hasSlots(HistoryEntry... slots) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // check that given HistoryEntry varargs is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSlots(), slots);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's slots contains the given HistoryEntry elements in Collection.
     *
     * @param slots the given elements that should be contained in actual History's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual History's slots does not contain all given HistoryEntry elements.
     */
    public S hasSlots(java.util.Collection<? extends HistoryEntry> slots) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // check that given HistoryEntry collection is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSlots(), slots.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's slots contains <b>only</b> the given HistoryEntry elements and nothing else in whatever order.
     *
     * @param slots the given elements that should be contained in actual History's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual History's slots does not contain all given HistoryEntry elements.
     */
    public S hasOnlySlots(HistoryEntry... slots) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // check that given HistoryEntry varargs is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSlots(), slots);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's slots contains <b>only</b> the given HistoryEntry elements in Collection and nothing else in whatever order.
     *
     * @param slots the given elements that should be contained in actual History's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual History's slots does not contain all given HistoryEntry elements.
     */
    public S hasOnlySlots(java.util.Collection<? extends HistoryEntry> slots) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // check that given HistoryEntry collection is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSlots(), slots.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's slots does not contain the given HistoryEntry elements.
     *
     * @param slots the given elements that should not be in actual History's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual History's slots contains any given HistoryEntry elements.
     */
    public S doesNotHaveSlots(HistoryEntry... slots) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // check that given HistoryEntry varargs is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSlots(), slots);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's slots does not contain the given HistoryEntry elements in Collection.
     *
     * @param slots the given elements that should not be in actual History's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual History's slots contains any given HistoryEntry elements.
     */
    public S doesNotHaveSlots(java.util.Collection<? extends HistoryEntry> slots) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // check that given HistoryEntry collection is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSlots(), slots.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History has no slots.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual History's slots is not empty.
     */
    public S hasNoSlots() {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have slots but had :\n  <%s>";

        // check
        if (actual.getSlots().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSlots());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual History's total_size is equal to the given one.
     *
     * @param total_size the given total_size to compare the actual History's total_size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual History's total_size is not equal to the given one.
     */
    public S hasTotal_size(String total_size) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting total_size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTotal_size = actual.getTotal_size();
        if (!Objects.areEqual(actualTotal_size, total_size)) {
            failWithMessage(assertjErrorMessage, actual, total_size, actualTotal_size);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual History's week_size is equal to the given one.
     *
     * @param week_size the given week_size to compare the actual History's week_size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual History's week_size is not equal to the given one.
     */
    public S hasWeek_size(String week_size) {
        // check that actual History we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting week_size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualWeek_size = actual.getWeek_size();
        if (!Objects.areEqual(actualWeek_size, week_size)) {
            failWithMessage(assertjErrorMessage, actual, week_size, actualWeek_size);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
