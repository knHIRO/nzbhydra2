package org.nzbhydra.downloading.downloaders;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link DownloaderStatus} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractDownloaderStatusAssert<S extends AbstractDownloaderStatusAssert<S, A>, A extends DownloaderStatus> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractDownloaderStatusAssert}</code> to make assertions on actual DownloaderStatus.
     *
     * @param actual the DownloaderStatus we want to make assertions on.
     */
    protected AbstractDownloaderStatusAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadRateFormatted is equal to the given one.
     *
     * @param downloadRateFormatted the given downloadRateFormatted to compare the actual DownloaderStatus's downloadRateFormatted to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloadRateFormatted is not equal to the given one.
     */
    public S hasDownloadRateFormatted(String downloadRateFormatted) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadRateFormatted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDownloadRateFormatted = actual.getDownloadRateFormatted();
        if (!Objects.areEqual(actualDownloadRateFormatted, downloadRateFormatted)) {
            failWithMessage(assertjErrorMessage, actual, downloadRateFormatted, actualDownloadRateFormatted);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadRateInKilobytes is equal to the given one.
     *
     * @param downloadRateInKilobytes the given downloadRateInKilobytes to compare the actual DownloaderStatus's downloadRateInKilobytes to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloadRateInKilobytes is not equal to the given one.
     */
    public S hasDownloadRateInKilobytes(long downloadRateInKilobytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadRateInKilobytes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualDownloadRateInKilobytes = actual.getDownloadRateInKilobytes();
        if (actualDownloadRateInKilobytes != downloadRateInKilobytes) {
            failWithMessage(assertjErrorMessage, actual, downloadRateInKilobytes, actualDownloadRateInKilobytes);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloaderName is equal to the given one.
     *
     * @param downloaderName the given downloaderName to compare the actual DownloaderStatus's downloaderName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloaderName is not equal to the given one.
     */
    public S hasDownloaderName(String downloaderName) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloaderName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDownloaderName = actual.getDownloaderName();
        if (!Objects.areEqual(actualDownloaderName, downloaderName)) {
            failWithMessage(assertjErrorMessage, actual, downloaderName, actualDownloaderName);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloaderType is equal to the given one.
     *
     * @param downloaderType the given downloaderType to compare the actual DownloaderStatus's downloaderType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloaderType is not equal to the given one.
     */
    public S hasDownloaderType(org.nzbhydra.downloading.DownloaderType downloaderType) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloaderType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.downloading.DownloaderType actualDownloaderType = actual.getDownloaderType();
        if (!Objects.areEqual(actualDownloaderType, downloaderType)) {
            failWithMessage(assertjErrorMessage, actual, downloaderType, actualDownloaderType);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingRatesInKilobytes contains the given Long elements.
     *
     * @param downloadingRatesInKilobytes the given elements that should be contained in actual DownloaderStatus's downloadingRatesInKilobytes.
     * @return this assertion object.
     * @throws AssertionError if the actual DownloaderStatus's downloadingRatesInKilobytes does not contain all given Long elements.
     */
    public S hasDownloadingRatesInKilobytes(Long... downloadingRatesInKilobytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that given Long varargs is not null.
        if (downloadingRatesInKilobytes == null) {
            failWithMessage("Expecting downloadingRatesInKilobytes parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadingRatesInKilobytes(), downloadingRatesInKilobytes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingRatesInKilobytes contains the given Long elements in Collection.
     *
     * @param downloadingRatesInKilobytes the given elements that should be contained in actual DownloaderStatus's downloadingRatesInKilobytes.
     * @return this assertion object.
     * @throws AssertionError if the actual DownloaderStatus's downloadingRatesInKilobytes does not contain all given Long elements.
     */
    public S hasDownloadingRatesInKilobytes(java.util.Collection<? extends Long> downloadingRatesInKilobytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that given Long collection is not null.
        if (downloadingRatesInKilobytes == null) {
            failWithMessage("Expecting downloadingRatesInKilobytes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadingRatesInKilobytes(), downloadingRatesInKilobytes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingRatesInKilobytes contains <b>only</b> the given Long elements and nothing else in whatever order.
     *
     * @param downloadingRatesInKilobytes the given elements that should be contained in actual DownloaderStatus's downloadingRatesInKilobytes.
     * @return this assertion object.
     * @throws AssertionError if the actual DownloaderStatus's downloadingRatesInKilobytes does not contain all given Long elements.
     */
    public S hasOnlyDownloadingRatesInKilobytes(Long... downloadingRatesInKilobytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that given Long varargs is not null.
        if (downloadingRatesInKilobytes == null) {
            failWithMessage("Expecting downloadingRatesInKilobytes parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadingRatesInKilobytes(), downloadingRatesInKilobytes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingRatesInKilobytes contains <b>only</b> the given Long elements in Collection and nothing else in whatever order.
     *
     * @param downloadingRatesInKilobytes the given elements that should be contained in actual DownloaderStatus's downloadingRatesInKilobytes.
     * @return this assertion object.
     * @throws AssertionError if the actual DownloaderStatus's downloadingRatesInKilobytes does not contain all given Long elements.
     */
    public S hasOnlyDownloadingRatesInKilobytes(java.util.Collection<? extends Long> downloadingRatesInKilobytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that given Long collection is not null.
        if (downloadingRatesInKilobytes == null) {
            failWithMessage("Expecting downloadingRatesInKilobytes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadingRatesInKilobytes(), downloadingRatesInKilobytes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingRatesInKilobytes does not contain the given Long elements.
     *
     * @param downloadingRatesInKilobytes the given elements that should not be in actual DownloaderStatus's downloadingRatesInKilobytes.
     * @return this assertion object.
     * @throws AssertionError if the actual DownloaderStatus's downloadingRatesInKilobytes contains any given Long elements.
     */
    public S doesNotHaveDownloadingRatesInKilobytes(Long... downloadingRatesInKilobytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that given Long varargs is not null.
        if (downloadingRatesInKilobytes == null) {
            failWithMessage("Expecting downloadingRatesInKilobytes parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadingRatesInKilobytes(), downloadingRatesInKilobytes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingRatesInKilobytes does not contain the given Long elements in Collection.
     *
     * @param downloadingRatesInKilobytes the given elements that should not be in actual DownloaderStatus's downloadingRatesInKilobytes.
     * @return this assertion object.
     * @throws AssertionError if the actual DownloaderStatus's downloadingRatesInKilobytes contains any given Long elements.
     */
    public S doesNotHaveDownloadingRatesInKilobytes(java.util.Collection<? extends Long> downloadingRatesInKilobytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that given Long collection is not null.
        if (downloadingRatesInKilobytes == null) {
            failWithMessage("Expecting downloadingRatesInKilobytes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadingRatesInKilobytes(), downloadingRatesInKilobytes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus has no downloadingRatesInKilobytes.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual DownloaderStatus's downloadingRatesInKilobytes is not empty.
     */
    public S hasNoDownloadingRatesInKilobytes() {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have downloadingRatesInKilobytes but had :\n  <%s>";

        // check
        if (actual.getDownloadingRatesInKilobytes().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getDownloadingRatesInKilobytes());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual DownloaderStatus's downloadingTitle is equal to the given one.
     *
     * @param downloadingTitle the given downloadingTitle to compare the actual DownloaderStatus's downloadingTitle to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloadingTitle is not equal to the given one.
     */
    public S hasDownloadingTitle(String downloadingTitle) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadingTitle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDownloadingTitle = actual.getDownloadingTitle();
        if (!Objects.areEqual(actualDownloadingTitle, downloadingTitle)) {
            failWithMessage(assertjErrorMessage, actual, downloadingTitle, actualDownloadingTitle);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingTitlePercentFinished is equal to the given one.
     *
     * @param downloadingTitlePercentFinished the given downloadingTitlePercentFinished to compare the actual DownloaderStatus's downloadingTitlePercentFinished to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloadingTitlePercentFinished is not equal to the given one.
     */
    public S hasDownloadingTitlePercentFinished(int downloadingTitlePercentFinished) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadingTitlePercentFinished of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualDownloadingTitlePercentFinished = actual.getDownloadingTitlePercentFinished();
        if (actualDownloadingTitlePercentFinished != downloadingTitlePercentFinished) {
            failWithMessage(assertjErrorMessage, actual, downloadingTitlePercentFinished, actualDownloadingTitlePercentFinished);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingTitleRemainingSizeFormatted is equal to the given one.
     *
     * @param downloadingTitleRemainingSizeFormatted the given downloadingTitleRemainingSizeFormatted to compare the actual DownloaderStatus's downloadingTitleRemainingSizeFormatted to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloadingTitleRemainingSizeFormatted is not equal to the given one.
     */
    public S hasDownloadingTitleRemainingSizeFormatted(String downloadingTitleRemainingSizeFormatted) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadingTitleRemainingSizeFormatted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDownloadingTitleRemainingSizeFormatted = actual.getDownloadingTitleRemainingSizeFormatted();
        if (!Objects.areEqual(actualDownloadingTitleRemainingSizeFormatted, downloadingTitleRemainingSizeFormatted)) {
            failWithMessage(assertjErrorMessage, actual, downloadingTitleRemainingSizeFormatted, actualDownloadingTitleRemainingSizeFormatted);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's downloadingTitleRemainingTimeFormatted is equal to the given one.
     *
     * @param downloadingTitleRemainingTimeFormatted the given downloadingTitleRemainingTimeFormatted to compare the actual DownloaderStatus's downloadingTitleRemainingTimeFormatted to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's downloadingTitleRemainingTimeFormatted is not equal to the given one.
     */
    public S hasDownloadingTitleRemainingTimeFormatted(String downloadingTitleRemainingTimeFormatted) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadingTitleRemainingTimeFormatted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDownloadingTitleRemainingTimeFormatted = actual.getDownloadingTitleRemainingTimeFormatted();
        if (!Objects.areEqual(actualDownloadingTitleRemainingTimeFormatted, downloadingTitleRemainingTimeFormatted)) {
            failWithMessage(assertjErrorMessage, actual, downloadingTitleRemainingTimeFormatted, actualDownloadingTitleRemainingTimeFormatted);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's elementsInQueue is equal to the given one.
     *
     * @param elementsInQueue the given elementsInQueue to compare the actual DownloaderStatus's elementsInQueue to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's elementsInQueue is not equal to the given one.
     */
    public S hasElementsInQueue(int elementsInQueue) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting elementsInQueue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualElementsInQueue = actual.getElementsInQueue();
        if (actualElementsInQueue != elementsInQueue) {
            failWithMessage(assertjErrorMessage, actual, elementsInQueue, actualElementsInQueue);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's lastDownloadRate is equal to the given one.
     *
     * @param lastDownloadRate the given lastDownloadRate to compare the actual DownloaderStatus's lastDownloadRate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's lastDownloadRate is not equal to the given one.
     */
    public S hasLastDownloadRate(Long lastDownloadRate) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting lastDownloadRate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualLastDownloadRate = actual.getLastDownloadRate();
        if (!Objects.areEqual(actualLastDownloadRate, lastDownloadRate)) {
            failWithMessage(assertjErrorMessage, actual, lastDownloadRate, actualLastDownloadRate);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus is last update for now.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus is not last update for now.
     */
    public S isLastUpdateForNow() {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isLastUpdateForNow()) {
            failWithMessage("\nExpecting that actual DownloaderStatus is last update for now but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus is not last update for now.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus is last update for now.
     */
    public S isNotLastUpdateForNow() {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isLastUpdateForNow()) {
            failWithMessage("\nExpecting that actual DownloaderStatus is not last update for now but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's remainingSeconds is equal to the given one.
     *
     * @param remainingSeconds the given remainingSeconds to compare the actual DownloaderStatus's remainingSeconds to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's remainingSeconds is not equal to the given one.
     */
    public S hasRemainingSeconds(long remainingSeconds) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting remainingSeconds of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualRemainingSeconds = actual.getRemainingSeconds();
        if (actualRemainingSeconds != remainingSeconds) {
            failWithMessage(assertjErrorMessage, actual, remainingSeconds, actualRemainingSeconds);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's remainingSizeFormatted is equal to the given one.
     *
     * @param remainingSizeFormatted the given remainingSizeFormatted to compare the actual DownloaderStatus's remainingSizeFormatted to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's remainingSizeFormatted is not equal to the given one.
     */
    public S hasRemainingSizeFormatted(String remainingSizeFormatted) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting remainingSizeFormatted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualRemainingSizeFormatted = actual.getRemainingSizeFormatted();
        if (!Objects.areEqual(actualRemainingSizeFormatted, remainingSizeFormatted)) {
            failWithMessage(assertjErrorMessage, actual, remainingSizeFormatted, actualRemainingSizeFormatted);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's remainingSizeInMegaBytes is equal to the given one.
     *
     * @param remainingSizeInMegaBytes the given remainingSizeInMegaBytes to compare the actual DownloaderStatus's remainingSizeInMegaBytes to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's remainingSizeInMegaBytes is not equal to the given one.
     */
    public S hasRemainingSizeInMegaBytes(long remainingSizeInMegaBytes) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting remainingSizeInMegaBytes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualRemainingSizeInMegaBytes = actual.getRemainingSizeInMegaBytes();
        if (actualRemainingSizeInMegaBytes != remainingSizeInMegaBytes) {
            failWithMessage(assertjErrorMessage, actual, remainingSizeInMegaBytes, actualRemainingSizeInMegaBytes);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's remainingTimeFormatted is equal to the given one.
     *
     * @param remainingTimeFormatted the given remainingTimeFormatted to compare the actual DownloaderStatus's remainingTimeFormatted to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's remainingTimeFormatted is not equal to the given one.
     */
    public S hasRemainingTimeFormatted(String remainingTimeFormatted) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting remainingTimeFormatted of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualRemainingTimeFormatted = actual.getRemainingTimeFormatted();
        if (!Objects.areEqual(actualRemainingTimeFormatted, remainingTimeFormatted)) {
            failWithMessage(assertjErrorMessage, actual, remainingTimeFormatted, actualRemainingTimeFormatted);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's state is equal to the given one.
     *
     * @param state the given state to compare the actual DownloaderStatus's state to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's state is not equal to the given one.
     */
    public S hasState(DownloaderStatus.State state) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting state of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        DownloaderStatus.State actualState = actual.getState();
        if (!Objects.areEqual(actualState, state)) {
            failWithMessage(assertjErrorMessage, actual, state, actualState);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloaderStatus's url is equal to the given one.
     *
     * @param url the given url to compare the actual DownloaderStatus's url to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloaderStatus's url is not equal to the given one.
     */
    public S hasUrl(String url) {
        // check that actual DownloaderStatus we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualUrl = actual.getUrl();
        if (!Objects.areEqual(actualUrl, url)) {
            failWithMessage(assertjErrorMessage, actual, url, actualUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
