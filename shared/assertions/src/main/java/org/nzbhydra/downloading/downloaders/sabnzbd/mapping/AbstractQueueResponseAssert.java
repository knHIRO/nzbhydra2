package org.nzbhydra.downloading.downloaders.sabnzbd.mapping;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link QueueResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractQueueResponseAssert<S extends AbstractQueueResponseAssert<S, A>, A extends QueueResponse> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractQueueResponseAssert}</code> to make assertions on actual QueueResponse.
     *
     * @param actual the QueueResponse we want to make assertions on.
     */
    protected AbstractQueueResponseAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual QueueResponse's queue is equal to the given one.
     *
     * @param queue the given queue to compare the actual QueueResponse's queue to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueResponse's queue is not equal to the given one.
     */
    public S hasQueue(Queue queue) {
        // check that actual QueueResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting queue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Queue actualQueue = actual.getQueue();
        if (!Objects.areEqual(actualQueue, queue)) {
            failWithMessage(assertjErrorMessage, actual, queue, actualQueue);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
