package org.nzbhydra.downloading.downloaders.sabnzbd.mapping;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link QueueEntry} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractQueueEntryAssert<S extends AbstractQueueEntryAssert<S, A>, A extends QueueEntry> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractQueueEntryAssert}</code> to make assertions on actual QueueEntry.
     *
     * @param actual the QueueEntry we want to make assertions on.
     */
    protected AbstractQueueEntryAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual QueueEntry's avg_age is equal to the given one.
     *
     * @param avg_age the given avg_age to compare the actual QueueEntry's avg_age to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's avg_age is not equal to the given one.
     */
    public S hasAvg_age(String avg_age) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting avg_age of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualAvg_age = actual.getAvg_age();
        if (!Objects.areEqual(actualAvg_age, avg_age)) {
            failWithMessage(assertjErrorMessage, actual, avg_age, actualAvg_age);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's cat is equal to the given one.
     *
     * @param cat the given cat to compare the actual QueueEntry's cat to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's cat is not equal to the given one.
     */
    public S hasCat(String cat) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting cat of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCat = actual.getCat();
        if (!Objects.areEqual(actualCat, cat)) {
            failWithMessage(assertjErrorMessage, actual, cat, actualCat);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's eta is equal to the given one.
     *
     * @param eta the given eta to compare the actual QueueEntry's eta to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's eta is not equal to the given one.
     */
    public S hasEta(String eta) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting eta of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualEta = actual.getEta();
        if (!Objects.areEqual(actualEta, eta)) {
            failWithMessage(assertjErrorMessage, actual, eta, actualEta);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's filename is equal to the given one.
     *
     * @param filename the given filename to compare the actual QueueEntry's filename to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's filename is not equal to the given one.
     */
    public S hasFilename(String filename) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting filename of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualFilename = actual.getFilename();
        if (!Objects.areEqual(actualFilename, filename)) {
            failWithMessage(assertjErrorMessage, actual, filename, actualFilename);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's has_rating is equal to the given one.
     *
     * @param has_rating the given has_rating to compare the actual QueueEntry's has_rating to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's has_rating is not equal to the given one.
     */
    public S hasHas_rating(Boolean has_rating) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting has_rating of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualHas_rating = actual.getHas_rating();
        if (!Objects.areEqual(actualHas_rating, has_rating)) {
            failWithMessage(assertjErrorMessage, actual, has_rating, actualHas_rating);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's index is equal to the given one.
     *
     * @param index the given index to compare the actual QueueEntry's index to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's index is not equal to the given one.
     */
    public S hasIndex(Integer index) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting index of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualIndex = actual.getIndex();
        if (!Objects.areEqual(actualIndex, index)) {
            failWithMessage(assertjErrorMessage, actual, index, actualIndex);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's mb is equal to the given one.
     *
     * @param mb the given mb to compare the actual QueueEntry's mb to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's mb is not equal to the given one.
     */
    public S hasMb(String mb) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mb of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMb = actual.getMb();
        if (!Objects.areEqual(actualMb, mb)) {
            failWithMessage(assertjErrorMessage, actual, mb, actualMb);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's mbleft is equal to the given one.
     *
     * @param mbleft the given mbleft to compare the actual QueueEntry's mbleft to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's mbleft is not equal to the given one.
     */
    public S hasMbleft(String mbleft) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mbleft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMbleft = actual.getMbleft();
        if (!Objects.areEqual(actualMbleft, mbleft)) {
            failWithMessage(assertjErrorMessage, actual, mbleft, actualMbleft);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's mbmissing is equal to the given one.
     *
     * @param mbmissing the given mbmissing to compare the actual QueueEntry's mbmissing to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's mbmissing is not equal to the given one.
     */
    public S hasMbmissing(String mbmissing) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mbmissing of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMbmissing = actual.getMbmissing();
        if (!Objects.areEqual(actualMbmissing, mbmissing)) {
            failWithMessage(assertjErrorMessage, actual, mbmissing, actualMbmissing);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's nzo_id is equal to the given one.
     *
     * @param nzo_id the given nzo_id to compare the actual QueueEntry's nzo_id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's nzo_id is not equal to the given one.
     */
    public S hasNzo_id(String nzo_id) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting nzo_id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualNzo_id = actual.getNzo_id();
        if (!Objects.areEqual(actualNzo_id, nzo_id)) {
            failWithMessage(assertjErrorMessage, actual, nzo_id, actualNzo_id);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's password is equal to the given one.
     *
     * @param password the given password to compare the actual QueueEntry's password to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's password is not equal to the given one.
     */
    public S hasPassword(String password) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting password of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPassword = actual.getPassword();
        if (!Objects.areEqual(actualPassword, password)) {
            failWithMessage(assertjErrorMessage, actual, password, actualPassword);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's percentage is equal to the given one.
     *
     * @param percentage the given percentage to compare the actual QueueEntry's percentage to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's percentage is not equal to the given one.
     */
    public S hasPercentage(String percentage) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting percentage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPercentage = actual.getPercentage();
        if (!Objects.areEqual(actualPercentage, percentage)) {
            failWithMessage(assertjErrorMessage, actual, percentage, actualPercentage);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's priority is equal to the given one.
     *
     * @param priority the given priority to compare the actual QueueEntry's priority to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's priority is not equal to the given one.
     */
    public S hasPriority(String priority) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting priority of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPriority = actual.getPriority();
        if (!Objects.areEqual(actualPriority, priority)) {
            failWithMessage(assertjErrorMessage, actual, priority, actualPriority);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's script is equal to the given one.
     *
     * @param script the given script to compare the actual QueueEntry's script to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's script is not equal to the given one.
     */
    public S hasScript(String script) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting script of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualScript = actual.getScript();
        if (!Objects.areEqual(actualScript, script)) {
            failWithMessage(assertjErrorMessage, actual, script, actualScript);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's size is equal to the given one.
     *
     * @param size the given size to compare the actual QueueEntry's size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's size is not equal to the given one.
     */
    public S hasSize(String size) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSize = actual.getSize();
        if (!Objects.areEqual(actualSize, size)) {
            failWithMessage(assertjErrorMessage, actual, size, actualSize);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's sizeleft is equal to the given one.
     *
     * @param sizeleft the given sizeleft to compare the actual QueueEntry's sizeleft to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's sizeleft is not equal to the given one.
     */
    public S hasSizeleft(String sizeleft) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting sizeleft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSizeleft = actual.getSizeleft();
        if (!Objects.areEqual(actualSizeleft, sizeleft)) {
            failWithMessage(assertjErrorMessage, actual, sizeleft, actualSizeleft);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's status is equal to the given one.
     *
     * @param status the given status to compare the actual QueueEntry's status to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's status is not equal to the given one.
     */
    public S hasStatus(String status) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualStatus = actual.getStatus();
        if (!Objects.areEqual(actualStatus, status)) {
            failWithMessage(assertjErrorMessage, actual, status, actualStatus);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's timeleft is equal to the given one.
     *
     * @param timeleft the given timeleft to compare the actual QueueEntry's timeleft to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's timeleft is not equal to the given one.
     */
    public S hasTimeleft(String timeleft) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting timeleft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTimeleft = actual.getTimeleft();
        if (!Objects.areEqual(actualTimeleft, timeleft)) {
            failWithMessage(assertjErrorMessage, actual, timeleft, actualTimeleft);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual QueueEntry's unpackopts is equal to the given one.
     *
     * @param unpackopts the given unpackopts to compare the actual QueueEntry's unpackopts to.
     * @return this assertion object.
     * @throws AssertionError - if the actual QueueEntry's unpackopts is not equal to the given one.
     */
    public S hasUnpackopts(String unpackopts) {
        // check that actual QueueEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting unpackopts of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualUnpackopts = actual.getUnpackopts();
        if (!Objects.areEqual(actualUnpackopts, unpackopts)) {
            failWithMessage(assertjErrorMessage, actual, unpackopts, actualUnpackopts);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
