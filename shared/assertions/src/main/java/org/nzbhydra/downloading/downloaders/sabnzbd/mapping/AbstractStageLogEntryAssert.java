package org.nzbhydra.downloading.downloaders.sabnzbd.mapping;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link StageLogEntry} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractStageLogEntryAssert<S extends AbstractStageLogEntryAssert<S, A>, A extends StageLogEntry> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractStageLogEntryAssert}</code> to make assertions on actual StageLogEntry.
     *
     * @param actual the StageLogEntry we want to make assertions on.
     */
    protected AbstractStageLogEntryAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual StageLogEntry's actions contains the given String elements.
     *
     * @param actions the given elements that should be contained in actual StageLogEntry's actions.
     * @return this assertion object.
     * @throws AssertionError if the actual StageLogEntry's actions does not contain all given String elements.
     */
    public S hasActions(String... actions) {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (actions == null) {
            failWithMessage("Expecting actions parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getActions(), actions);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StageLogEntry's actions contains the given String elements in Collection.
     *
     * @param actions the given elements that should be contained in actual StageLogEntry's actions.
     * @return this assertion object.
     * @throws AssertionError if the actual StageLogEntry's actions does not contain all given String elements.
     */
    public S hasActions(java.util.Collection<? extends String> actions) {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (actions == null) {
            failWithMessage("Expecting actions parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getActions(), actions.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StageLogEntry's actions contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param actions the given elements that should be contained in actual StageLogEntry's actions.
     * @return this assertion object.
     * @throws AssertionError if the actual StageLogEntry's actions does not contain all given String elements.
     */
    public S hasOnlyActions(String... actions) {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (actions == null) {
            failWithMessage("Expecting actions parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getActions(), actions);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StageLogEntry's actions contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param actions the given elements that should be contained in actual StageLogEntry's actions.
     * @return this assertion object.
     * @throws AssertionError if the actual StageLogEntry's actions does not contain all given String elements.
     */
    public S hasOnlyActions(java.util.Collection<? extends String> actions) {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (actions == null) {
            failWithMessage("Expecting actions parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getActions(), actions.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StageLogEntry's actions does not contain the given String elements.
     *
     * @param actions the given elements that should not be in actual StageLogEntry's actions.
     * @return this assertion object.
     * @throws AssertionError if the actual StageLogEntry's actions contains any given String elements.
     */
    public S doesNotHaveActions(String... actions) {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (actions == null) {
            failWithMessage("Expecting actions parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getActions(), actions);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StageLogEntry's actions does not contain the given String elements in Collection.
     *
     * @param actions the given elements that should not be in actual StageLogEntry's actions.
     * @return this assertion object.
     * @throws AssertionError if the actual StageLogEntry's actions contains any given String elements.
     */
    public S doesNotHaveActions(java.util.Collection<? extends String> actions) {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (actions == null) {
            failWithMessage("Expecting actions parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getActions(), actions.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StageLogEntry has no actions.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StageLogEntry's actions is not empty.
     */
    public S hasNoActions() {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have actions but had :\n  <%s>";

        // check
        if (actual.getActions().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getActions());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StageLogEntry's name is equal to the given one.
     *
     * @param name the given name to compare the actual StageLogEntry's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StageLogEntry's name is not equal to the given one.
     */
    public S hasName(String name) {
        // check that actual StageLogEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
