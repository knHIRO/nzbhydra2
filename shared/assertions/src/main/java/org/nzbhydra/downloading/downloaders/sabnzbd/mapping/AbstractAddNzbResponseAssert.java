package org.nzbhydra.downloading.downloaders.sabnzbd.mapping;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link AddNzbResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractAddNzbResponseAssert<S extends AbstractAddNzbResponseAssert<S, A>, A extends AddNzbResponse> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractAddNzbResponseAssert}</code> to make assertions on actual AddNzbResponse.
     *
     * @param actual the AddNzbResponse we want to make assertions on.
     */
    protected AbstractAddNzbResponseAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual AddNzbResponse's error is equal to the given one.
     *
     * @param error the given error to compare the actual AddNzbResponse's error to.
     * @return this assertion object.
     * @throws AssertionError - if the actual AddNzbResponse's error is not equal to the given one.
     */
    public S hasError(String error) {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting error of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualError = actual.getError();
        if (!Objects.areEqual(actualError, error)) {
            failWithMessage(assertjErrorMessage, actual, error, actualError);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse's nzoIds contains the given String elements.
     *
     * @param nzoIds the given elements that should be contained in actual AddNzbResponse's nzoIds.
     * @return this assertion object.
     * @throws AssertionError if the actual AddNzbResponse's nzoIds does not contain all given String elements.
     */
    public S hasNzoIds(String... nzoIds) {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (nzoIds == null) {
            failWithMessage("Expecting nzoIds parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getNzoIds(), nzoIds);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse's nzoIds contains the given String elements in Collection.
     *
     * @param nzoIds the given elements that should be contained in actual AddNzbResponse's nzoIds.
     * @return this assertion object.
     * @throws AssertionError if the actual AddNzbResponse's nzoIds does not contain all given String elements.
     */
    public S hasNzoIds(java.util.Collection<? extends String> nzoIds) {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (nzoIds == null) {
            failWithMessage("Expecting nzoIds parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getNzoIds(), nzoIds.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse's nzoIds contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param nzoIds the given elements that should be contained in actual AddNzbResponse's nzoIds.
     * @return this assertion object.
     * @throws AssertionError if the actual AddNzbResponse's nzoIds does not contain all given String elements.
     */
    public S hasOnlyNzoIds(String... nzoIds) {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (nzoIds == null) {
            failWithMessage("Expecting nzoIds parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getNzoIds(), nzoIds);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse's nzoIds contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param nzoIds the given elements that should be contained in actual AddNzbResponse's nzoIds.
     * @return this assertion object.
     * @throws AssertionError if the actual AddNzbResponse's nzoIds does not contain all given String elements.
     */
    public S hasOnlyNzoIds(java.util.Collection<? extends String> nzoIds) {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (nzoIds == null) {
            failWithMessage("Expecting nzoIds parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getNzoIds(), nzoIds.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse's nzoIds does not contain the given String elements.
     *
     * @param nzoIds the given elements that should not be in actual AddNzbResponse's nzoIds.
     * @return this assertion object.
     * @throws AssertionError if the actual AddNzbResponse's nzoIds contains any given String elements.
     */
    public S doesNotHaveNzoIds(String... nzoIds) {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (nzoIds == null) {
            failWithMessage("Expecting nzoIds parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getNzoIds(), nzoIds);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse's nzoIds does not contain the given String elements in Collection.
     *
     * @param nzoIds the given elements that should not be in actual AddNzbResponse's nzoIds.
     * @return this assertion object.
     * @throws AssertionError if the actual AddNzbResponse's nzoIds contains any given String elements.
     */
    public S doesNotHaveNzoIds(java.util.Collection<? extends String> nzoIds) {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (nzoIds == null) {
            failWithMessage("Expecting nzoIds parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getNzoIds(), nzoIds.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse has no nzoIds.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual AddNzbResponse's nzoIds is not empty.
     */
    public S hasNoNzoIds() {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have nzoIds but had :\n  <%s>";

        // check
        if (actual.getNzoIds().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getNzoIds());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual AddNzbResponse is status.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual AddNzbResponse is not status.
     */
    public S isStatus() {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isStatus()) {
            failWithMessage("\nExpecting that actual AddNzbResponse is status but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AddNzbResponse is not status.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual AddNzbResponse is status.
     */
    public S isNotStatus() {
        // check that actual AddNzbResponse we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isStatus()) {
            failWithMessage("\nExpecting that actual AddNzbResponse is not status but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

}
