package org.nzbhydra.downloading.downloaders.sabnzbd.mapping;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Queue} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractQueueAssert<S extends AbstractQueueAssert<S, A>, A extends Queue> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractQueueAssert}</code> to make assertions on actual Queue.
     *
     * @param actual the Queue we want to make assertions on.
     */
    protected AbstractQueueAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual Queue's cache_art is equal to the given one.
     *
     * @param cache_art the given cache_art to compare the actual Queue's cache_art to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's cache_art is not equal to the given one.
     */
    public S hasCache_art(String cache_art) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting cache_art of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCache_art = actual.getCache_art();
        if (!Objects.areEqual(actualCache_art, cache_art)) {
            failWithMessage(assertjErrorMessage, actual, cache_art, actualCache_art);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's cache_max is equal to the given one.
     *
     * @param cache_max the given cache_max to compare the actual Queue's cache_max to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's cache_max is not equal to the given one.
     */
    public S hasCache_max(String cache_max) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting cache_max of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCache_max = actual.getCache_max();
        if (!Objects.areEqual(actualCache_max, cache_max)) {
            failWithMessage(assertjErrorMessage, actual, cache_max, actualCache_max);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's cache_size is equal to the given one.
     *
     * @param cache_size the given cache_size to compare the actual Queue's cache_size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's cache_size is not equal to the given one.
     */
    public S hasCache_size(String cache_size) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting cache_size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCache_size = actual.getCache_size();
        if (!Objects.areEqual(actualCache_size, cache_size)) {
            failWithMessage(assertjErrorMessage, actual, cache_size, actualCache_size);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's categories contains the given String elements.
     *
     * @param categories the given elements that should be contained in actual Queue's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's categories does not contain all given String elements.
     */
    public S hasCategories(String... categories) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's categories contains the given String elements in Collection.
     *
     * @param categories the given elements that should be contained in actual Queue's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's categories does not contain all given String elements.
     */
    public S hasCategories(java.util.Collection<? extends String> categories) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's categories contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual Queue's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's categories does not contain all given String elements.
     */
    public S hasOnlyCategories(String... categories) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's categories contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual Queue's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's categories does not contain all given String elements.
     */
    public S hasOnlyCategories(java.util.Collection<? extends String> categories) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's categories does not contain the given String elements.
     *
     * @param categories the given elements that should not be in actual Queue's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's categories contains any given String elements.
     */
    public S doesNotHaveCategories(String... categories) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's categories does not contain the given String elements in Collection.
     *
     * @param categories the given elements that should not be in actual Queue's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's categories contains any given String elements.
     */
    public S doesNotHaveCategories(java.util.Collection<? extends String> categories) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue has no categories.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's categories is not empty.
     */
    public S hasNoCategories() {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have categories but had :\n  <%s>";

        // check
        if (actual.getCategories().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getCategories());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual Queue's diskspace1 is equal to the given one.
     *
     * @param diskspace1 the given diskspace1 to compare the actual Queue's diskspace1 to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's diskspace1 is not equal to the given one.
     */
    public S hasDiskspace1(String diskspace1) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting diskspace1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDiskspace1 = actual.getDiskspace1();
        if (!Objects.areEqual(actualDiskspace1, diskspace1)) {
            failWithMessage(assertjErrorMessage, actual, diskspace1, actualDiskspace1);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's diskspace1_norm is equal to the given one.
     *
     * @param diskspace1_norm the given diskspace1_norm to compare the actual Queue's diskspace1_norm to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's diskspace1_norm is not equal to the given one.
     */
    public S hasDiskspace1_norm(String diskspace1_norm) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting diskspace1_norm of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDiskspace1_norm = actual.getDiskspace1_norm();
        if (!Objects.areEqual(actualDiskspace1_norm, diskspace1_norm)) {
            failWithMessage(assertjErrorMessage, actual, diskspace1_norm, actualDiskspace1_norm);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's diskspace2 is equal to the given one.
     *
     * @param diskspace2 the given diskspace2 to compare the actual Queue's diskspace2 to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's diskspace2 is not equal to the given one.
     */
    public S hasDiskspace2(String diskspace2) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting diskspace2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDiskspace2 = actual.getDiskspace2();
        if (!Objects.areEqual(actualDiskspace2, diskspace2)) {
            failWithMessage(assertjErrorMessage, actual, diskspace2, actualDiskspace2);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's diskspace2_norm is equal to the given one.
     *
     * @param diskspace2_norm the given diskspace2_norm to compare the actual Queue's diskspace2_norm to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's diskspace2_norm is not equal to the given one.
     */
    public S hasDiskspace2_norm(String diskspace2_norm) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting diskspace2_norm of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDiskspace2_norm = actual.getDiskspace2_norm();
        if (!Objects.areEqual(actualDiskspace2_norm, diskspace2_norm)) {
            failWithMessage(assertjErrorMessage, actual, diskspace2_norm, actualDiskspace2_norm);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's diskspacetotal1 is equal to the given one.
     *
     * @param diskspacetotal1 the given diskspacetotal1 to compare the actual Queue's diskspacetotal1 to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's diskspacetotal1 is not equal to the given one.
     */
    public S hasDiskspacetotal1(String diskspacetotal1) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting diskspacetotal1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDiskspacetotal1 = actual.getDiskspacetotal1();
        if (!Objects.areEqual(actualDiskspacetotal1, diskspacetotal1)) {
            failWithMessage(assertjErrorMessage, actual, diskspacetotal1, actualDiskspacetotal1);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's diskspacetotal2 is equal to the given one.
     *
     * @param diskspacetotal2 the given diskspacetotal2 to compare the actual Queue's diskspacetotal2 to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's diskspacetotal2 is not equal to the given one.
     */
    public S hasDiskspacetotal2(String diskspacetotal2) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting diskspacetotal2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDiskspacetotal2 = actual.getDiskspacetotal2();
        if (!Objects.areEqual(actualDiskspacetotal2, diskspacetotal2)) {
            failWithMessage(assertjErrorMessage, actual, diskspacetotal2, actualDiskspacetotal2);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's eta is equal to the given one.
     *
     * @param eta the given eta to compare the actual Queue's eta to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's eta is not equal to the given one.
     */
    public S hasEta(String eta) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting eta of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualEta = actual.getEta();
        if (!Objects.areEqual(actualEta, eta)) {
            failWithMessage(assertjErrorMessage, actual, eta, actualEta);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's finish is equal to the given one.
     *
     * @param finish the given finish to compare the actual Queue's finish to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's finish is not equal to the given one.
     */
    public S hasFinish(Long finish) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting finish of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualFinish = actual.getFinish();
        if (!Objects.areEqual(actualFinish, finish)) {
            failWithMessage(assertjErrorMessage, actual, finish, actualFinish);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's finishaction is equal to the given one.
     *
     * @param finishaction the given finishaction to compare the actual Queue's finishaction to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's finishaction is not equal to the given one.
     */
    public S hasFinishaction(Object finishaction) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting finishaction of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Object actualFinishaction = actual.getFinishaction();
        if (!Objects.areEqual(actualFinishaction, finishaction)) {
            failWithMessage(assertjErrorMessage, actual, finishaction, actualFinishaction);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's have_quota is equal to the given one.
     *
     * @param have_quota the given have_quota to compare the actual Queue's have_quota to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's have_quota is not equal to the given one.
     */
    public S hasHave_quota(Boolean have_quota) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting have_quota of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualHave_quota = actual.getHave_quota();
        if (!Objects.areEqual(actualHave_quota, have_quota)) {
            failWithMessage(assertjErrorMessage, actual, have_quota, actualHave_quota);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's have_warnings is equal to the given one.
     *
     * @param have_warnings the given have_warnings to compare the actual Queue's have_warnings to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's have_warnings is not equal to the given one.
     */
    public S hasHave_warnings(String have_warnings) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting have_warnings of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualHave_warnings = actual.getHave_warnings();
        if (!Objects.areEqual(actualHave_warnings, have_warnings)) {
            failWithMessage(assertjErrorMessage, actual, have_warnings, actualHave_warnings);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's kbpersec is equal to the given one.
     *
     * @param kbpersec the given kbpersec to compare the actual Queue's kbpersec to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's kbpersec is not equal to the given one.
     */
    public S hasKbpersec(String kbpersec) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting kbpersec of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualKbpersec = actual.getKbpersec();
        if (!Objects.areEqual(actualKbpersec, kbpersec)) {
            failWithMessage(assertjErrorMessage, actual, kbpersec, actualKbpersec);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's left_quota is equal to the given one.
     *
     * @param left_quota the given left_quota to compare the actual Queue's left_quota to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's left_quota is not equal to the given one.
     */
    public S hasLeft_quota(String left_quota) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting left_quota of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualLeft_quota = actual.getLeft_quota();
        if (!Objects.areEqual(actualLeft_quota, left_quota)) {
            failWithMessage(assertjErrorMessage, actual, left_quota, actualLeft_quota);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's limit is equal to the given one.
     *
     * @param limit the given limit to compare the actual Queue's limit to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's limit is not equal to the given one.
     */
    public S hasLimit(Integer limit) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting limit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualLimit = actual.getLimit();
        if (!Objects.areEqual(actualLimit, limit)) {
            failWithMessage(assertjErrorMessage, actual, limit, actualLimit);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's loadavg is equal to the given one.
     *
     * @param loadavg the given loadavg to compare the actual Queue's loadavg to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's loadavg is not equal to the given one.
     */
    public S hasLoadavg(String loadavg) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting loadavg of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualLoadavg = actual.getLoadavg();
        if (!Objects.areEqual(actualLoadavg, loadavg)) {
            failWithMessage(assertjErrorMessage, actual, loadavg, actualLoadavg);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's mb is equal to the given one.
     *
     * @param mb the given mb to compare the actual Queue's mb to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's mb is not equal to the given one.
     */
    public S hasMb(String mb) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mb of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMb = actual.getMb();
        if (!Objects.areEqual(actualMb, mb)) {
            failWithMessage(assertjErrorMessage, actual, mb, actualMb);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's mbleft is equal to the given one.
     *
     * @param mbleft the given mbleft to compare the actual Queue's mbleft to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's mbleft is not equal to the given one.
     */
    public S hasMbleft(String mbleft) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting mbleft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualMbleft = actual.getMbleft();
        if (!Objects.areEqual(actualMbleft, mbleft)) {
            failWithMessage(assertjErrorMessage, actual, mbleft, actualMbleft);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's noofslots is equal to the given one.
     *
     * @param noofslots the given noofslots to compare the actual Queue's noofslots to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's noofslots is not equal to the given one.
     */
    public S hasNoofslots(Integer noofslots) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting noofslots of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualNoofslots = actual.getNoofslots();
        if (!Objects.areEqual(actualNoofslots, noofslots)) {
            failWithMessage(assertjErrorMessage, actual, noofslots, actualNoofslots);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's noofslots_total is equal to the given one.
     *
     * @param noofslots_total the given noofslots_total to compare the actual Queue's noofslots_total to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's noofslots_total is not equal to the given one.
     */
    public S hasNoofslots_total(Integer noofslots_total) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting noofslots_total of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualNoofslots_total = actual.getNoofslots_total();
        if (!Objects.areEqual(actualNoofslots_total, noofslots_total)) {
            failWithMessage(assertjErrorMessage, actual, noofslots_total, actualNoofslots_total);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's pause_int is equal to the given one.
     *
     * @param pause_int the given pause_int to compare the actual Queue's pause_int to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's pause_int is not equal to the given one.
     */
    public S hasPause_int(String pause_int) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting pause_int of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPause_int = actual.getPause_int();
        if (!Objects.areEqual(actualPause_int, pause_int)) {
            failWithMessage(assertjErrorMessage, actual, pause_int, actualPause_int);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's paused is equal to the given one.
     *
     * @param paused the given paused to compare the actual Queue's paused to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's paused is not equal to the given one.
     */
    public S hasPaused(Boolean paused) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting paused of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualPaused = actual.getPaused();
        if (!Objects.areEqual(actualPaused, paused)) {
            failWithMessage(assertjErrorMessage, actual, paused, actualPaused);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's paused_all is equal to the given one.
     *
     * @param paused_all the given paused_all to compare the actual Queue's paused_all to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's paused_all is not equal to the given one.
     */
    public S hasPaused_all(Boolean paused_all) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting paused_all of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualPaused_all = actual.getPaused_all();
        if (!Objects.areEqual(actualPaused_all, paused_all)) {
            failWithMessage(assertjErrorMessage, actual, paused_all, actualPaused_all);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's queue_details is equal to the given one.
     *
     * @param queue_details the given queue_details to compare the actual Queue's queue_details to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's queue_details is not equal to the given one.
     */
    public S hasQueue_details(String queue_details) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting queue_details of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualQueue_details = actual.getQueue_details();
        if (!Objects.areEqual(actualQueue_details, queue_details)) {
            failWithMessage(assertjErrorMessage, actual, queue_details, actualQueue_details);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's quota is equal to the given one.
     *
     * @param quota the given quota to compare the actual Queue's quota to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's quota is not equal to the given one.
     */
    public S hasQuota(String quota) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting quota of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualQuota = actual.getQuota();
        if (!Objects.areEqual(actualQuota, quota)) {
            failWithMessage(assertjErrorMessage, actual, quota, actualQuota);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's rating_enable is equal to the given one.
     *
     * @param rating_enable the given rating_enable to compare the actual Queue's rating_enable to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's rating_enable is not equal to the given one.
     */
    public S hasRating_enable(Boolean rating_enable) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting rating_enable of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualRating_enable = actual.getRating_enable();
        if (!Objects.areEqual(actualRating_enable, rating_enable)) {
            failWithMessage(assertjErrorMessage, actual, rating_enable, actualRating_enable);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's refresh_rate is equal to the given one.
     *
     * @param refresh_rate the given refresh_rate to compare the actual Queue's refresh_rate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's refresh_rate is not equal to the given one.
     */
    public S hasRefresh_rate(String refresh_rate) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting refresh_rate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualRefresh_rate = actual.getRefresh_rate();
        if (!Objects.areEqual(actualRefresh_rate, refresh_rate)) {
            failWithMessage(assertjErrorMessage, actual, refresh_rate, actualRefresh_rate);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's scripts contains the given String elements.
     *
     * @param scripts the given elements that should be contained in actual Queue's scripts.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's scripts does not contain all given String elements.
     */
    public S hasScripts(String... scripts) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (scripts == null) {
            failWithMessage("Expecting scripts parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getScripts(), scripts);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's scripts contains the given String elements in Collection.
     *
     * @param scripts the given elements that should be contained in actual Queue's scripts.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's scripts does not contain all given String elements.
     */
    public S hasScripts(java.util.Collection<? extends String> scripts) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (scripts == null) {
            failWithMessage("Expecting scripts parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getScripts(), scripts.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's scripts contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param scripts the given elements that should be contained in actual Queue's scripts.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's scripts does not contain all given String elements.
     */
    public S hasOnlyScripts(String... scripts) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (scripts == null) {
            failWithMessage("Expecting scripts parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getScripts(), scripts);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's scripts contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param scripts the given elements that should be contained in actual Queue's scripts.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's scripts does not contain all given String elements.
     */
    public S hasOnlyScripts(java.util.Collection<? extends String> scripts) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (scripts == null) {
            failWithMessage("Expecting scripts parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getScripts(), scripts.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's scripts does not contain the given String elements.
     *
     * @param scripts the given elements that should not be in actual Queue's scripts.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's scripts contains any given String elements.
     */
    public S doesNotHaveScripts(String... scripts) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (scripts == null) {
            failWithMessage("Expecting scripts parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getScripts(), scripts);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's scripts does not contain the given String elements in Collection.
     *
     * @param scripts the given elements that should not be in actual Queue's scripts.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's scripts contains any given String elements.
     */
    public S doesNotHaveScripts(java.util.Collection<? extends String> scripts) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (scripts == null) {
            failWithMessage("Expecting scripts parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getScripts(), scripts.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue has no scripts.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's scripts is not empty.
     */
    public S hasNoScripts() {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have scripts but had :\n  <%s>";

        // check
        if (actual.getScripts().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getScripts());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual Queue's size is equal to the given one.
     *
     * @param size the given size to compare the actual Queue's size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's size is not equal to the given one.
     */
    public S hasSize(String size) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSize = actual.getSize();
        if (!Objects.areEqual(actualSize, size)) {
            failWithMessage(assertjErrorMessage, actual, size, actualSize);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's sizeleft is equal to the given one.
     *
     * @param sizeleft the given sizeleft to compare the actual Queue's sizeleft to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's sizeleft is not equal to the given one.
     */
    public S hasSizeleft(String sizeleft) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting sizeleft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSizeleft = actual.getSizeleft();
        if (!Objects.areEqual(actualSizeleft, sizeleft)) {
            failWithMessage(assertjErrorMessage, actual, sizeleft, actualSizeleft);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's slots contains the given QueueEntry elements.
     *
     * @param slots the given elements that should be contained in actual Queue's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's slots does not contain all given QueueEntry elements.
     */
    public S hasSlots(QueueEntry... slots) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given QueueEntry varargs is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSlots(), slots);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's slots contains the given QueueEntry elements in Collection.
     *
     * @param slots the given elements that should be contained in actual Queue's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's slots does not contain all given QueueEntry elements.
     */
    public S hasSlots(java.util.Collection<? extends QueueEntry> slots) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given QueueEntry collection is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSlots(), slots.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's slots contains <b>only</b> the given QueueEntry elements and nothing else in whatever order.
     *
     * @param slots the given elements that should be contained in actual Queue's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's slots does not contain all given QueueEntry elements.
     */
    public S hasOnlySlots(QueueEntry... slots) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given QueueEntry varargs is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSlots(), slots);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's slots contains <b>only</b> the given QueueEntry elements in Collection and nothing else in whatever order.
     *
     * @param slots the given elements that should be contained in actual Queue's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's slots does not contain all given QueueEntry elements.
     */
    public S hasOnlySlots(java.util.Collection<? extends QueueEntry> slots) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given QueueEntry collection is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSlots(), slots.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's slots does not contain the given QueueEntry elements.
     *
     * @param slots the given elements that should not be in actual Queue's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's slots contains any given QueueEntry elements.
     */
    public S doesNotHaveSlots(QueueEntry... slots) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given QueueEntry varargs is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSlots(), slots);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's slots does not contain the given QueueEntry elements in Collection.
     *
     * @param slots the given elements that should not be in actual Queue's slots.
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's slots contains any given QueueEntry elements.
     */
    public S doesNotHaveSlots(java.util.Collection<? extends QueueEntry> slots) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // check that given QueueEntry collection is not null.
        if (slots == null) {
            failWithMessage("Expecting slots parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSlots(), slots.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue has no slots.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual Queue's slots is not empty.
     */
    public S hasNoSlots() {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have slots but had :\n  <%s>";

        // check
        if (actual.getSlots().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSlots());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual Queue's speed is equal to the given one.
     *
     * @param speed the given speed to compare the actual Queue's speed to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's speed is not equal to the given one.
     */
    public S hasSpeed(String speed) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting speed of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSpeed = actual.getSpeed();
        if (!Objects.areEqual(actualSpeed, speed)) {
            failWithMessage(assertjErrorMessage, actual, speed, actualSpeed);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's speedlimit is equal to the given one.
     *
     * @param speedlimit the given speedlimit to compare the actual Queue's speedlimit to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's speedlimit is not equal to the given one.
     */
    public S hasSpeedlimit(String speedlimit) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting speedlimit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSpeedlimit = actual.getSpeedlimit();
        if (!Objects.areEqual(actualSpeedlimit, speedlimit)) {
            failWithMessage(assertjErrorMessage, actual, speedlimit, actualSpeedlimit);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's speedlimit_abs is equal to the given one.
     *
     * @param speedlimit_abs the given speedlimit_abs to compare the actual Queue's speedlimit_abs to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's speedlimit_abs is not equal to the given one.
     */
    public S hasSpeedlimit_abs(String speedlimit_abs) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting speedlimit_abs of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSpeedlimit_abs = actual.getSpeedlimit_abs();
        if (!Objects.areEqual(actualSpeedlimit_abs, speedlimit_abs)) {
            failWithMessage(assertjErrorMessage, actual, speedlimit_abs, actualSpeedlimit_abs);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's start is equal to the given one.
     *
     * @param start the given start to compare the actual Queue's start to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's start is not equal to the given one.
     */
    public S hasStart(Integer start) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting start of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualStart = actual.getStart();
        if (!Objects.areEqual(actualStart, start)) {
            failWithMessage(assertjErrorMessage, actual, start, actualStart);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's status is equal to the given one.
     *
     * @param status the given status to compare the actual Queue's status to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's status is not equal to the given one.
     */
    public S hasStatus(String status) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualStatus = actual.getStatus();
        if (!Objects.areEqual(actualStatus, status)) {
            failWithMessage(assertjErrorMessage, actual, status, actualStatus);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's timeleft is equal to the given one.
     *
     * @param timeleft the given timeleft to compare the actual Queue's timeleft to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's timeleft is not equal to the given one.
     */
    public S hasTimeleft(String timeleft) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting timeleft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTimeleft = actual.getTimeleft();
        if (!Objects.areEqual(actualTimeleft, timeleft)) {
            failWithMessage(assertjErrorMessage, actual, timeleft, actualTimeleft);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Queue's version is equal to the given one.
     *
     * @param version the given version to compare the actual Queue's version to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Queue's version is not equal to the given one.
     */
    public S hasVersion(String version) {
        // check that actual Queue we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualVersion = actual.getVersion();
        if (!Objects.areEqual(actualVersion, version)) {
            failWithMessage(assertjErrorMessage, actual, version, actualVersion);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
