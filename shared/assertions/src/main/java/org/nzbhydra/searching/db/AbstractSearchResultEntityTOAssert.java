package org.nzbhydra.searching.db;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link SearchResultEntityTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractSearchResultEntityTOAssert<S extends AbstractSearchResultEntityTOAssert<S, A>, A extends SearchResultEntityTO> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractSearchResultEntityTOAssert}</code> to make assertions on actual SearchResultEntityTO.
     *
     * @param actual the SearchResultEntityTO we want to make assertions on.
     */
    protected AbstractSearchResultEntityTOAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual SearchResultEntityTO's details is equal to the given one.
     *
     * @param details the given details to compare the actual SearchResultEntityTO's details to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's details is not equal to the given one.
     */
    public S hasDetails(String details) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting details of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDetails = actual.getDetails();
        if (!Objects.areEqual(actualDetails, details)) {
            failWithMessage(assertjErrorMessage, actual, details, actualDetails);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's downloadType is equal to the given one.
     *
     * @param downloadType the given downloadType to compare the actual SearchResultEntityTO's downloadType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's downloadType is not equal to the given one.
     */
    public S hasDownloadType(org.nzbhydra.config.downloading.DownloadType downloadType) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.config.downloading.DownloadType actualDownloadType = actual.getDownloadType();
        if (!Objects.areEqual(actualDownloadType, downloadType)) {
            failWithMessage(assertjErrorMessage, actual, downloadType, actualDownloadType);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's firstFound is equal to the given one.
     *
     * @param firstFound the given firstFound to compare the actual SearchResultEntityTO's firstFound to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's firstFound is not equal to the given one.
     */
    public S hasFirstFound(java.time.Instant firstFound) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting firstFound of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.Instant actualFirstFound = actual.getFirstFound();
        if (!Objects.areEqual(actualFirstFound, firstFound)) {
            failWithMessage(assertjErrorMessage, actual, firstFound, actualFirstFound);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's id is equal to the given one.
     *
     * @param id the given id to compare the actual SearchResultEntityTO's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's id is not equal to the given one.
     */
    public S hasId(long id) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualId = actual.getId();
        if (actualId != id) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's indexer is equal to the given one.
     *
     * @param indexer the given indexer to compare the actual SearchResultEntityTO's indexer to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's indexer is not equal to the given one.
     */
    public S hasIndexer(org.nzbhydra.indexers.IndexerEntityTO indexer) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting indexer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.indexers.IndexerEntityTO actualIndexer = actual.getIndexer();
        if (!Objects.areEqual(actualIndexer, indexer)) {
            failWithMessage(assertjErrorMessage, actual, indexer, actualIndexer);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's indexerGuid is equal to the given one.
     *
     * @param indexerGuid the given indexerGuid to compare the actual SearchResultEntityTO's indexerGuid to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's indexerGuid is not equal to the given one.
     */
    public S hasIndexerGuid(String indexerGuid) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting indexerGuid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualIndexerGuid = actual.getIndexerGuid();
        if (!Objects.areEqual(actualIndexerGuid, indexerGuid)) {
            failWithMessage(assertjErrorMessage, actual, indexerGuid, actualIndexerGuid);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's indexerSearchEntityId is equal to the given one.
     *
     * @param indexerSearchEntityId the given indexerSearchEntityId to compare the actual SearchResultEntityTO's indexerSearchEntityId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's indexerSearchEntityId is not equal to the given one.
     */
    public S hasIndexerSearchEntityId(Integer indexerSearchEntityId) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting indexerSearchEntityId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualIndexerSearchEntityId = actual.getIndexerSearchEntityId();
        if (!Objects.areEqual(actualIndexerSearchEntityId, indexerSearchEntityId)) {
            failWithMessage(assertjErrorMessage, actual, indexerSearchEntityId, actualIndexerSearchEntityId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's link is equal to the given one.
     *
     * @param link the given link to compare the actual SearchResultEntityTO's link to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's link is not equal to the given one.
     */
    public S hasLink(String link) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting link of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualLink = actual.getLink();
        if (!Objects.areEqual(actualLink, link)) {
            failWithMessage(assertjErrorMessage, actual, link, actualLink);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's pubDate is equal to the given one.
     *
     * @param pubDate the given pubDate to compare the actual SearchResultEntityTO's pubDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's pubDate is not equal to the given one.
     */
    public S hasPubDate(java.time.Instant pubDate) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting pubDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.Instant actualPubDate = actual.getPubDate();
        if (!Objects.areEqual(actualPubDate, pubDate)) {
            failWithMessage(assertjErrorMessage, actual, pubDate, actualPubDate);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResultEntityTO's title is equal to the given one.
     *
     * @param title the given title to compare the actual SearchResultEntityTO's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResultEntityTO's title is not equal to the given one.
     */
    public S hasTitle(String title) {
        // check that actual SearchResultEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTitle = actual.getTitle();
        if (!Objects.areEqual(actualTitle, title)) {
            failWithMessage(assertjErrorMessage, actual, title, actualTitle);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
