package org.nzbhydra.searching.db;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link IdentifierKeyValuePairTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractIdentifierKeyValuePairTOAssert<S extends AbstractIdentifierKeyValuePairTOAssert<S, A>, A extends IdentifierKeyValuePairTO> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractIdentifierKeyValuePairTOAssert}</code> to make assertions on actual IdentifierKeyValuePairTO.
     *
     * @param actual the IdentifierKeyValuePairTO we want to make assertions on.
     */
    protected AbstractIdentifierKeyValuePairTOAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual IdentifierKeyValuePairTO's identifierKey is equal to the given one.
     *
     * @param identifierKey the given identifierKey to compare the actual IdentifierKeyValuePairTO's identifierKey to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IdentifierKeyValuePairTO's identifierKey is not equal to the given one.
     */
    public S hasIdentifierKey(String identifierKey) {
        // check that actual IdentifierKeyValuePairTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting identifierKey of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualIdentifierKey = actual.getIdentifierKey();
        if (!Objects.areEqual(actualIdentifierKey, identifierKey)) {
            failWithMessage(assertjErrorMessage, actual, identifierKey, actualIdentifierKey);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IdentifierKeyValuePairTO's identifierValue is equal to the given one.
     *
     * @param identifierValue the given identifierValue to compare the actual IdentifierKeyValuePairTO's identifierValue to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IdentifierKeyValuePairTO's identifierValue is not equal to the given one.
     */
    public S hasIdentifierValue(String identifierValue) {
        // check that actual IdentifierKeyValuePairTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting identifierValue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualIdentifierValue = actual.getIdentifierValue();
        if (!Objects.areEqual(actualIdentifierValue, identifierValue)) {
            failWithMessage(assertjErrorMessage, actual, identifierValue, actualIdentifierValue);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
