package org.nzbhydra.searching;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link SearchResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractSearchResponseAssert<S extends AbstractSearchResponseAssert<S, A>, A extends SearchResponse> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractSearchResponseAssert}</code> to make assertions on actual SearchResponse.
     *
     * @param actual the SearchResponse we want to make assertions on.
     */
    protected AbstractSearchResponseAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual SearchResponse's indexerSearchMetaDatas contains the given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     *
     * @param indexerSearchMetaDatas the given elements that should be contained in actual SearchResponse's indexerSearchMetaDatas.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's indexerSearchMetaDatas does not contain all given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     */
    public S hasIndexerSearchMetaDatas(org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData... indexerSearchMetaDatas) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData varargs is not null.
        if (indexerSearchMetaDatas == null) {
            failWithMessage("Expecting indexerSearchMetaDatas parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerSearchMetaDatas(), indexerSearchMetaDatas);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's indexerSearchMetaDatas contains the given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements in Collection.
     *
     * @param indexerSearchMetaDatas the given elements that should be contained in actual SearchResponse's indexerSearchMetaDatas.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's indexerSearchMetaDatas does not contain all given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     */
    public S hasIndexerSearchMetaDatas(java.util.Collection<? extends org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData> indexerSearchMetaDatas) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData collection is not null.
        if (indexerSearchMetaDatas == null) {
            failWithMessage("Expecting indexerSearchMetaDatas parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerSearchMetaDatas(), indexerSearchMetaDatas.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's indexerSearchMetaDatas contains <b>only</b> the given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements and nothing else in whatever order.
     *
     * @param indexerSearchMetaDatas the given elements that should be contained in actual SearchResponse's indexerSearchMetaDatas.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's indexerSearchMetaDatas does not contain all given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     */
    public S hasOnlyIndexerSearchMetaDatas(org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData... indexerSearchMetaDatas) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData varargs is not null.
        if (indexerSearchMetaDatas == null) {
            failWithMessage("Expecting indexerSearchMetaDatas parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerSearchMetaDatas(), indexerSearchMetaDatas);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's indexerSearchMetaDatas contains <b>only</b> the given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements in Collection and nothing else in whatever order.
     *
     * @param indexerSearchMetaDatas the given elements that should be contained in actual SearchResponse's indexerSearchMetaDatas.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's indexerSearchMetaDatas does not contain all given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     */
    public S hasOnlyIndexerSearchMetaDatas(java.util.Collection<? extends org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData> indexerSearchMetaDatas) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData collection is not null.
        if (indexerSearchMetaDatas == null) {
            failWithMessage("Expecting indexerSearchMetaDatas parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerSearchMetaDatas(), indexerSearchMetaDatas.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's indexerSearchMetaDatas does not contain the given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     *
     * @param indexerSearchMetaDatas the given elements that should not be in actual SearchResponse's indexerSearchMetaDatas.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's indexerSearchMetaDatas contains any given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     */
    public S doesNotHaveIndexerSearchMetaDatas(org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData... indexerSearchMetaDatas) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData varargs is not null.
        if (indexerSearchMetaDatas == null) {
            failWithMessage("Expecting indexerSearchMetaDatas parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerSearchMetaDatas(), indexerSearchMetaDatas);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's indexerSearchMetaDatas does not contain the given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements in Collection.
     *
     * @param indexerSearchMetaDatas the given elements that should not be in actual SearchResponse's indexerSearchMetaDatas.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's indexerSearchMetaDatas contains any given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData elements.
     */
    public S doesNotHaveIndexerSearchMetaDatas(java.util.Collection<? extends org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData> indexerSearchMetaDatas) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.IndexerSearchMetaData collection is not null.
        if (indexerSearchMetaDatas == null) {
            failWithMessage("Expecting indexerSearchMetaDatas parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerSearchMetaDatas(), indexerSearchMetaDatas.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse has no indexerSearchMetaDatas.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's indexerSearchMetaDatas is not empty.
     */
    public S hasNoIndexerSearchMetaDatas() {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have indexerSearchMetaDatas but had :\n  <%s>";

        // check
        if (actual.getIndexerSearchMetaDatas().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getIndexerSearchMetaDatas());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual SearchResponse's limit is equal to the given one.
     *
     * @param limit the given limit to compare the actual SearchResponse's limit to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's limit is not equal to the given one.
     */
    public S hasLimit(int limit) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting limit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualLimit = actual.getLimit();
        if (actualLimit != limit) {
            failWithMessage(assertjErrorMessage, actual, limit, actualLimit);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's notPickedIndexersWithReason is equal to the given one.
     *
     * @param notPickedIndexersWithReason the given notPickedIndexersWithReason to compare the actual SearchResponse's notPickedIndexersWithReason to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's notPickedIndexersWithReason is not equal to the given one.
     */
    public S hasNotPickedIndexersWithReason(java.util.Map notPickedIndexersWithReason) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting notPickedIndexersWithReason of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Map actualNotPickedIndexersWithReason = actual.getNotPickedIndexersWithReason();
        if (!Objects.areEqual(actualNotPickedIndexersWithReason, notPickedIndexersWithReason)) {
            failWithMessage(assertjErrorMessage, actual, notPickedIndexersWithReason, actualNotPickedIndexersWithReason);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's numberOfAcceptedResults is equal to the given one.
     *
     * @param numberOfAcceptedResults the given numberOfAcceptedResults to compare the actual SearchResponse's numberOfAcceptedResults to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's numberOfAcceptedResults is not equal to the given one.
     */
    public S hasNumberOfAcceptedResults(int numberOfAcceptedResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting numberOfAcceptedResults of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualNumberOfAcceptedResults = actual.getNumberOfAcceptedResults();
        if (actualNumberOfAcceptedResults != numberOfAcceptedResults) {
            failWithMessage(assertjErrorMessage, actual, numberOfAcceptedResults, actualNumberOfAcceptedResults);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's numberOfAvailableResults is equal to the given one.
     *
     * @param numberOfAvailableResults the given numberOfAvailableResults to compare the actual SearchResponse's numberOfAvailableResults to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's numberOfAvailableResults is not equal to the given one.
     */
    public S hasNumberOfAvailableResults(int numberOfAvailableResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting numberOfAvailableResults of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualNumberOfAvailableResults = actual.getNumberOfAvailableResults();
        if (actualNumberOfAvailableResults != numberOfAvailableResults) {
            failWithMessage(assertjErrorMessage, actual, numberOfAvailableResults, actualNumberOfAvailableResults);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's numberOfDuplicateResults is equal to the given one.
     *
     * @param numberOfDuplicateResults the given numberOfDuplicateResults to compare the actual SearchResponse's numberOfDuplicateResults to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's numberOfDuplicateResults is not equal to the given one.
     */
    public S hasNumberOfDuplicateResults(int numberOfDuplicateResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting numberOfDuplicateResults of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualNumberOfDuplicateResults = actual.getNumberOfDuplicateResults();
        if (actualNumberOfDuplicateResults != numberOfDuplicateResults) {
            failWithMessage(assertjErrorMessage, actual, numberOfDuplicateResults, actualNumberOfDuplicateResults);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's numberOfProcessedResults is equal to the given one.
     *
     * @param numberOfProcessedResults the given numberOfProcessedResults to compare the actual SearchResponse's numberOfProcessedResults to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's numberOfProcessedResults is not equal to the given one.
     */
    public S hasNumberOfProcessedResults(int numberOfProcessedResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting numberOfProcessedResults of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualNumberOfProcessedResults = actual.getNumberOfProcessedResults();
        if (actualNumberOfProcessedResults != numberOfProcessedResults) {
            failWithMessage(assertjErrorMessage, actual, numberOfProcessedResults, actualNumberOfProcessedResults);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's numberOfRejectedResults is equal to the given one.
     *
     * @param numberOfRejectedResults the given numberOfRejectedResults to compare the actual SearchResponse's numberOfRejectedResults to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's numberOfRejectedResults is not equal to the given one.
     */
    public S hasNumberOfRejectedResults(int numberOfRejectedResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting numberOfRejectedResults of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualNumberOfRejectedResults = actual.getNumberOfRejectedResults();
        if (actualNumberOfRejectedResults != numberOfRejectedResults) {
            failWithMessage(assertjErrorMessage, actual, numberOfRejectedResults, actualNumberOfRejectedResults);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's offset is equal to the given one.
     *
     * @param offset the given offset to compare the actual SearchResponse's offset to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's offset is not equal to the given one.
     */
    public S hasOffset(int offset) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting offset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualOffset = actual.getOffset();
        if (actualOffset != offset) {
            failWithMessage(assertjErrorMessage, actual, offset, actualOffset);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's rejectedReasonsMap is equal to the given one.
     *
     * @param rejectedReasonsMap the given rejectedReasonsMap to compare the actual SearchResponse's rejectedReasonsMap to.
     * @return this assertion object.
     * @throws AssertionError - if the actual SearchResponse's rejectedReasonsMap is not equal to the given one.
     */
    public S hasRejectedReasonsMap(java.util.Map rejectedReasonsMap) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting rejectedReasonsMap of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.util.Map actualRejectedReasonsMap = actual.getRejectedReasonsMap();
        if (!Objects.areEqual(actualRejectedReasonsMap, rejectedReasonsMap)) {
            failWithMessage(assertjErrorMessage, actual, rejectedReasonsMap, actualRejectedReasonsMap);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's searchResults contains the given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     *
     * @param searchResults the given elements that should be contained in actual SearchResponse's searchResults.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's searchResults does not contain all given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     */
    public S hasSearchResults(org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO... searchResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO varargs is not null.
        if (searchResults == null) {
            failWithMessage("Expecting searchResults parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchResults(), searchResults);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's searchResults contains the given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements in Collection.
     *
     * @param searchResults the given elements that should be contained in actual SearchResponse's searchResults.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's searchResults does not contain all given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     */
    public S hasSearchResults(java.util.Collection<? extends org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO> searchResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO collection is not null.
        if (searchResults == null) {
            failWithMessage("Expecting searchResults parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchResults(), searchResults.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's searchResults contains <b>only</b> the given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements and nothing else in whatever order.
     *
     * @param searchResults the given elements that should be contained in actual SearchResponse's searchResults.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's searchResults does not contain all given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     */
    public S hasOnlySearchResults(org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO... searchResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO varargs is not null.
        if (searchResults == null) {
            failWithMessage("Expecting searchResults parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchResults(), searchResults);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's searchResults contains <b>only</b> the given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements in Collection and nothing else in whatever order.
     *
     * @param searchResults the given elements that should be contained in actual SearchResponse's searchResults.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's searchResults does not contain all given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     */
    public S hasOnlySearchResults(java.util.Collection<? extends org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO> searchResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO collection is not null.
        if (searchResults == null) {
            failWithMessage("Expecting searchResults parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchResults(), searchResults.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's searchResults does not contain the given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     *
     * @param searchResults the given elements that should not be in actual SearchResponse's searchResults.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's searchResults contains any given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     */
    public S doesNotHaveSearchResults(org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO... searchResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO varargs is not null.
        if (searchResults == null) {
            failWithMessage("Expecting searchResults parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchResults(), searchResults);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse's searchResults does not contain the given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements in Collection.
     *
     * @param searchResults the given elements that should not be in actual SearchResponse's searchResults.
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's searchResults contains any given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO elements.
     */
    public S doesNotHaveSearchResults(java.util.Collection<? extends org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO> searchResults) {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.searching.dtoseventsenums.SearchResultWebTO collection is not null.
        if (searchResults == null) {
            failWithMessage("Expecting searchResults parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchResults(), searchResults.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual SearchResponse has no searchResults.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual SearchResponse's searchResults is not empty.
     */
    public S hasNoSearchResults() {
        // check that actual SearchResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have searchResults but had :\n  <%s>";

        // check
        if (actual.getSearchResults().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSearchResults());
        }

        // return the current assertion for method chaining
        return myself;
    }


}
