package org.nzbhydra.searching;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link IndexerSearchEntityTO} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractIndexerSearchEntityTOAssert<S extends AbstractIndexerSearchEntityTOAssert<S, A>, A extends IndexerSearchEntityTO> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractIndexerSearchEntityTOAssert}</code> to make assertions on actual IndexerSearchEntityTO.
     *
     * @param actual the IndexerSearchEntityTO we want to make assertions on.
     */
    protected AbstractIndexerSearchEntityTOAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual IndexerSearchEntityTO's id is equal to the given one.
     *
     * @param id the given id to compare the actual IndexerSearchEntityTO's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerSearchEntityTO's id is not equal to the given one.
     */
    public S hasId(int id) {
        // check that actual IndexerSearchEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualId = actual.getId();
        if (actualId != id) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerSearchEntityTO's indexerEntity is equal to the given one.
     *
     * @param indexerEntity the given indexerEntity to compare the actual IndexerSearchEntityTO's indexerEntity to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerSearchEntityTO's indexerEntity is not equal to the given one.
     */
    public S hasIndexerEntity(org.nzbhydra.indexers.IndexerEntityTO indexerEntity) {
        // check that actual IndexerSearchEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting indexerEntity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.indexers.IndexerEntityTO actualIndexerEntity = actual.getIndexerEntity();
        if (!Objects.areEqual(actualIndexerEntity, indexerEntity)) {
            failWithMessage(assertjErrorMessage, actual, indexerEntity, actualIndexerEntity);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerSearchEntityTO's resultsCount is equal to the given one.
     *
     * @param resultsCount the given resultsCount to compare the actual IndexerSearchEntityTO's resultsCount to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerSearchEntityTO's resultsCount is not equal to the given one.
     */
    public S hasResultsCount(Integer resultsCount) {
        // check that actual IndexerSearchEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting resultsCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualResultsCount = actual.getResultsCount();
        if (!Objects.areEqual(actualResultsCount, resultsCount)) {
            failWithMessage(assertjErrorMessage, actual, resultsCount, actualResultsCount);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerSearchEntityTO's searchEntity is equal to the given one.
     *
     * @param searchEntity the given searchEntity to compare the actual IndexerSearchEntityTO's searchEntity to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerSearchEntityTO's searchEntity is not equal to the given one.
     */
    public S hasSearchEntity(org.nzbhydra.searching.db.SearchEntityTO searchEntity) {
        // check that actual IndexerSearchEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting searchEntity of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.searching.db.SearchEntityTO actualSearchEntity = actual.getSearchEntity();
        if (!Objects.areEqual(actualSearchEntity, searchEntity)) {
            failWithMessage(assertjErrorMessage, actual, searchEntity, actualSearchEntity);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerSearchEntityTO's successful is equal to the given one.
     *
     * @param successful the given successful to compare the actual IndexerSearchEntityTO's successful to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerSearchEntityTO's successful is not equal to the given one.
     */
    public S hasSuccessful(Boolean successful) {
        // check that actual IndexerSearchEntityTO we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting successful of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualSuccessful = actual.getSuccessful();
        if (!Objects.areEqual(actualSuccessful, successful)) {
            failWithMessage(assertjErrorMessage, actual, successful, actualSuccessful);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
