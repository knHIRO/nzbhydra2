package org.nzbhydra.historystats.stats;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link IndexerDownloadShare} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractIndexerDownloadShareAssert<S extends AbstractIndexerDownloadShareAssert<S, A>, A extends IndexerDownloadShare> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractIndexerDownloadShareAssert}</code> to make assertions on actual IndexerDownloadShare.
     *
     * @param actual the IndexerDownloadShare we want to make assertions on.
     */
    protected AbstractIndexerDownloadShareAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual IndexerDownloadShare's indexerName is equal to the given one.
     *
     * @param indexerName the given indexerName to compare the actual IndexerDownloadShare's indexerName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerDownloadShare's indexerName is not equal to the given one.
     */
    public S hasIndexerName(String indexerName) {
        // check that actual IndexerDownloadShare we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting indexerName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualIndexerName = actual.getIndexerName();
        if (!Objects.areEqual(actualIndexerName, indexerName)) {
            failWithMessage(assertjErrorMessage, actual, indexerName, actualIndexerName);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerDownloadShare's share is equal to the given one.
     *
     * @param share the given share to compare the actual IndexerDownloadShare's share to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerDownloadShare's share is not equal to the given one.
     */
    public S hasShare(float share) {
        // check that actual IndexerDownloadShare we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting share of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check value for share
        float actualShare = actual.getShare();
        if (actualShare != share) {
            failWithMessage(assertjErrorMessage, actual, share, actualShare);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerDownloadShare's share is close to the given value by less than the given offset.
     * <p>
     * If difference is equal to the offset value, assertion is considered successful.
     *
     * @param share         the value to compare the actual IndexerDownloadShare's share to.
     * @param assertjOffset the given offset.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerDownloadShare's share is not close enough to the given value.
     */
    public S hasShareCloseTo(float share, float assertjOffset) {
        // check that actual IndexerDownloadShare we want to make assertions on is not null.
        isNotNull();

        float actualShare = actual.getShare();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = String.format("\nExpecting share:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
            actualShare, share, assertjOffset, Math.abs(share - actualShare));

        // check
        Assertions.assertThat(actualShare).overridingErrorMessage(assertjErrorMessage).isCloseTo(share, Assertions.within(assertjOffset));

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerDownloadShare's total is equal to the given one.
     *
     * @param total the given total to compare the actual IndexerDownloadShare's total to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerDownloadShare's total is not equal to the given one.
     */
    public S hasTotal(long total) {
        // check that actual IndexerDownloadShare we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting total of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualTotal = actual.getTotal();
        if (actualTotal != total) {
            failWithMessage(assertjErrorMessage, actual, total, actualTotal);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
