package org.nzbhydra.historystats.stats;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link DownloadPerAge} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractDownloadPerAgeAssert<S extends AbstractDownloadPerAgeAssert<S, A>, A extends DownloadPerAge> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractDownloadPerAgeAssert}</code> to make assertions on actual DownloadPerAge.
     *
     * @param actual the DownloadPerAge we want to make assertions on.
     */
    protected AbstractDownloadPerAgeAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual DownloadPerAge's age is equal to the given one.
     *
     * @param age the given age to compare the actual DownloadPerAge's age to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloadPerAge's age is not equal to the given one.
     */
    public S hasAge(Integer age) {
        // check that actual DownloadPerAge we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting age of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualAge = actual.getAge();
        if (!Objects.areEqual(actualAge, age)) {
            failWithMessage(assertjErrorMessage, actual, age, actualAge);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual DownloadPerAge's count is equal to the given one.
     *
     * @param count the given count to compare the actual DownloadPerAge's count to.
     * @return this assertion object.
     * @throws AssertionError - if the actual DownloadPerAge's count is not equal to the given one.
     */
    public S hasCount(Integer count) {
        // check that actual DownloadPerAge we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting count of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualCount = actual.getCount();
        if (!Objects.areEqual(actualCount, count)) {
            failWithMessage(assertjErrorMessage, actual, count, actualCount);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
