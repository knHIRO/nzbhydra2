package org.nzbhydra.historystats;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link FilterDefinition} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractFilterDefinitionAssert<S extends AbstractFilterDefinitionAssert<S, A>, A extends FilterDefinition> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractFilterDefinitionAssert}</code> to make assertions on actual FilterDefinition.
     *
     * @param actual the FilterDefinition we want to make assertions on.
     */
    protected AbstractFilterDefinitionAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual FilterDefinition is boolean.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual FilterDefinition is not boolean.
     */
    public S isBoolean() {
        // check that actual FilterDefinition we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isBoolean()) {
            failWithMessage("\nExpecting that actual FilterDefinition is boolean but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual FilterDefinition is not boolean.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual FilterDefinition is boolean.
     */
    public S isNotBoolean() {
        // check that actual FilterDefinition we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isBoolean()) {
            failWithMessage("\nExpecting that actual FilterDefinition is not boolean but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual FilterDefinition's filterType is equal to the given one.
     *
     * @param filterType the given filterType to compare the actual FilterDefinition's filterType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FilterDefinition's filterType is not equal to the given one.
     */
    public S hasFilterType(Object filterType) {
        // check that actual FilterDefinition we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting filterType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Object actualFilterType = actual.getFilterType();
        if (!Objects.areEqual(actualFilterType, filterType)) {
            failWithMessage(assertjErrorMessage, actual, filterType, actualFilterType);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual FilterDefinition's filterValue is equal to the given one.
     *
     * @param filterValue the given filterValue to compare the actual FilterDefinition's filterValue to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FilterDefinition's filterValue is not equal to the given one.
     */
    public S hasFilterValue(Object filterValue) {
        // check that actual FilterDefinition we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting filterValue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Object actualFilterValue = actual.getFilterValue();
        if (!Objects.areEqual(actualFilterValue, filterValue)) {
            failWithMessage(assertjErrorMessage, actual, filterValue, actualFilterValue);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
