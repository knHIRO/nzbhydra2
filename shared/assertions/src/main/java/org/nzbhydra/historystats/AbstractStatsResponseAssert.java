package org.nzbhydra.historystats;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link StatsResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractStatsResponseAssert<S extends AbstractStatsResponseAssert<S, A>, A extends StatsResponse> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractStatsResponseAssert}</code> to make assertions on actual StatsResponse.
     *
     * @param actual the StatsResponse we want to make assertions on.
     */
    protected AbstractStatsResponseAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual StatsResponse's after is equal to the given one.
     *
     * @param after the given after to compare the actual StatsResponse's after to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsResponse's after is not equal to the given one.
     */
    public S hasAfter(java.time.Instant after) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting after of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.Instant actualAfter = actual.getAfter();
        if (!Objects.areEqual(actualAfter, after)) {
            failWithMessage(assertjErrorMessage, actual, after, actualAfter);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's avgResponseTimes contains the given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     *
     * @param avgResponseTimes the given elements that should be contained in actual StatsResponse's avgResponseTimes.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's avgResponseTimes does not contain all given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     */
    public S hasAvgResponseTimes(org.nzbhydra.historystats.stats.AverageResponseTime... avgResponseTimes) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.AverageResponseTime varargs is not null.
        if (avgResponseTimes == null) {
            failWithMessage("Expecting avgResponseTimes parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAvgResponseTimes(), avgResponseTimes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's avgResponseTimes contains the given org.nzbhydra.historystats.stats.AverageResponseTime elements in Collection.
     *
     * @param avgResponseTimes the given elements that should be contained in actual StatsResponse's avgResponseTimes.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's avgResponseTimes does not contain all given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     */
    public S hasAvgResponseTimes(java.util.Collection<? extends org.nzbhydra.historystats.stats.AverageResponseTime> avgResponseTimes) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.AverageResponseTime collection is not null.
        if (avgResponseTimes == null) {
            failWithMessage("Expecting avgResponseTimes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAvgResponseTimes(), avgResponseTimes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's avgResponseTimes contains <b>only</b> the given org.nzbhydra.historystats.stats.AverageResponseTime elements and nothing else in whatever order.
     *
     * @param avgResponseTimes the given elements that should be contained in actual StatsResponse's avgResponseTimes.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's avgResponseTimes does not contain all given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     */
    public S hasOnlyAvgResponseTimes(org.nzbhydra.historystats.stats.AverageResponseTime... avgResponseTimes) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.AverageResponseTime varargs is not null.
        if (avgResponseTimes == null) {
            failWithMessage("Expecting avgResponseTimes parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAvgResponseTimes(), avgResponseTimes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's avgResponseTimes contains <b>only</b> the given org.nzbhydra.historystats.stats.AverageResponseTime elements in Collection and nothing else in whatever order.
     *
     * @param avgResponseTimes the given elements that should be contained in actual StatsResponse's avgResponseTimes.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's avgResponseTimes does not contain all given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     */
    public S hasOnlyAvgResponseTimes(java.util.Collection<? extends org.nzbhydra.historystats.stats.AverageResponseTime> avgResponseTimes) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.AverageResponseTime collection is not null.
        if (avgResponseTimes == null) {
            failWithMessage("Expecting avgResponseTimes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAvgResponseTimes(), avgResponseTimes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's avgResponseTimes does not contain the given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     *
     * @param avgResponseTimes the given elements that should not be in actual StatsResponse's avgResponseTimes.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's avgResponseTimes contains any given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     */
    public S doesNotHaveAvgResponseTimes(org.nzbhydra.historystats.stats.AverageResponseTime... avgResponseTimes) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.AverageResponseTime varargs is not null.
        if (avgResponseTimes == null) {
            failWithMessage("Expecting avgResponseTimes parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAvgResponseTimes(), avgResponseTimes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's avgResponseTimes does not contain the given org.nzbhydra.historystats.stats.AverageResponseTime elements in Collection.
     *
     * @param avgResponseTimes the given elements that should not be in actual StatsResponse's avgResponseTimes.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's avgResponseTimes contains any given org.nzbhydra.historystats.stats.AverageResponseTime elements.
     */
    public S doesNotHaveAvgResponseTimes(java.util.Collection<? extends org.nzbhydra.historystats.stats.AverageResponseTime> avgResponseTimes) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.AverageResponseTime collection is not null.
        if (avgResponseTimes == null) {
            failWithMessage("Expecting avgResponseTimes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAvgResponseTimes(), avgResponseTimes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no avgResponseTimes.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's avgResponseTimes is not empty.
     */
    public S hasNoAvgResponseTimes() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have avgResponseTimes but had :\n  <%s>";

        // check
        if (actual.getAvgResponseTimes().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getAvgResponseTimes());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's before is equal to the given one.
     *
     * @param before the given before to compare the actual StatsResponse's before to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsResponse's before is not equal to the given one.
     */
    public S hasBefore(java.time.Instant before) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting before of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.Instant actualBefore = actual.getBefore();
        if (!Objects.areEqual(actualBefore, before)) {
            failWithMessage(assertjErrorMessage, actual, before, actualBefore);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerIp contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param downloadSharesPerIp the given elements that should be contained in actual StatsResponse's downloadSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasDownloadSharesPerIp(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... downloadSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (downloadSharesPerIp == null) {
            failWithMessage("Expecting downloadSharesPerIp parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadSharesPerIp(), downloadSharesPerIp);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerIp contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param downloadSharesPerIp the given elements that should be contained in actual StatsResponse's downloadSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasDownloadSharesPerIp(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> downloadSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (downloadSharesPerIp == null) {
            failWithMessage("Expecting downloadSharesPerIp parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadSharesPerIp(), downloadSharesPerIp.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerIp contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements and nothing else in whatever order.
     *
     * @param downloadSharesPerIp the given elements that should be contained in actual StatsResponse's downloadSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlyDownloadSharesPerIp(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... downloadSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (downloadSharesPerIp == null) {
            failWithMessage("Expecting downloadSharesPerIp parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadSharesPerIp(), downloadSharesPerIp);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerIp contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection and nothing else in whatever order.
     *
     * @param downloadSharesPerIp the given elements that should be contained in actual StatsResponse's downloadSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlyDownloadSharesPerIp(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> downloadSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (downloadSharesPerIp == null) {
            failWithMessage("Expecting downloadSharesPerIp parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadSharesPerIp(), downloadSharesPerIp.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerIp does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param downloadSharesPerIp the given elements that should not be in actual StatsResponse's downloadSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerIp contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveDownloadSharesPerIp(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... downloadSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (downloadSharesPerIp == null) {
            failWithMessage("Expecting downloadSharesPerIp parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadSharesPerIp(), downloadSharesPerIp);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerIp does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param downloadSharesPerIp the given elements that should not be in actual StatsResponse's downloadSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerIp contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveDownloadSharesPerIp(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> downloadSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (downloadSharesPerIp == null) {
            failWithMessage("Expecting downloadSharesPerIp parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadSharesPerIp(), downloadSharesPerIp.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no downloadSharesPerIp.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerIp is not empty.
     */
    public S hasNoDownloadSharesPerIp() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have downloadSharesPerIp but had :\n  <%s>";

        // check
        if (actual.getDownloadSharesPerIp().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getDownloadSharesPerIp());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's downloadSharesPerUser contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param downloadSharesPerUser the given elements that should be contained in actual StatsResponse's downloadSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasDownloadSharesPerUser(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... downloadSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (downloadSharesPerUser == null) {
            failWithMessage("Expecting downloadSharesPerUser parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadSharesPerUser(), downloadSharesPerUser);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerUser contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param downloadSharesPerUser the given elements that should be contained in actual StatsResponse's downloadSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasDownloadSharesPerUser(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> downloadSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (downloadSharesPerUser == null) {
            failWithMessage("Expecting downloadSharesPerUser parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadSharesPerUser(), downloadSharesPerUser.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerUser contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements and nothing else in whatever order.
     *
     * @param downloadSharesPerUser the given elements that should be contained in actual StatsResponse's downloadSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlyDownloadSharesPerUser(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... downloadSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (downloadSharesPerUser == null) {
            failWithMessage("Expecting downloadSharesPerUser parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadSharesPerUser(), downloadSharesPerUser);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerUser contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection and nothing else in whatever order.
     *
     * @param downloadSharesPerUser the given elements that should be contained in actual StatsResponse's downloadSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlyDownloadSharesPerUser(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> downloadSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (downloadSharesPerUser == null) {
            failWithMessage("Expecting downloadSharesPerUser parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadSharesPerUser(), downloadSharesPerUser.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerUser does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param downloadSharesPerUser the given elements that should not be in actual StatsResponse's downloadSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerUser contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveDownloadSharesPerUser(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... downloadSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (downloadSharesPerUser == null) {
            failWithMessage("Expecting downloadSharesPerUser parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadSharesPerUser(), downloadSharesPerUser);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadSharesPerUser does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param downloadSharesPerUser the given elements that should not be in actual StatsResponse's downloadSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerUser contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveDownloadSharesPerUser(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> downloadSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (downloadSharesPerUser == null) {
            failWithMessage("Expecting downloadSharesPerUser parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadSharesPerUser(), downloadSharesPerUser.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no downloadSharesPerUser.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadSharesPerUser is not empty.
     */
    public S hasNoDownloadSharesPerUser() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have downloadSharesPerUser but had :\n  <%s>";

        // check
        if (actual.getDownloadSharesPerUser().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getDownloadSharesPerUser());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's downloadsPerAgeStats is equal to the given one.
     *
     * @param downloadsPerAgeStats the given downloadsPerAgeStats to compare the actual StatsResponse's downloadsPerAgeStats to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsResponse's downloadsPerAgeStats is not equal to the given one.
     */
    public S hasDownloadsPerAgeStats(org.nzbhydra.historystats.stats.DownloadPerAgeStats downloadsPerAgeStats) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting downloadsPerAgeStats of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.historystats.stats.DownloadPerAgeStats actualDownloadsPerAgeStats = actual.getDownloadsPerAgeStats();
        if (!Objects.areEqual(actualDownloadsPerAgeStats, downloadsPerAgeStats)) {
            failWithMessage(assertjErrorMessage, actual, downloadsPerAgeStats, actualDownloadsPerAgeStats);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerDayOfWeek contains the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     *
     * @param downloadsPerDayOfWeek the given elements that should be contained in actual StatsResponse's downloadsPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasDownloadsPerDayOfWeek(org.nzbhydra.historystats.stats.CountPerDayOfWeek... downloadsPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek varargs is not null.
        if (downloadsPerDayOfWeek == null) {
            failWithMessage("Expecting downloadsPerDayOfWeek parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadsPerDayOfWeek(), downloadsPerDayOfWeek);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerDayOfWeek contains the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements in Collection.
     *
     * @param downloadsPerDayOfWeek the given elements that should be contained in actual StatsResponse's downloadsPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasDownloadsPerDayOfWeek(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerDayOfWeek> downloadsPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek collection is not null.
        if (downloadsPerDayOfWeek == null) {
            failWithMessage("Expecting downloadsPerDayOfWeek parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadsPerDayOfWeek(), downloadsPerDayOfWeek.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerDayOfWeek contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements and nothing else in whatever order.
     *
     * @param downloadsPerDayOfWeek the given elements that should be contained in actual StatsResponse's downloadsPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasOnlyDownloadsPerDayOfWeek(org.nzbhydra.historystats.stats.CountPerDayOfWeek... downloadsPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek varargs is not null.
        if (downloadsPerDayOfWeek == null) {
            failWithMessage("Expecting downloadsPerDayOfWeek parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadsPerDayOfWeek(), downloadsPerDayOfWeek);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerDayOfWeek contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements in Collection and nothing else in whatever order.
     *
     * @param downloadsPerDayOfWeek the given elements that should be contained in actual StatsResponse's downloadsPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasOnlyDownloadsPerDayOfWeek(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerDayOfWeek> downloadsPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek collection is not null.
        if (downloadsPerDayOfWeek == null) {
            failWithMessage("Expecting downloadsPerDayOfWeek parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadsPerDayOfWeek(), downloadsPerDayOfWeek.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerDayOfWeek does not contain the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     *
     * @param downloadsPerDayOfWeek the given elements that should not be in actual StatsResponse's downloadsPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerDayOfWeek contains any given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S doesNotHaveDownloadsPerDayOfWeek(org.nzbhydra.historystats.stats.CountPerDayOfWeek... downloadsPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek varargs is not null.
        if (downloadsPerDayOfWeek == null) {
            failWithMessage("Expecting downloadsPerDayOfWeek parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadsPerDayOfWeek(), downloadsPerDayOfWeek);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerDayOfWeek does not contain the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements in Collection.
     *
     * @param downloadsPerDayOfWeek the given elements that should not be in actual StatsResponse's downloadsPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerDayOfWeek contains any given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S doesNotHaveDownloadsPerDayOfWeek(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerDayOfWeek> downloadsPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek collection is not null.
        if (downloadsPerDayOfWeek == null) {
            failWithMessage("Expecting downloadsPerDayOfWeek parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadsPerDayOfWeek(), downloadsPerDayOfWeek.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no downloadsPerDayOfWeek.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerDayOfWeek is not empty.
     */
    public S hasNoDownloadsPerDayOfWeek() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have downloadsPerDayOfWeek but had :\n  <%s>";

        // check
        if (actual.getDownloadsPerDayOfWeek().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getDownloadsPerDayOfWeek());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's downloadsPerHourOfDay contains the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     *
     * @param downloadsPerHourOfDay the given elements that should be contained in actual StatsResponse's downloadsPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasDownloadsPerHourOfDay(org.nzbhydra.historystats.stats.CountPerHourOfDay... downloadsPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay varargs is not null.
        if (downloadsPerHourOfDay == null) {
            failWithMessage("Expecting downloadsPerHourOfDay parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadsPerHourOfDay(), downloadsPerHourOfDay);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerHourOfDay contains the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements in Collection.
     *
     * @param downloadsPerHourOfDay the given elements that should be contained in actual StatsResponse's downloadsPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasDownloadsPerHourOfDay(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerHourOfDay> downloadsPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay collection is not null.
        if (downloadsPerHourOfDay == null) {
            failWithMessage("Expecting downloadsPerHourOfDay parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getDownloadsPerHourOfDay(), downloadsPerHourOfDay.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerHourOfDay contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements and nothing else in whatever order.
     *
     * @param downloadsPerHourOfDay the given elements that should be contained in actual StatsResponse's downloadsPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasOnlyDownloadsPerHourOfDay(org.nzbhydra.historystats.stats.CountPerHourOfDay... downloadsPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay varargs is not null.
        if (downloadsPerHourOfDay == null) {
            failWithMessage("Expecting downloadsPerHourOfDay parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadsPerHourOfDay(), downloadsPerHourOfDay);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerHourOfDay contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements in Collection and nothing else in whatever order.
     *
     * @param downloadsPerHourOfDay the given elements that should be contained in actual StatsResponse's downloadsPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasOnlyDownloadsPerHourOfDay(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerHourOfDay> downloadsPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay collection is not null.
        if (downloadsPerHourOfDay == null) {
            failWithMessage("Expecting downloadsPerHourOfDay parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getDownloadsPerHourOfDay(), downloadsPerHourOfDay.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerHourOfDay does not contain the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     *
     * @param downloadsPerHourOfDay the given elements that should not be in actual StatsResponse's downloadsPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerHourOfDay contains any given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S doesNotHaveDownloadsPerHourOfDay(org.nzbhydra.historystats.stats.CountPerHourOfDay... downloadsPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay varargs is not null.
        if (downloadsPerHourOfDay == null) {
            failWithMessage("Expecting downloadsPerHourOfDay parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadsPerHourOfDay(), downloadsPerHourOfDay);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's downloadsPerHourOfDay does not contain the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements in Collection.
     *
     * @param downloadsPerHourOfDay the given elements that should not be in actual StatsResponse's downloadsPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerHourOfDay contains any given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S doesNotHaveDownloadsPerHourOfDay(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerHourOfDay> downloadsPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay collection is not null.
        if (downloadsPerHourOfDay == null) {
            failWithMessage("Expecting downloadsPerHourOfDay parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getDownloadsPerHourOfDay(), downloadsPerHourOfDay.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no downloadsPerHourOfDay.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's downloadsPerHourOfDay is not empty.
     */
    public S hasNoDownloadsPerHourOfDay() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have downloadsPerHourOfDay but had :\n  <%s>";

        // check
        if (actual.getDownloadsPerHourOfDay().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getDownloadsPerHourOfDay());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's indexerApiAccessStats contains the given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     *
     * @param indexerApiAccessStats the given elements that should be contained in actual StatsResponse's indexerApiAccessStats.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerApiAccessStats does not contain all given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     */
    public S hasIndexerApiAccessStats(org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry... indexerApiAccessStats) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry varargs is not null.
        if (indexerApiAccessStats == null) {
            failWithMessage("Expecting indexerApiAccessStats parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerApiAccessStats(), indexerApiAccessStats);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerApiAccessStats contains the given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements in Collection.
     *
     * @param indexerApiAccessStats the given elements that should be contained in actual StatsResponse's indexerApiAccessStats.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerApiAccessStats does not contain all given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     */
    public S hasIndexerApiAccessStats(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry> indexerApiAccessStats) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry collection is not null.
        if (indexerApiAccessStats == null) {
            failWithMessage("Expecting indexerApiAccessStats parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerApiAccessStats(), indexerApiAccessStats.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerApiAccessStats contains <b>only</b> the given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements and nothing else in whatever order.
     *
     * @param indexerApiAccessStats the given elements that should be contained in actual StatsResponse's indexerApiAccessStats.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerApiAccessStats does not contain all given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     */
    public S hasOnlyIndexerApiAccessStats(org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry... indexerApiAccessStats) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry varargs is not null.
        if (indexerApiAccessStats == null) {
            failWithMessage("Expecting indexerApiAccessStats parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerApiAccessStats(), indexerApiAccessStats);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerApiAccessStats contains <b>only</b> the given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements in Collection and nothing else in whatever order.
     *
     * @param indexerApiAccessStats the given elements that should be contained in actual StatsResponse's indexerApiAccessStats.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerApiAccessStats does not contain all given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     */
    public S hasOnlyIndexerApiAccessStats(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry> indexerApiAccessStats) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry collection is not null.
        if (indexerApiAccessStats == null) {
            failWithMessage("Expecting indexerApiAccessStats parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerApiAccessStats(), indexerApiAccessStats.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerApiAccessStats does not contain the given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     *
     * @param indexerApiAccessStats the given elements that should not be in actual StatsResponse's indexerApiAccessStats.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerApiAccessStats contains any given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     */
    public S doesNotHaveIndexerApiAccessStats(org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry... indexerApiAccessStats) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry varargs is not null.
        if (indexerApiAccessStats == null) {
            failWithMessage("Expecting indexerApiAccessStats parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerApiAccessStats(), indexerApiAccessStats);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerApiAccessStats does not contain the given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements in Collection.
     *
     * @param indexerApiAccessStats the given elements that should not be in actual StatsResponse's indexerApiAccessStats.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerApiAccessStats contains any given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry elements.
     */
    public S doesNotHaveIndexerApiAccessStats(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry> indexerApiAccessStats) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerApiAccessStatsEntry collection is not null.
        if (indexerApiAccessStats == null) {
            failWithMessage("Expecting indexerApiAccessStats parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerApiAccessStats(), indexerApiAccessStats.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no indexerApiAccessStats.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerApiAccessStats is not empty.
     */
    public S hasNoIndexerApiAccessStats() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have indexerApiAccessStats but had :\n  <%s>";

        // check
        if (actual.getIndexerApiAccessStats().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getIndexerApiAccessStats());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's indexerDownloadShares contains the given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     *
     * @param indexerDownloadShares the given elements that should be contained in actual StatsResponse's indexerDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerDownloadShares does not contain all given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     */
    public S hasIndexerDownloadShares(org.nzbhydra.historystats.stats.IndexerDownloadShare... indexerDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerDownloadShare varargs is not null.
        if (indexerDownloadShares == null) {
            failWithMessage("Expecting indexerDownloadShares parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerDownloadShares(), indexerDownloadShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerDownloadShares contains the given org.nzbhydra.historystats.stats.IndexerDownloadShare elements in Collection.
     *
     * @param indexerDownloadShares the given elements that should be contained in actual StatsResponse's indexerDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerDownloadShares does not contain all given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     */
    public S hasIndexerDownloadShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerDownloadShare> indexerDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerDownloadShare collection is not null.
        if (indexerDownloadShares == null) {
            failWithMessage("Expecting indexerDownloadShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerDownloadShares(), indexerDownloadShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerDownloadShares contains <b>only</b> the given org.nzbhydra.historystats.stats.IndexerDownloadShare elements and nothing else in whatever order.
     *
     * @param indexerDownloadShares the given elements that should be contained in actual StatsResponse's indexerDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerDownloadShares does not contain all given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     */
    public S hasOnlyIndexerDownloadShares(org.nzbhydra.historystats.stats.IndexerDownloadShare... indexerDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerDownloadShare varargs is not null.
        if (indexerDownloadShares == null) {
            failWithMessage("Expecting indexerDownloadShares parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerDownloadShares(), indexerDownloadShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerDownloadShares contains <b>only</b> the given org.nzbhydra.historystats.stats.IndexerDownloadShare elements in Collection and nothing else in whatever order.
     *
     * @param indexerDownloadShares the given elements that should be contained in actual StatsResponse's indexerDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerDownloadShares does not contain all given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     */
    public S hasOnlyIndexerDownloadShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerDownloadShare> indexerDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerDownloadShare collection is not null.
        if (indexerDownloadShares == null) {
            failWithMessage("Expecting indexerDownloadShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerDownloadShares(), indexerDownloadShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerDownloadShares does not contain the given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     *
     * @param indexerDownloadShares the given elements that should not be in actual StatsResponse's indexerDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerDownloadShares contains any given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     */
    public S doesNotHaveIndexerDownloadShares(org.nzbhydra.historystats.stats.IndexerDownloadShare... indexerDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerDownloadShare varargs is not null.
        if (indexerDownloadShares == null) {
            failWithMessage("Expecting indexerDownloadShares parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerDownloadShares(), indexerDownloadShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerDownloadShares does not contain the given org.nzbhydra.historystats.stats.IndexerDownloadShare elements in Collection.
     *
     * @param indexerDownloadShares the given elements that should not be in actual StatsResponse's indexerDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerDownloadShares contains any given org.nzbhydra.historystats.stats.IndexerDownloadShare elements.
     */
    public S doesNotHaveIndexerDownloadShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerDownloadShare> indexerDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerDownloadShare collection is not null.
        if (indexerDownloadShares == null) {
            failWithMessage("Expecting indexerDownloadShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerDownloadShares(), indexerDownloadShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no indexerDownloadShares.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerDownloadShares is not empty.
     */
    public S hasNoIndexerDownloadShares() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have indexerDownloadShares but had :\n  <%s>";

        // check
        if (actual.getIndexerDownloadShares().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getIndexerDownloadShares());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's indexerScores contains the given org.nzbhydra.historystats.stats.IndexerScore elements.
     *
     * @param indexerScores the given elements that should be contained in actual StatsResponse's indexerScores.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerScores does not contain all given org.nzbhydra.historystats.stats.IndexerScore elements.
     */
    public S hasIndexerScores(org.nzbhydra.historystats.stats.IndexerScore... indexerScores) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerScore varargs is not null.
        if (indexerScores == null) {
            failWithMessage("Expecting indexerScores parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerScores(), indexerScores);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerScores contains the given org.nzbhydra.historystats.stats.IndexerScore elements in Collection.
     *
     * @param indexerScores the given elements that should be contained in actual StatsResponse's indexerScores.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerScores does not contain all given org.nzbhydra.historystats.stats.IndexerScore elements.
     */
    public S hasIndexerScores(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerScore> indexerScores) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerScore collection is not null.
        if (indexerScores == null) {
            failWithMessage("Expecting indexerScores parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexerScores(), indexerScores.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerScores contains <b>only</b> the given org.nzbhydra.historystats.stats.IndexerScore elements and nothing else in whatever order.
     *
     * @param indexerScores the given elements that should be contained in actual StatsResponse's indexerScores.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerScores does not contain all given org.nzbhydra.historystats.stats.IndexerScore elements.
     */
    public S hasOnlyIndexerScores(org.nzbhydra.historystats.stats.IndexerScore... indexerScores) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerScore varargs is not null.
        if (indexerScores == null) {
            failWithMessage("Expecting indexerScores parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerScores(), indexerScores);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerScores contains <b>only</b> the given org.nzbhydra.historystats.stats.IndexerScore elements in Collection and nothing else in whatever order.
     *
     * @param indexerScores the given elements that should be contained in actual StatsResponse's indexerScores.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerScores does not contain all given org.nzbhydra.historystats.stats.IndexerScore elements.
     */
    public S hasOnlyIndexerScores(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerScore> indexerScores) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerScore collection is not null.
        if (indexerScores == null) {
            failWithMessage("Expecting indexerScores parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexerScores(), indexerScores.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerScores does not contain the given org.nzbhydra.historystats.stats.IndexerScore elements.
     *
     * @param indexerScores the given elements that should not be in actual StatsResponse's indexerScores.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerScores contains any given org.nzbhydra.historystats.stats.IndexerScore elements.
     */
    public S doesNotHaveIndexerScores(org.nzbhydra.historystats.stats.IndexerScore... indexerScores) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerScore varargs is not null.
        if (indexerScores == null) {
            failWithMessage("Expecting indexerScores parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerScores(), indexerScores);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's indexerScores does not contain the given org.nzbhydra.historystats.stats.IndexerScore elements in Collection.
     *
     * @param indexerScores the given elements that should not be in actual StatsResponse's indexerScores.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerScores contains any given org.nzbhydra.historystats.stats.IndexerScore elements.
     */
    public S doesNotHaveIndexerScores(java.util.Collection<? extends org.nzbhydra.historystats.stats.IndexerScore> indexerScores) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.IndexerScore collection is not null.
        if (indexerScores == null) {
            failWithMessage("Expecting indexerScores parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexerScores(), indexerScores.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no indexerScores.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's indexerScores is not empty.
     */
    public S hasNoIndexerScores() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have indexerScores but had :\n  <%s>";

        // check
        if (actual.getIndexerScores().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getIndexerScores());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's numberOfConfiguredIndexers is equal to the given one.
     *
     * @param numberOfConfiguredIndexers the given numberOfConfiguredIndexers to compare the actual StatsResponse's numberOfConfiguredIndexers to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsResponse's numberOfConfiguredIndexers is not equal to the given one.
     */
    public S hasNumberOfConfiguredIndexers(int numberOfConfiguredIndexers) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting numberOfConfiguredIndexers of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualNumberOfConfiguredIndexers = actual.getNumberOfConfiguredIndexers();
        if (actualNumberOfConfiguredIndexers != numberOfConfiguredIndexers) {
            failWithMessage(assertjErrorMessage, actual, numberOfConfiguredIndexers, actualNumberOfConfiguredIndexers);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's numberOfEnabledIndexers is equal to the given one.
     *
     * @param numberOfEnabledIndexers the given numberOfEnabledIndexers to compare the actual StatsResponse's numberOfEnabledIndexers to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsResponse's numberOfEnabledIndexers is not equal to the given one.
     */
    public S hasNumberOfEnabledIndexers(int numberOfEnabledIndexers) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting numberOfEnabledIndexers of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualNumberOfEnabledIndexers = actual.getNumberOfEnabledIndexers();
        if (actualNumberOfEnabledIndexers != numberOfEnabledIndexers) {
            failWithMessage(assertjErrorMessage, actual, numberOfEnabledIndexers, actualNumberOfEnabledIndexers);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerIp contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param searchSharesPerIp the given elements that should be contained in actual StatsResponse's searchSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasSearchSharesPerIp(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... searchSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (searchSharesPerIp == null) {
            failWithMessage("Expecting searchSharesPerIp parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchSharesPerIp(), searchSharesPerIp);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerIp contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param searchSharesPerIp the given elements that should be contained in actual StatsResponse's searchSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasSearchSharesPerIp(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> searchSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (searchSharesPerIp == null) {
            failWithMessage("Expecting searchSharesPerIp parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchSharesPerIp(), searchSharesPerIp.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerIp contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements and nothing else in whatever order.
     *
     * @param searchSharesPerIp the given elements that should be contained in actual StatsResponse's searchSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlySearchSharesPerIp(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... searchSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (searchSharesPerIp == null) {
            failWithMessage("Expecting searchSharesPerIp parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchSharesPerIp(), searchSharesPerIp);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerIp contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection and nothing else in whatever order.
     *
     * @param searchSharesPerIp the given elements that should be contained in actual StatsResponse's searchSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerIp does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlySearchSharesPerIp(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> searchSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (searchSharesPerIp == null) {
            failWithMessage("Expecting searchSharesPerIp parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchSharesPerIp(), searchSharesPerIp.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerIp does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param searchSharesPerIp the given elements that should not be in actual StatsResponse's searchSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerIp contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveSearchSharesPerIp(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... searchSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (searchSharesPerIp == null) {
            failWithMessage("Expecting searchSharesPerIp parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchSharesPerIp(), searchSharesPerIp);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerIp does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param searchSharesPerIp the given elements that should not be in actual StatsResponse's searchSharesPerIp.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerIp contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveSearchSharesPerIp(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> searchSharesPerIp) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (searchSharesPerIp == null) {
            failWithMessage("Expecting searchSharesPerIp parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchSharesPerIp(), searchSharesPerIp.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no searchSharesPerIp.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerIp is not empty.
     */
    public S hasNoSearchSharesPerIp() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have searchSharesPerIp but had :\n  <%s>";

        // check
        if (actual.getSearchSharesPerIp().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSearchSharesPerIp());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's searchSharesPerUser contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param searchSharesPerUser the given elements that should be contained in actual StatsResponse's searchSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasSearchSharesPerUser(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... searchSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (searchSharesPerUser == null) {
            failWithMessage("Expecting searchSharesPerUser parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchSharesPerUser(), searchSharesPerUser);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerUser contains the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param searchSharesPerUser the given elements that should be contained in actual StatsResponse's searchSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasSearchSharesPerUser(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> searchSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (searchSharesPerUser == null) {
            failWithMessage("Expecting searchSharesPerUser parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchSharesPerUser(), searchSharesPerUser.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerUser contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements and nothing else in whatever order.
     *
     * @param searchSharesPerUser the given elements that should be contained in actual StatsResponse's searchSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlySearchSharesPerUser(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... searchSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (searchSharesPerUser == null) {
            failWithMessage("Expecting searchSharesPerUser parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchSharesPerUser(), searchSharesPerUser);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerUser contains <b>only</b> the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection and nothing else in whatever order.
     *
     * @param searchSharesPerUser the given elements that should be contained in actual StatsResponse's searchSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerUser does not contain all given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S hasOnlySearchSharesPerUser(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> searchSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (searchSharesPerUser == null) {
            failWithMessage("Expecting searchSharesPerUser parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchSharesPerUser(), searchSharesPerUser.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerUser does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     *
     * @param searchSharesPerUser the given elements that should not be in actual StatsResponse's searchSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerUser contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveSearchSharesPerUser(org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp... searchSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp varargs is not null.
        if (searchSharesPerUser == null) {
            failWithMessage("Expecting searchSharesPerUser parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchSharesPerUser(), searchSharesPerUser);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchSharesPerUser does not contain the given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements in Collection.
     *
     * @param searchSharesPerUser the given elements that should not be in actual StatsResponse's searchSharesPerUser.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerUser contains any given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp elements.
     */
    public S doesNotHaveSearchSharesPerUser(java.util.Collection<? extends org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp> searchSharesPerUser) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.DownloadOrSearchSharePerUserOrIp collection is not null.
        if (searchSharesPerUser == null) {
            failWithMessage("Expecting searchSharesPerUser parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchSharesPerUser(), searchSharesPerUser.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no searchSharesPerUser.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchSharesPerUser is not empty.
     */
    public S hasNoSearchSharesPerUser() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have searchSharesPerUser but had :\n  <%s>";

        // check
        if (actual.getSearchSharesPerUser().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSearchSharesPerUser());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's searchesPerDayOfWeek contains the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     *
     * @param searchesPerDayOfWeek the given elements that should be contained in actual StatsResponse's searchesPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasSearchesPerDayOfWeek(org.nzbhydra.historystats.stats.CountPerDayOfWeek... searchesPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek varargs is not null.
        if (searchesPerDayOfWeek == null) {
            failWithMessage("Expecting searchesPerDayOfWeek parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchesPerDayOfWeek(), searchesPerDayOfWeek);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerDayOfWeek contains the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements in Collection.
     *
     * @param searchesPerDayOfWeek the given elements that should be contained in actual StatsResponse's searchesPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasSearchesPerDayOfWeek(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerDayOfWeek> searchesPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek collection is not null.
        if (searchesPerDayOfWeek == null) {
            failWithMessage("Expecting searchesPerDayOfWeek parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchesPerDayOfWeek(), searchesPerDayOfWeek.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerDayOfWeek contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements and nothing else in whatever order.
     *
     * @param searchesPerDayOfWeek the given elements that should be contained in actual StatsResponse's searchesPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasOnlySearchesPerDayOfWeek(org.nzbhydra.historystats.stats.CountPerDayOfWeek... searchesPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek varargs is not null.
        if (searchesPerDayOfWeek == null) {
            failWithMessage("Expecting searchesPerDayOfWeek parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchesPerDayOfWeek(), searchesPerDayOfWeek);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerDayOfWeek contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements in Collection and nothing else in whatever order.
     *
     * @param searchesPerDayOfWeek the given elements that should be contained in actual StatsResponse's searchesPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerDayOfWeek does not contain all given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S hasOnlySearchesPerDayOfWeek(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerDayOfWeek> searchesPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek collection is not null.
        if (searchesPerDayOfWeek == null) {
            failWithMessage("Expecting searchesPerDayOfWeek parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchesPerDayOfWeek(), searchesPerDayOfWeek.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerDayOfWeek does not contain the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     *
     * @param searchesPerDayOfWeek the given elements that should not be in actual StatsResponse's searchesPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerDayOfWeek contains any given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S doesNotHaveSearchesPerDayOfWeek(org.nzbhydra.historystats.stats.CountPerDayOfWeek... searchesPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek varargs is not null.
        if (searchesPerDayOfWeek == null) {
            failWithMessage("Expecting searchesPerDayOfWeek parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchesPerDayOfWeek(), searchesPerDayOfWeek);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerDayOfWeek does not contain the given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements in Collection.
     *
     * @param searchesPerDayOfWeek the given elements that should not be in actual StatsResponse's searchesPerDayOfWeek.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerDayOfWeek contains any given org.nzbhydra.historystats.stats.CountPerDayOfWeek elements.
     */
    public S doesNotHaveSearchesPerDayOfWeek(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerDayOfWeek> searchesPerDayOfWeek) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerDayOfWeek collection is not null.
        if (searchesPerDayOfWeek == null) {
            failWithMessage("Expecting searchesPerDayOfWeek parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchesPerDayOfWeek(), searchesPerDayOfWeek.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no searchesPerDayOfWeek.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerDayOfWeek is not empty.
     */
    public S hasNoSearchesPerDayOfWeek() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have searchesPerDayOfWeek but had :\n  <%s>";

        // check
        if (actual.getSearchesPerDayOfWeek().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSearchesPerDayOfWeek());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's searchesPerHourOfDay contains the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     *
     * @param searchesPerHourOfDay the given elements that should be contained in actual StatsResponse's searchesPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasSearchesPerHourOfDay(org.nzbhydra.historystats.stats.CountPerHourOfDay... searchesPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay varargs is not null.
        if (searchesPerHourOfDay == null) {
            failWithMessage("Expecting searchesPerHourOfDay parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchesPerHourOfDay(), searchesPerHourOfDay);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerHourOfDay contains the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements in Collection.
     *
     * @param searchesPerHourOfDay the given elements that should be contained in actual StatsResponse's searchesPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasSearchesPerHourOfDay(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerHourOfDay> searchesPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay collection is not null.
        if (searchesPerHourOfDay == null) {
            failWithMessage("Expecting searchesPerHourOfDay parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSearchesPerHourOfDay(), searchesPerHourOfDay.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerHourOfDay contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements and nothing else in whatever order.
     *
     * @param searchesPerHourOfDay the given elements that should be contained in actual StatsResponse's searchesPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasOnlySearchesPerHourOfDay(org.nzbhydra.historystats.stats.CountPerHourOfDay... searchesPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay varargs is not null.
        if (searchesPerHourOfDay == null) {
            failWithMessage("Expecting searchesPerHourOfDay parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchesPerHourOfDay(), searchesPerHourOfDay);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerHourOfDay contains <b>only</b> the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements in Collection and nothing else in whatever order.
     *
     * @param searchesPerHourOfDay the given elements that should be contained in actual StatsResponse's searchesPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerHourOfDay does not contain all given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S hasOnlySearchesPerHourOfDay(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerHourOfDay> searchesPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay collection is not null.
        if (searchesPerHourOfDay == null) {
            failWithMessage("Expecting searchesPerHourOfDay parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSearchesPerHourOfDay(), searchesPerHourOfDay.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerHourOfDay does not contain the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     *
     * @param searchesPerHourOfDay the given elements that should not be in actual StatsResponse's searchesPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerHourOfDay contains any given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S doesNotHaveSearchesPerHourOfDay(org.nzbhydra.historystats.stats.CountPerHourOfDay... searchesPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay varargs is not null.
        if (searchesPerHourOfDay == null) {
            failWithMessage("Expecting searchesPerHourOfDay parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchesPerHourOfDay(), searchesPerHourOfDay);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's searchesPerHourOfDay does not contain the given org.nzbhydra.historystats.stats.CountPerHourOfDay elements in Collection.
     *
     * @param searchesPerHourOfDay the given elements that should not be in actual StatsResponse's searchesPerHourOfDay.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerHourOfDay contains any given org.nzbhydra.historystats.stats.CountPerHourOfDay elements.
     */
    public S doesNotHaveSearchesPerHourOfDay(java.util.Collection<? extends org.nzbhydra.historystats.stats.CountPerHourOfDay> searchesPerHourOfDay) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.CountPerHourOfDay collection is not null.
        if (searchesPerHourOfDay == null) {
            failWithMessage("Expecting searchesPerHourOfDay parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSearchesPerHourOfDay(), searchesPerHourOfDay.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no searchesPerHourOfDay.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's searchesPerHourOfDay is not empty.
     */
    public S hasNoSearchesPerHourOfDay() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have searchesPerHourOfDay but had :\n  <%s>";

        // check
        if (actual.getSearchesPerHourOfDay().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSearchesPerHourOfDay());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's successfulDownloadsPerIndexer contains the given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     *
     * @param successfulDownloadsPerIndexer the given elements that should be contained in actual StatsResponse's successfulDownloadsPerIndexer.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's successfulDownloadsPerIndexer does not contain all given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     */
    public S hasSuccessfulDownloadsPerIndexer(org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer... successfulDownloadsPerIndexer) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer varargs is not null.
        if (successfulDownloadsPerIndexer == null) {
            failWithMessage("Expecting successfulDownloadsPerIndexer parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSuccessfulDownloadsPerIndexer(), successfulDownloadsPerIndexer);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's successfulDownloadsPerIndexer contains the given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements in Collection.
     *
     * @param successfulDownloadsPerIndexer the given elements that should be contained in actual StatsResponse's successfulDownloadsPerIndexer.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's successfulDownloadsPerIndexer does not contain all given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     */
    public S hasSuccessfulDownloadsPerIndexer(java.util.Collection<? extends org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer> successfulDownloadsPerIndexer) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer collection is not null.
        if (successfulDownloadsPerIndexer == null) {
            failWithMessage("Expecting successfulDownloadsPerIndexer parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSuccessfulDownloadsPerIndexer(), successfulDownloadsPerIndexer.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's successfulDownloadsPerIndexer contains <b>only</b> the given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements and nothing else in whatever order.
     *
     * @param successfulDownloadsPerIndexer the given elements that should be contained in actual StatsResponse's successfulDownloadsPerIndexer.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's successfulDownloadsPerIndexer does not contain all given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     */
    public S hasOnlySuccessfulDownloadsPerIndexer(org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer... successfulDownloadsPerIndexer) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer varargs is not null.
        if (successfulDownloadsPerIndexer == null) {
            failWithMessage("Expecting successfulDownloadsPerIndexer parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSuccessfulDownloadsPerIndexer(), successfulDownloadsPerIndexer);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's successfulDownloadsPerIndexer contains <b>only</b> the given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements in Collection and nothing else in whatever order.
     *
     * @param successfulDownloadsPerIndexer the given elements that should be contained in actual StatsResponse's successfulDownloadsPerIndexer.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's successfulDownloadsPerIndexer does not contain all given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     */
    public S hasOnlySuccessfulDownloadsPerIndexer(java.util.Collection<? extends org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer> successfulDownloadsPerIndexer) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer collection is not null.
        if (successfulDownloadsPerIndexer == null) {
            failWithMessage("Expecting successfulDownloadsPerIndexer parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSuccessfulDownloadsPerIndexer(), successfulDownloadsPerIndexer.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's successfulDownloadsPerIndexer does not contain the given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     *
     * @param successfulDownloadsPerIndexer the given elements that should not be in actual StatsResponse's successfulDownloadsPerIndexer.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's successfulDownloadsPerIndexer contains any given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     */
    public S doesNotHaveSuccessfulDownloadsPerIndexer(org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer... successfulDownloadsPerIndexer) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer varargs is not null.
        if (successfulDownloadsPerIndexer == null) {
            failWithMessage("Expecting successfulDownloadsPerIndexer parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSuccessfulDownloadsPerIndexer(), successfulDownloadsPerIndexer);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's successfulDownloadsPerIndexer does not contain the given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements in Collection.
     *
     * @param successfulDownloadsPerIndexer the given elements that should not be in actual StatsResponse's successfulDownloadsPerIndexer.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's successfulDownloadsPerIndexer contains any given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer elements.
     */
    public S doesNotHaveSuccessfulDownloadsPerIndexer(java.util.Collection<? extends org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer> successfulDownloadsPerIndexer) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.SuccessfulDownloadsPerIndexer collection is not null.
        if (successfulDownloadsPerIndexer == null) {
            failWithMessage("Expecting successfulDownloadsPerIndexer parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSuccessfulDownloadsPerIndexer(), successfulDownloadsPerIndexer.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no successfulDownloadsPerIndexer.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's successfulDownloadsPerIndexer is not empty.
     */
    public S hasNoSuccessfulDownloadsPerIndexer() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have successfulDownloadsPerIndexer but had :\n  <%s>";

        // check
        if (actual.getSuccessfulDownloadsPerIndexer().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSuccessfulDownloadsPerIndexer());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's userAgentDownloadShares contains the given org.nzbhydra.historystats.stats.UserAgentShare elements.
     *
     * @param userAgentDownloadShares the given elements that should be contained in actual StatsResponse's userAgentDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentDownloadShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasUserAgentDownloadShares(org.nzbhydra.historystats.stats.UserAgentShare... userAgentDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare varargs is not null.
        if (userAgentDownloadShares == null) {
            failWithMessage("Expecting userAgentDownloadShares parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getUserAgentDownloadShares(), userAgentDownloadShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentDownloadShares contains the given org.nzbhydra.historystats.stats.UserAgentShare elements in Collection.
     *
     * @param userAgentDownloadShares the given elements that should be contained in actual StatsResponse's userAgentDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentDownloadShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasUserAgentDownloadShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.UserAgentShare> userAgentDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare collection is not null.
        if (userAgentDownloadShares == null) {
            failWithMessage("Expecting userAgentDownloadShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getUserAgentDownloadShares(), userAgentDownloadShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentDownloadShares contains <b>only</b> the given org.nzbhydra.historystats.stats.UserAgentShare elements and nothing else in whatever order.
     *
     * @param userAgentDownloadShares the given elements that should be contained in actual StatsResponse's userAgentDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentDownloadShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasOnlyUserAgentDownloadShares(org.nzbhydra.historystats.stats.UserAgentShare... userAgentDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare varargs is not null.
        if (userAgentDownloadShares == null) {
            failWithMessage("Expecting userAgentDownloadShares parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getUserAgentDownloadShares(), userAgentDownloadShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentDownloadShares contains <b>only</b> the given org.nzbhydra.historystats.stats.UserAgentShare elements in Collection and nothing else in whatever order.
     *
     * @param userAgentDownloadShares the given elements that should be contained in actual StatsResponse's userAgentDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentDownloadShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasOnlyUserAgentDownloadShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.UserAgentShare> userAgentDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare collection is not null.
        if (userAgentDownloadShares == null) {
            failWithMessage("Expecting userAgentDownloadShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getUserAgentDownloadShares(), userAgentDownloadShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentDownloadShares does not contain the given org.nzbhydra.historystats.stats.UserAgentShare elements.
     *
     * @param userAgentDownloadShares the given elements that should not be in actual StatsResponse's userAgentDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentDownloadShares contains any given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S doesNotHaveUserAgentDownloadShares(org.nzbhydra.historystats.stats.UserAgentShare... userAgentDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare varargs is not null.
        if (userAgentDownloadShares == null) {
            failWithMessage("Expecting userAgentDownloadShares parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getUserAgentDownloadShares(), userAgentDownloadShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentDownloadShares does not contain the given org.nzbhydra.historystats.stats.UserAgentShare elements in Collection.
     *
     * @param userAgentDownloadShares the given elements that should not be in actual StatsResponse's userAgentDownloadShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentDownloadShares contains any given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S doesNotHaveUserAgentDownloadShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.UserAgentShare> userAgentDownloadShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare collection is not null.
        if (userAgentDownloadShares == null) {
            failWithMessage("Expecting userAgentDownloadShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getUserAgentDownloadShares(), userAgentDownloadShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no userAgentDownloadShares.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentDownloadShares is not empty.
     */
    public S hasNoUserAgentDownloadShares() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have userAgentDownloadShares but had :\n  <%s>";

        // check
        if (actual.getUserAgentDownloadShares().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getUserAgentDownloadShares());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual StatsResponse's userAgentSearchShares contains the given org.nzbhydra.historystats.stats.UserAgentShare elements.
     *
     * @param userAgentSearchShares the given elements that should be contained in actual StatsResponse's userAgentSearchShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentSearchShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasUserAgentSearchShares(org.nzbhydra.historystats.stats.UserAgentShare... userAgentSearchShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare varargs is not null.
        if (userAgentSearchShares == null) {
            failWithMessage("Expecting userAgentSearchShares parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getUserAgentSearchShares(), userAgentSearchShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentSearchShares contains the given org.nzbhydra.historystats.stats.UserAgentShare elements in Collection.
     *
     * @param userAgentSearchShares the given elements that should be contained in actual StatsResponse's userAgentSearchShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentSearchShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasUserAgentSearchShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.UserAgentShare> userAgentSearchShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare collection is not null.
        if (userAgentSearchShares == null) {
            failWithMessage("Expecting userAgentSearchShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getUserAgentSearchShares(), userAgentSearchShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentSearchShares contains <b>only</b> the given org.nzbhydra.historystats.stats.UserAgentShare elements and nothing else in whatever order.
     *
     * @param userAgentSearchShares the given elements that should be contained in actual StatsResponse's userAgentSearchShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentSearchShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasOnlyUserAgentSearchShares(org.nzbhydra.historystats.stats.UserAgentShare... userAgentSearchShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare varargs is not null.
        if (userAgentSearchShares == null) {
            failWithMessage("Expecting userAgentSearchShares parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getUserAgentSearchShares(), userAgentSearchShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentSearchShares contains <b>only</b> the given org.nzbhydra.historystats.stats.UserAgentShare elements in Collection and nothing else in whatever order.
     *
     * @param userAgentSearchShares the given elements that should be contained in actual StatsResponse's userAgentSearchShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentSearchShares does not contain all given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S hasOnlyUserAgentSearchShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.UserAgentShare> userAgentSearchShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare collection is not null.
        if (userAgentSearchShares == null) {
            failWithMessage("Expecting userAgentSearchShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getUserAgentSearchShares(), userAgentSearchShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentSearchShares does not contain the given org.nzbhydra.historystats.stats.UserAgentShare elements.
     *
     * @param userAgentSearchShares the given elements that should not be in actual StatsResponse's userAgentSearchShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentSearchShares contains any given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S doesNotHaveUserAgentSearchShares(org.nzbhydra.historystats.stats.UserAgentShare... userAgentSearchShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare varargs is not null.
        if (userAgentSearchShares == null) {
            failWithMessage("Expecting userAgentSearchShares parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getUserAgentSearchShares(), userAgentSearchShares);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse's userAgentSearchShares does not contain the given org.nzbhydra.historystats.stats.UserAgentShare elements in Collection.
     *
     * @param userAgentSearchShares the given elements that should not be in actual StatsResponse's userAgentSearchShares.
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentSearchShares contains any given org.nzbhydra.historystats.stats.UserAgentShare elements.
     */
    public S doesNotHaveUserAgentSearchShares(java.util.Collection<? extends org.nzbhydra.historystats.stats.UserAgentShare> userAgentSearchShares) {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // check that given org.nzbhydra.historystats.stats.UserAgentShare collection is not null.
        if (userAgentSearchShares == null) {
            failWithMessage("Expecting userAgentSearchShares parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getUserAgentSearchShares(), userAgentSearchShares.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsResponse has no userAgentSearchShares.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual StatsResponse's userAgentSearchShares is not empty.
     */
    public S hasNoUserAgentSearchShares() {
        // check that actual StatsResponse we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have userAgentSearchShares but had :\n  <%s>";

        // check
        if (actual.getUserAgentSearchShares().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getUserAgentSearchShares());
        }

        // return the current assertion for method chaining
        return myself;
    }


}
