package org.nzbhydra.historystats.stats;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link AverageResponseTime} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractAverageResponseTimeAssert<S extends AbstractAverageResponseTimeAssert<S, A>, A extends AverageResponseTime> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractAverageResponseTimeAssert}</code> to make assertions on actual AverageResponseTime.
     *
     * @param actual the AverageResponseTime we want to make assertions on.
     */
    protected AbstractAverageResponseTimeAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual AverageResponseTime's avgResponseTime is equal to the given one.
     *
     * @param avgResponseTime the given avgResponseTime to compare the actual AverageResponseTime's avgResponseTime to.
     * @return this assertion object.
     * @throws AssertionError - if the actual AverageResponseTime's avgResponseTime is not equal to the given one.
     */
    public S hasAvgResponseTime(double avgResponseTime) {
        // check that actual AverageResponseTime we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting avgResponseTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check value for avgResponseTime
        double actualAvgResponseTime = actual.getAvgResponseTime();
        if (actualAvgResponseTime != avgResponseTime) {
            failWithMessage(assertjErrorMessage, actual, avgResponseTime, actualAvgResponseTime);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AverageResponseTime's avgResponseTime is close to the given value by less than the given offset.
     * <p>
     * If difference is equal to the offset value, assertion is considered successful.
     *
     * @param avgResponseTime the value to compare the actual AverageResponseTime's avgResponseTime to.
     * @param assertjOffset   the given offset.
     * @return this assertion object.
     * @throws AssertionError - if the actual AverageResponseTime's avgResponseTime is not close enough to the given value.
     */
    public S hasAvgResponseTimeCloseTo(double avgResponseTime, double assertjOffset) {
        // check that actual AverageResponseTime we want to make assertions on is not null.
        isNotNull();

        double actualAvgResponseTime = actual.getAvgResponseTime();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = String.format("\nExpecting avgResponseTime:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
            actualAvgResponseTime, avgResponseTime, assertjOffset, Math.abs(avgResponseTime - actualAvgResponseTime));

        // check
        Assertions.assertThat(actualAvgResponseTime).overridingErrorMessage(assertjErrorMessage).isCloseTo(avgResponseTime, Assertions.within(assertjOffset));

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AverageResponseTime's delta is equal to the given one.
     *
     * @param delta the given delta to compare the actual AverageResponseTime's delta to.
     * @return this assertion object.
     * @throws AssertionError - if the actual AverageResponseTime's delta is not equal to the given one.
     */
    public S hasDelta(double delta) {
        // check that actual AverageResponseTime we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting delta of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check value for delta
        double actualDelta = actual.getDelta();
        if (actualDelta != delta) {
            failWithMessage(assertjErrorMessage, actual, delta, actualDelta);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AverageResponseTime's delta is close to the given value by less than the given offset.
     * <p>
     * If difference is equal to the offset value, assertion is considered successful.
     *
     * @param delta         the value to compare the actual AverageResponseTime's delta to.
     * @param assertjOffset the given offset.
     * @return this assertion object.
     * @throws AssertionError - if the actual AverageResponseTime's delta is not close enough to the given value.
     */
    public S hasDeltaCloseTo(double delta, double assertjOffset) {
        // check that actual AverageResponseTime we want to make assertions on is not null.
        isNotNull();

        double actualDelta = actual.getDelta();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = String.format("\nExpecting delta:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
            actualDelta, delta, assertjOffset, Math.abs(delta - actualDelta));

        // check
        Assertions.assertThat(actualDelta).overridingErrorMessage(assertjErrorMessage).isCloseTo(delta, Assertions.within(assertjOffset));

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual AverageResponseTime's indexer is equal to the given one.
     *
     * @param indexer the given indexer to compare the actual AverageResponseTime's indexer to.
     * @return this assertion object.
     * @throws AssertionError - if the actual AverageResponseTime's indexer is not equal to the given one.
     */
    public S hasIndexer(String indexer) {
        // check that actual AverageResponseTime we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting indexer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualIndexer = actual.getIndexer();
        if (!Objects.areEqual(actualIndexer, indexer)) {
            failWithMessage(assertjErrorMessage, actual, indexer, actualIndexer);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
