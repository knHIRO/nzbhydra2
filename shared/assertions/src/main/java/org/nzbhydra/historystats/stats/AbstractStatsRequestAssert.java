package org.nzbhydra.historystats.stats;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link StatsRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractStatsRequestAssert<S extends AbstractStatsRequestAssert<S, A>, A extends StatsRequest> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractStatsRequestAssert}</code> to make assertions on actual StatsRequest.
     *
     * @param actual the StatsRequest we want to make assertions on.
     */
    protected AbstractStatsRequestAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual StatsRequest's after is equal to the given one.
     *
     * @param after the given after to compare the actual StatsRequest's after to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest's after is not equal to the given one.
     */
    public S hasAfter(java.time.Instant after) {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting after of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.Instant actualAfter = actual.getAfter();
        if (!Objects.areEqual(actualAfter, after)) {
            failWithMessage(assertjErrorMessage, actual, after, actualAfter);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is avg indexer uniqueness score.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not avg indexer uniqueness score.
     */
    public S isAvgIndexerUniquenessScore() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isAvgIndexerUniquenessScore()) {
            failWithMessage("\nExpecting that actual StatsRequest is avg indexer uniqueness score but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not avg indexer uniqueness score.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is avg indexer uniqueness score.
     */
    public S isNotAvgIndexerUniquenessScore() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isAvgIndexerUniquenessScore()) {
            failWithMessage("\nExpecting that actual StatsRequest is not avg indexer uniqueness score but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is avg response times.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not avg response times.
     */
    public S isAvgResponseTimes() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isAvgResponseTimes()) {
            failWithMessage("\nExpecting that actual StatsRequest is avg response times but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not avg response times.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is avg response times.
     */
    public S isNotAvgResponseTimes() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isAvgResponseTimes()) {
            failWithMessage("\nExpecting that actual StatsRequest is not avg response times but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest's before is equal to the given one.
     *
     * @param before the given before to compare the actual StatsRequest's before to.
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest's before is not equal to the given one.
     */
    public S hasBefore(java.time.Instant before) {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting before of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        java.time.Instant actualBefore = actual.getBefore();
        if (!Objects.areEqual(actualBefore, before)) {
            failWithMessage(assertjErrorMessage, actual, before, actualBefore);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is download shares per ip.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not download shares per ip.
     */
    public S isDownloadSharesPerIp() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isDownloadSharesPerIp()) {
            failWithMessage("\nExpecting that actual StatsRequest is download shares per ip but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not download shares per ip.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is download shares per ip.
     */
    public S isNotDownloadSharesPerIp() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isDownloadSharesPerIp()) {
            failWithMessage("\nExpecting that actual StatsRequest is not download shares per ip but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is download shares per user.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not download shares per user.
     */
    public S isDownloadSharesPerUser() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isDownloadSharesPerUser()) {
            failWithMessage("\nExpecting that actual StatsRequest is download shares per user but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not download shares per user.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is download shares per user.
     */
    public S isNotDownloadSharesPerUser() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isDownloadSharesPerUser()) {
            failWithMessage("\nExpecting that actual StatsRequest is not download shares per user but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is downloads per age stats.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not downloads per age stats.
     */
    public S isDownloadsPerAgeStats() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isDownloadsPerAgeStats()) {
            failWithMessage("\nExpecting that actual StatsRequest is downloads per age stats but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not downloads per age stats.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is downloads per age stats.
     */
    public S isNotDownloadsPerAgeStats() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isDownloadsPerAgeStats()) {
            failWithMessage("\nExpecting that actual StatsRequest is not downloads per age stats but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is downloads per day of week.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not downloads per day of week.
     */
    public S isDownloadsPerDayOfWeek() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isDownloadsPerDayOfWeek()) {
            failWithMessage("\nExpecting that actual StatsRequest is downloads per day of week but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not downloads per day of week.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is downloads per day of week.
     */
    public S isNotDownloadsPerDayOfWeek() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isDownloadsPerDayOfWeek()) {
            failWithMessage("\nExpecting that actual StatsRequest is not downloads per day of week but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is downloads per hour of day.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not downloads per hour of day.
     */
    public S isDownloadsPerHourOfDay() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isDownloadsPerHourOfDay()) {
            failWithMessage("\nExpecting that actual StatsRequest is downloads per hour of day but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not downloads per hour of day.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is downloads per hour of day.
     */
    public S isNotDownloadsPerHourOfDay() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isDownloadsPerHourOfDay()) {
            failWithMessage("\nExpecting that actual StatsRequest is not downloads per hour of day but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is include disabled.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not include disabled.
     */
    public S isIncludeDisabled() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isIncludeDisabled()) {
            failWithMessage("\nExpecting that actual StatsRequest is include disabled but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not include disabled.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is include disabled.
     */
    public S isNotIncludeDisabled() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isIncludeDisabled()) {
            failWithMessage("\nExpecting that actual StatsRequest is not include disabled but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is indexer api access stats.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not indexer api access stats.
     */
    public S isIndexerApiAccessStats() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isIndexerApiAccessStats()) {
            failWithMessage("\nExpecting that actual StatsRequest is indexer api access stats but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not indexer api access stats.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is indexer api access stats.
     */
    public S isNotIndexerApiAccessStats() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isIndexerApiAccessStats()) {
            failWithMessage("\nExpecting that actual StatsRequest is not indexer api access stats but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is indexer download shares.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not indexer download shares.
     */
    public S isIndexerDownloadShares() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isIndexerDownloadShares()) {
            failWithMessage("\nExpecting that actual StatsRequest is indexer download shares but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not indexer download shares.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is indexer download shares.
     */
    public S isNotIndexerDownloadShares() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isIndexerDownloadShares()) {
            failWithMessage("\nExpecting that actual StatsRequest is not indexer download shares but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is search shares per ip.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not search shares per ip.
     */
    public S isSearchSharesPerIp() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isSearchSharesPerIp()) {
            failWithMessage("\nExpecting that actual StatsRequest is search shares per ip but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not search shares per ip.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is search shares per ip.
     */
    public S isNotSearchSharesPerIp() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isSearchSharesPerIp()) {
            failWithMessage("\nExpecting that actual StatsRequest is not search shares per ip but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is search shares per user.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not search shares per user.
     */
    public S isSearchSharesPerUser() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isSearchSharesPerUser()) {
            failWithMessage("\nExpecting that actual StatsRequest is search shares per user but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not search shares per user.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is search shares per user.
     */
    public S isNotSearchSharesPerUser() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isSearchSharesPerUser()) {
            failWithMessage("\nExpecting that actual StatsRequest is not search shares per user but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is searches per day of week.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not searches per day of week.
     */
    public S isSearchesPerDayOfWeek() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isSearchesPerDayOfWeek()) {
            failWithMessage("\nExpecting that actual StatsRequest is searches per day of week but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not searches per day of week.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is searches per day of week.
     */
    public S isNotSearchesPerDayOfWeek() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isSearchesPerDayOfWeek()) {
            failWithMessage("\nExpecting that actual StatsRequest is not searches per day of week but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is searches per hour of day.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not searches per hour of day.
     */
    public S isSearchesPerHourOfDay() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isSearchesPerHourOfDay()) {
            failWithMessage("\nExpecting that actual StatsRequest is searches per hour of day but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not searches per hour of day.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is searches per hour of day.
     */
    public S isNotSearchesPerHourOfDay() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isSearchesPerHourOfDay()) {
            failWithMessage("\nExpecting that actual StatsRequest is not searches per hour of day but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is successful downloads per indexer.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not successful downloads per indexer.
     */
    public S isSuccessfulDownloadsPerIndexer() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isSuccessfulDownloadsPerIndexer()) {
            failWithMessage("\nExpecting that actual StatsRequest is successful downloads per indexer but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not successful downloads per indexer.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is successful downloads per indexer.
     */
    public S isNotSuccessfulDownloadsPerIndexer() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isSuccessfulDownloadsPerIndexer()) {
            failWithMessage("\nExpecting that actual StatsRequest is not successful downloads per indexer but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is user agent download shares.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not user agent download shares.
     */
    public S isUserAgentDownloadShares() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isUserAgentDownloadShares()) {
            failWithMessage("\nExpecting that actual StatsRequest is user agent download shares but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not user agent download shares.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is user agent download shares.
     */
    public S isNotUserAgentDownloadShares() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isUserAgentDownloadShares()) {
            failWithMessage("\nExpecting that actual StatsRequest is not user agent download shares but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is user agent search shares.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is not user agent search shares.
     */
    public S isUserAgentSearchShares() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isUserAgentSearchShares()) {
            failWithMessage("\nExpecting that actual StatsRequest is user agent search shares but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual StatsRequest is not user agent search shares.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual StatsRequest is user agent search shares.
     */
    public S isNotUserAgentSearchShares() {
        // check that actual StatsRequest we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isUserAgentSearchShares()) {
            failWithMessage("\nExpecting that actual StatsRequest is not user agent search shares but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

}
