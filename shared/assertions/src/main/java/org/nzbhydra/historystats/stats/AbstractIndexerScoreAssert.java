package org.nzbhydra.historystats.stats;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link IndexerScore} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractIndexerScoreAssert<S extends AbstractIndexerScoreAssert<S, A>, A extends IndexerScore> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractIndexerScoreAssert}</code> to make assertions on actual IndexerScore.
     *
     * @param actual the IndexerScore we want to make assertions on.
     */
    protected AbstractIndexerScoreAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual IndexerScore's averageUniquenessScore is equal to the given one.
     *
     * @param averageUniquenessScore the given averageUniquenessScore to compare the actual IndexerScore's averageUniquenessScore to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerScore's averageUniquenessScore is not equal to the given one.
     */
    public S hasAverageUniquenessScore(Integer averageUniquenessScore) {
        // check that actual IndexerScore we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting averageUniquenessScore of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualAverageUniquenessScore = actual.getAverageUniquenessScore();
        if (!Objects.areEqual(actualAverageUniquenessScore, averageUniquenessScore)) {
            failWithMessage(assertjErrorMessage, actual, averageUniquenessScore, actualAverageUniquenessScore);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerScore's indexerName is equal to the given one.
     *
     * @param indexerName the given indexerName to compare the actual IndexerScore's indexerName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerScore's indexerName is not equal to the given one.
     */
    public S hasIndexerName(String indexerName) {
        // check that actual IndexerScore we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting indexerName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualIndexerName = actual.getIndexerName();
        if (!Objects.areEqual(actualIndexerName, indexerName)) {
            failWithMessage(assertjErrorMessage, actual, indexerName, actualIndexerName);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerScore's involvedSearches is equal to the given one.
     *
     * @param involvedSearches the given involvedSearches to compare the actual IndexerScore's involvedSearches to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerScore's involvedSearches is not equal to the given one.
     */
    public S hasInvolvedSearches(long involvedSearches) {
        // check that actual IndexerScore we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting involvedSearches of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualInvolvedSearches = actual.getInvolvedSearches();
        if (actualInvolvedSearches != involvedSearches) {
            failWithMessage(assertjErrorMessage, actual, involvedSearches, actualInvolvedSearches);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual IndexerScore's uniqueDownloads is equal to the given one.
     *
     * @param uniqueDownloads the given uniqueDownloads to compare the actual IndexerScore's uniqueDownloads to.
     * @return this assertion object.
     * @throws AssertionError - if the actual IndexerScore's uniqueDownloads is not equal to the given one.
     */
    public S hasUniqueDownloads(long uniqueDownloads) {
        // check that actual IndexerScore we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting uniqueDownloads of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        long actualUniqueDownloads = actual.getUniqueDownloads();
        if (actualUniqueDownloads != uniqueDownloads) {
            failWithMessage(assertjErrorMessage, actual, uniqueDownloads, actualUniqueDownloads);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
