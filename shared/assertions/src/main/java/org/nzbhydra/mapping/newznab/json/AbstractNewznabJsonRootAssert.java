package org.nzbhydra.mapping.newznab.json;

import org.assertj.core.util.Objects;
import org.nzbhydra.mapping.newznab.AbstractNewznabResponseAssert;

/**
 * Abstract base class for {@link NewznabJsonRoot} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractNewznabJsonRootAssert<S extends AbstractNewznabJsonRootAssert<S, A>, A extends NewznabJsonRoot> extends AbstractNewznabResponseAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractNewznabJsonRootAssert}</code> to make assertions on actual NewznabJsonRoot.
     *
     * @param actual the NewznabJsonRoot we want to make assertions on.
     */
    protected AbstractNewznabJsonRootAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual NewznabJsonRoot's attributes is equal to the given one.
     *
     * @param attributes the given attributes to compare the actual NewznabJsonRoot's attributes to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabJsonRoot's attributes is not equal to the given one.
     */
    public S hasAttributes(NewznabJsonRootAttributes attributes) {
        // check that actual NewznabJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting attributes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        NewznabJsonRootAttributes actualAttributes = actual.getAttributes();
        if (!Objects.areEqual(actualAttributes, attributes)) {
            failWithMessage(assertjErrorMessage, actual, attributes, actualAttributes);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabJsonRoot's channel is equal to the given one.
     *
     * @param channel the given channel to compare the actual NewznabJsonRoot's channel to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabJsonRoot's channel is not equal to the given one.
     */
    public S hasChannel(NewznabJsonChannel channel) {
        // check that actual NewznabJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting channel of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        NewznabJsonChannel actualChannel = actual.getChannel();
        if (!Objects.areEqual(actualChannel, channel)) {
            failWithMessage(assertjErrorMessage, actual, channel, actualChannel);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabJsonRoot's contentHeader is equal to the given one.
     *
     * @param contentHeader the given contentHeader to compare the actual NewznabJsonRoot's contentHeader to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabJsonRoot's contentHeader is not equal to the given one.
     */
    public S hasContentHeader(String contentHeader) {
        // check that actual NewznabJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting contentHeader of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualContentHeader = actual.getContentHeader();
        if (!Objects.areEqual(actualContentHeader, contentHeader)) {
            failWithMessage(assertjErrorMessage, actual, contentHeader, actualContentHeader);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabJsonRoot's searchType is equal to the given one.
     *
     * @param searchType the given searchType to compare the actual NewznabJsonRoot's searchType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabJsonRoot's searchType is not equal to the given one.
     */
    public S hasSearchType(org.nzbhydra.mapping.newznab.NewznabResponse.SearchType searchType) {
        // check that actual NewznabJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting searchType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.mapping.newznab.NewznabResponse.SearchType actualSearchType = actual.getSearchType();
        if (!Objects.areEqual(actualSearchType, searchType)) {
            failWithMessage(assertjErrorMessage, actual, searchType, actualSearchType);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
