package org.nzbhydra.mapping.newznab.xml;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link NewznabXmlChannel} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractNewznabXmlChannelAssert<S extends AbstractNewznabXmlChannelAssert<S, A>, A extends NewznabXmlChannel> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractNewznabXmlChannelAssert}</code> to make assertions on actual NewznabXmlChannel.
     *
     * @param actual the NewznabXmlChannel we want to make assertions on.
     */
    protected AbstractNewznabXmlChannelAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual NewznabXmlChannel's apiLimits is equal to the given one.
     *
     * @param apiLimits the given apiLimits to compare the actual NewznabXmlChannel's apiLimits to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's apiLimits is not equal to the given one.
     */
    public S hasApiLimits(NewznabXmlApilimits apiLimits) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting apiLimits of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        NewznabXmlApilimits actualApiLimits = actual.getApiLimits();
        if (!Objects.areEqual(actualApiLimits, apiLimits)) {
            failWithMessage(assertjErrorMessage, actual, apiLimits, actualApiLimits);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's description is equal to the given one.
     *
     * @param description the given description to compare the actual NewznabXmlChannel's description to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's description is not equal to the given one.
     */
    public S hasDescription(String description) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDescription = actual.getDescription();
        if (!Objects.areEqual(actualDescription, description)) {
            failWithMessage(assertjErrorMessage, actual, description, actualDescription);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's generator is equal to the given one.
     *
     * @param generator the given generator to compare the actual NewznabXmlChannel's generator to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's generator is not equal to the given one.
     */
    public S hasGenerator(String generator) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting generator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualGenerator = actual.getGenerator();
        if (!Objects.areEqual(actualGenerator, generator)) {
            failWithMessage(assertjErrorMessage, actual, generator, actualGenerator);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's items contains the given NewznabXmlItem elements.
     *
     * @param items the given elements that should be contained in actual NewznabXmlChannel's items.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabXmlChannel's items does not contain all given NewznabXmlItem elements.
     */
    public S hasItems(NewznabXmlItem... items) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // check that given NewznabXmlItem varargs is not null.
        if (items == null) {
            failWithMessage("Expecting items parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getItems(), items);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's items contains the given NewznabXmlItem elements in Collection.
     *
     * @param items the given elements that should be contained in actual NewznabXmlChannel's items.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabXmlChannel's items does not contain all given NewznabXmlItem elements.
     */
    public S hasItems(java.util.Collection<? extends NewznabXmlItem> items) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // check that given NewznabXmlItem collection is not null.
        if (items == null) {
            failWithMessage("Expecting items parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getItems(), items.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's items contains <b>only</b> the given NewznabXmlItem elements and nothing else in whatever order.
     *
     * @param items the given elements that should be contained in actual NewznabXmlChannel's items.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabXmlChannel's items does not contain all given NewznabXmlItem elements.
     */
    public S hasOnlyItems(NewznabXmlItem... items) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // check that given NewznabXmlItem varargs is not null.
        if (items == null) {
            failWithMessage("Expecting items parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getItems(), items);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's items contains <b>only</b> the given NewznabXmlItem elements in Collection and nothing else in whatever order.
     *
     * @param items the given elements that should be contained in actual NewznabXmlChannel's items.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabXmlChannel's items does not contain all given NewznabXmlItem elements.
     */
    public S hasOnlyItems(java.util.Collection<? extends NewznabXmlItem> items) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // check that given NewznabXmlItem collection is not null.
        if (items == null) {
            failWithMessage("Expecting items parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getItems(), items.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's items does not contain the given NewznabXmlItem elements.
     *
     * @param items the given elements that should not be in actual NewznabXmlChannel's items.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabXmlChannel's items contains any given NewznabXmlItem elements.
     */
    public S doesNotHaveItems(NewznabXmlItem... items) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // check that given NewznabXmlItem varargs is not null.
        if (items == null) {
            failWithMessage("Expecting items parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getItems(), items);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's items does not contain the given NewznabXmlItem elements in Collection.
     *
     * @param items the given elements that should not be in actual NewznabXmlChannel's items.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabXmlChannel's items contains any given NewznabXmlItem elements.
     */
    public S doesNotHaveItems(java.util.Collection<? extends NewznabXmlItem> items) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // check that given NewznabXmlItem collection is not null.
        if (items == null) {
            failWithMessage("Expecting items parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getItems(), items.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel has no items.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabXmlChannel's items is not empty.
     */
    public S hasNoItems() {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have items but had :\n  <%s>";

        // check
        if (actual.getItems().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getItems());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual NewznabXmlChannel's language is equal to the given one.
     *
     * @param language the given language to compare the actual NewznabXmlChannel's language to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's language is not equal to the given one.
     */
    public S hasLanguage(String language) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting language of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualLanguage = actual.getLanguage();
        if (!Objects.areEqual(actualLanguage, language)) {
            failWithMessage(assertjErrorMessage, actual, language, actualLanguage);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's link is equal to the given one.
     *
     * @param link the given link to compare the actual NewznabXmlChannel's link to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's link is not equal to the given one.
     */
    public S hasLink(String link) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting link of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualLink = actual.getLink();
        if (!Objects.areEqual(actualLink, link)) {
            failWithMessage(assertjErrorMessage, actual, link, actualLink);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's newznabResponse is equal to the given one.
     *
     * @param newznabResponse the given newznabResponse to compare the actual NewznabXmlChannel's newznabResponse to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's newznabResponse is not equal to the given one.
     */
    public S hasNewznabResponse(NewznabXmlResponse newznabResponse) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting newznabResponse of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        NewznabXmlResponse actualNewznabResponse = actual.getNewznabResponse();
        if (!Objects.areEqual(actualNewznabResponse, newznabResponse)) {
            failWithMessage(assertjErrorMessage, actual, newznabResponse, actualNewznabResponse);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's title is equal to the given one.
     *
     * @param title the given title to compare the actual NewznabXmlChannel's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's title is not equal to the given one.
     */
    public S hasTitle(String title) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTitle = actual.getTitle();
        if (!Objects.areEqual(actualTitle, title)) {
            failWithMessage(assertjErrorMessage, actual, title, actualTitle);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlChannel's webMaster is equal to the given one.
     *
     * @param webMaster the given webMaster to compare the actual NewznabXmlChannel's webMaster to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlChannel's webMaster is not equal to the given one.
     */
    public S hasWebMaster(String webMaster) {
        // check that actual NewznabXmlChannel we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting webMaster of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualWebMaster = actual.getWebMaster();
        if (!Objects.areEqual(actualWebMaster, webMaster)) {
            failWithMessage(assertjErrorMessage, actual, webMaster, actualWebMaster);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
