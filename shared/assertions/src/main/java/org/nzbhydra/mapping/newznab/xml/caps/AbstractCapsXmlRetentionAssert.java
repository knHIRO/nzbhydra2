package org.nzbhydra.mapping.newznab.xml.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsXmlRetention} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsXmlRetentionAssert<S extends AbstractCapsXmlRetentionAssert<S, A>, A extends CapsXmlRetention> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsXmlRetentionAssert}</code> to make assertions on actual CapsXmlRetention.
     *
     * @param actual the CapsXmlRetention we want to make assertions on.
     */
    protected AbstractCapsXmlRetentionAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsXmlRetention's days is equal to the given one.
     *
     * @param days the given days to compare the actual CapsXmlRetention's days to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlRetention's days is not equal to the given one.
     */
    public S hasDays(Integer days) {
        // check that actual CapsXmlRetention we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting days of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualDays = actual.getDays();
        if (!Objects.areEqual(actualDays, days)) {
            failWithMessage(assertjErrorMessage, actual, days, actualDays);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
