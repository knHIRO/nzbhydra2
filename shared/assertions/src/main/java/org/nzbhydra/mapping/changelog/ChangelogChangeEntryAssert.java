package org.nzbhydra.mapping.changelog;

/**
 * {@link ChangelogChangeEntry} specific assertions - Generated by CustomAssertionGenerator.
 * <p>
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it,
 * extend {@link AbstractChangelogChangeEntryAssert} instead.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public class ChangelogChangeEntryAssert extends AbstractChangelogChangeEntryAssert<ChangelogChangeEntryAssert, ChangelogChangeEntry> {

    /**
     * Creates a new <code>{@link ChangelogChangeEntryAssert}</code> to make assertions on actual ChangelogChangeEntry.
     *
     * @param actual the ChangelogChangeEntry we want to make assertions on.
     */
    public ChangelogChangeEntryAssert(ChangelogChangeEntry actual) {
        super(actual, ChangelogChangeEntryAssert.class);
    }

    /**
     * An entry point for ChangelogChangeEntryAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myChangelogChangeEntry)</code> and get specific assertion with code completion.
     *
     * @param actual the ChangelogChangeEntry we want to make assertions on.
     * @return a new <code>{@link ChangelogChangeEntryAssert}</code>
     */
    @org.assertj.core.util.CheckReturnValue
    public static ChangelogChangeEntryAssert assertThat(ChangelogChangeEntry actual) {
        return new ChangelogChangeEntryAssert(actual);
    }
}
