package org.nzbhydra.mapping.newznab.xml.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link CapsXmlCategories} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsXmlCategoriesAssert<S extends AbstractCapsXmlCategoriesAssert<S, A>, A extends CapsXmlCategories> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsXmlCategoriesAssert}</code> to make assertions on actual CapsXmlCategories.
     *
     * @param actual the CapsXmlCategories we want to make assertions on.
     */
    protected AbstractCapsXmlCategoriesAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsXmlCategories's categories contains the given CapsXmlCategory elements.
     *
     * @param categories the given elements that should be contained in actual CapsXmlCategories's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategories's categories does not contain all given CapsXmlCategory elements.
     */
    public S hasCategories(CapsXmlCategory... categories) {
        // check that actual CapsXmlCategories we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategories's categories contains the given CapsXmlCategory elements in Collection.
     *
     * @param categories the given elements that should be contained in actual CapsXmlCategories's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategories's categories does not contain all given CapsXmlCategory elements.
     */
    public S hasCategories(java.util.Collection<? extends CapsXmlCategory> categories) {
        // check that actual CapsXmlCategories we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategories's categories contains <b>only</b> the given CapsXmlCategory elements and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual CapsXmlCategories's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategories's categories does not contain all given CapsXmlCategory elements.
     */
    public S hasOnlyCategories(CapsXmlCategory... categories) {
        // check that actual CapsXmlCategories we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategories's categories contains <b>only</b> the given CapsXmlCategory elements in Collection and nothing else in whatever order.
     *
     * @param categories the given elements that should be contained in actual CapsXmlCategories's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategories's categories does not contain all given CapsXmlCategory elements.
     */
    public S hasOnlyCategories(java.util.Collection<? extends CapsXmlCategory> categories) {
        // check that actual CapsXmlCategories we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategories's categories does not contain the given CapsXmlCategory elements.
     *
     * @param categories the given elements that should not be in actual CapsXmlCategories's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategories's categories contains any given CapsXmlCategory elements.
     */
    public S doesNotHaveCategories(CapsXmlCategory... categories) {
        // check that actual CapsXmlCategories we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory varargs is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategories's categories does not contain the given CapsXmlCategory elements in Collection.
     *
     * @param categories the given elements that should not be in actual CapsXmlCategories's categories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategories's categories contains any given CapsXmlCategory elements.
     */
    public S doesNotHaveCategories(java.util.Collection<? extends CapsXmlCategory> categories) {
        // check that actual CapsXmlCategories we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory collection is not null.
        if (categories == null) {
            failWithMessage("Expecting categories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCategories(), categories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategories has no categories.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategories's categories is not empty.
     */
    public S hasNoCategories() {
        // check that actual CapsXmlCategories we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have categories but had :\n  <%s>";

        // check
        if (actual.getCategories().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getCategories());
        }

        // return the current assertion for method chaining
        return myself;
    }


}
