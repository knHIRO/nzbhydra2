package org.nzbhydra.mapping.newznab.xml;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link NewznabXmlEnclosure} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractNewznabXmlEnclosureAssert<S extends AbstractNewznabXmlEnclosureAssert<S, A>, A extends NewznabXmlEnclosure> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractNewznabXmlEnclosureAssert}</code> to make assertions on actual NewznabXmlEnclosure.
     *
     * @param actual the NewznabXmlEnclosure we want to make assertions on.
     */
    protected AbstractNewznabXmlEnclosureAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual NewznabXmlEnclosure's length is equal to the given one.
     *
     * @param length the given length to compare the actual NewznabXmlEnclosure's length to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlEnclosure's length is not equal to the given one.
     */
    public S hasLength(Long length) {
        // check that actual NewznabXmlEnclosure we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting length of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Long actualLength = actual.getLength();
        if (!Objects.areEqual(actualLength, length)) {
            failWithMessage(assertjErrorMessage, actual, length, actualLength);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlEnclosure's type is equal to the given one.
     *
     * @param type the given type to compare the actual NewznabXmlEnclosure's type to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlEnclosure's type is not equal to the given one.
     */
    public S hasType(String type) {
        // check that actual NewznabXmlEnclosure we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualType = actual.getType();
        if (!Objects.areEqual(actualType, type)) {
            failWithMessage(assertjErrorMessage, actual, type, actualType);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlEnclosure's url is equal to the given one.
     *
     * @param url the given url to compare the actual NewznabXmlEnclosure's url to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlEnclosure's url is not equal to the given one.
     */
    public S hasUrl(String url) {
        // check that actual NewznabXmlEnclosure we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualUrl = actual.getUrl();
        if (!Objects.areEqual(actualUrl, url)) {
            failWithMessage(assertjErrorMessage, actual, url, actualUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
