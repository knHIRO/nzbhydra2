package org.nzbhydra.mapping.newznab.json.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsJsonRoot} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsJsonRootAssert<S extends AbstractCapsJsonRootAssert<S, A>, A extends CapsJsonRoot> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsJsonRootAssert}</code> to make assertions on actual CapsJsonRoot.
     *
     * @param actual the CapsJsonRoot we want to make assertions on.
     */
    protected AbstractCapsJsonRootAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsJsonRoot's categories is equal to the given one.
     *
     * @param categories the given categories to compare the actual CapsJsonRoot's categories to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonRoot's categories is not equal to the given one.
     */
    public S hasCategories(CapsJsonCategoriesHolder categories) {
        // check that actual CapsJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting categories of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonCategoriesHolder actualCategories = actual.getCategories();
        if (!Objects.areEqual(actualCategories, categories)) {
            failWithMessage(assertjErrorMessage, actual, categories, actualCategories);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonRoot's limits is equal to the given one.
     *
     * @param limits the given limits to compare the actual CapsJsonRoot's limits to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonRoot's limits is not equal to the given one.
     */
    public S hasLimits(CapsJsonLimits limits) {
        // check that actual CapsJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting limits of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonLimits actualLimits = actual.getLimits();
        if (!Objects.areEqual(actualLimits, limits)) {
            failWithMessage(assertjErrorMessage, actual, limits, actualLimits);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonRoot's registration is equal to the given one.
     *
     * @param registration the given registration to compare the actual CapsJsonRoot's registration to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonRoot's registration is not equal to the given one.
     */
    public S hasRegistration(CapsJsonRegistration registration) {
        // check that actual CapsJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting registration of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonRegistration actualRegistration = actual.getRegistration();
        if (!Objects.areEqual(actualRegistration, registration)) {
            failWithMessage(assertjErrorMessage, actual, registration, actualRegistration);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonRoot's searching is equal to the given one.
     *
     * @param searching the given searching to compare the actual CapsJsonRoot's searching to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonRoot's searching is not equal to the given one.
     */
    public S hasSearching(CapsJsonSearching searching) {
        // check that actual CapsJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting searching of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonSearching actualSearching = actual.getSearching();
        if (!Objects.areEqual(actualSearching, searching)) {
            failWithMessage(assertjErrorMessage, actual, searching, actualSearching);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonRoot's server is equal to the given one.
     *
     * @param server the given server to compare the actual CapsJsonRoot's server to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonRoot's server is not equal to the given one.
     */
    public S hasServer(CapsJsonServer server) {
        // check that actual CapsJsonRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting server of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonServer actualServer = actual.getServer();
        if (!Objects.areEqual(actualServer, server)) {
            failWithMessage(assertjErrorMessage, actual, server, actualServer);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
