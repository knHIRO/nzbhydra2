package org.nzbhydra.mapping.newznab.xml.caps.jackett;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link JacketCapsXmlIndexer} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractJacketCapsXmlIndexerAssert<S extends AbstractJacketCapsXmlIndexerAssert<S, A>, A extends JacketCapsXmlIndexer> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractJacketCapsXmlIndexerAssert}</code> to make assertions on actual JacketCapsXmlIndexer.
     *
     * @param actual the JacketCapsXmlIndexer we want to make assertions on.
     */
    protected AbstractJacketCapsXmlIndexerAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual JacketCapsXmlIndexer's caps is equal to the given one.
     *
     * @param caps the given caps to compare the actual JacketCapsXmlIndexer's caps to.
     * @return this assertion object.
     * @throws AssertionError - if the actual JacketCapsXmlIndexer's caps is not equal to the given one.
     */
    public S hasCaps(org.nzbhydra.mapping.newznab.xml.caps.CapsXmlRoot caps) {
        // check that actual JacketCapsXmlIndexer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting caps of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.mapping.newznab.xml.caps.CapsXmlRoot actualCaps = actual.getCaps();
        if (!Objects.areEqual(actualCaps, caps)) {
            failWithMessage(assertjErrorMessage, actual, caps, actualCaps);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual JacketCapsXmlIndexer's id is equal to the given one.
     *
     * @param id the given id to compare the actual JacketCapsXmlIndexer's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual JacketCapsXmlIndexer's id is not equal to the given one.
     */
    public S hasId(String id) {
        // check that actual JacketCapsXmlIndexer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualId = actual.getId();
        if (!Objects.areEqual(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual JacketCapsXmlIndexer's title is equal to the given one.
     *
     * @param title the given title to compare the actual JacketCapsXmlIndexer's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual JacketCapsXmlIndexer's title is not equal to the given one.
     */
    public S hasTitle(String title) {
        // check that actual JacketCapsXmlIndexer we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTitle = actual.getTitle();
        if (!Objects.areEqual(actualTitle, title)) {
            failWithMessage(assertjErrorMessage, actual, title, actualTitle);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
