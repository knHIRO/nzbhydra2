package org.nzbhydra.mapping.newznab;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link NewznabParameters} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractNewznabParametersAssert<S extends AbstractNewznabParametersAssert<S, A>, A extends NewznabParameters> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractNewznabParametersAssert}</code> to make assertions on actual NewznabParameters.
     *
     * @param actual the NewznabParameters we want to make assertions on.
     */
    protected AbstractNewznabParametersAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual NewznabParameters's apikey is equal to the given one.
     *
     * @param apikey the given apikey to compare the actual NewznabParameters's apikey to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's apikey is not equal to the given one.
     */
    public S hasApikey(String apikey) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting apikey of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualApikey = actual.getApikey();
        if (!Objects.areEqual(actualApikey, apikey)) {
            failWithMessage(assertjErrorMessage, actual, apikey, actualApikey);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's attrs contains the given String elements.
     *
     * @param attrs the given elements that should be contained in actual NewznabParameters's attrs.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's attrs does not contain all given String elements.
     */
    public S hasAttrs(String... attrs) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (attrs == null) {
            failWithMessage("Expecting attrs parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAttrs(), attrs);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's attrs contains the given String elements in Collection.
     *
     * @param attrs the given elements that should be contained in actual NewznabParameters's attrs.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's attrs does not contain all given String elements.
     */
    public S hasAttrs(java.util.Collection<? extends String> attrs) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (attrs == null) {
            failWithMessage("Expecting attrs parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAttrs(), attrs.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's attrs contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param attrs the given elements that should be contained in actual NewznabParameters's attrs.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's attrs does not contain all given String elements.
     */
    public S hasOnlyAttrs(String... attrs) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (attrs == null) {
            failWithMessage("Expecting attrs parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAttrs(), attrs);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's attrs contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param attrs the given elements that should be contained in actual NewznabParameters's attrs.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's attrs does not contain all given String elements.
     */
    public S hasOnlyAttrs(java.util.Collection<? extends String> attrs) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (attrs == null) {
            failWithMessage("Expecting attrs parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAttrs(), attrs.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's attrs does not contain the given String elements.
     *
     * @param attrs the given elements that should not be in actual NewznabParameters's attrs.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's attrs contains any given String elements.
     */
    public S doesNotHaveAttrs(String... attrs) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (attrs == null) {
            failWithMessage("Expecting attrs parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAttrs(), attrs);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's attrs does not contain the given String elements in Collection.
     *
     * @param attrs the given elements that should not be in actual NewznabParameters's attrs.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's attrs contains any given String elements.
     */
    public S doesNotHaveAttrs(java.util.Collection<? extends String> attrs) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (attrs == null) {
            failWithMessage("Expecting attrs parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAttrs(), attrs.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters has no attrs.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's attrs is not empty.
     */
    public S hasNoAttrs() {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have attrs but had :\n  <%s>";

        // check
        if (actual.getAttrs().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getAttrs());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual NewznabParameters's author is equal to the given one.
     *
     * @param author the given author to compare the actual NewznabParameters's author to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's author is not equal to the given one.
     */
    public S hasAuthor(String author) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting author of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualAuthor = actual.getAuthor();
        if (!Objects.areEqual(actualAuthor, author)) {
            failWithMessage(assertjErrorMessage, actual, author, actualAuthor);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's cachetime is equal to the given one.
     *
     * @param cachetime the given cachetime to compare the actual NewznabParameters's cachetime to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's cachetime is not equal to the given one.
     */
    public S hasCachetime(Integer cachetime) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting cachetime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualCachetime = actual.getCachetime();
        if (!Objects.areEqual(actualCachetime, cachetime)) {
            failWithMessage(assertjErrorMessage, actual, cachetime, actualCachetime);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's cat contains the given Integer elements.
     *
     * @param cat the given elements that should be contained in actual NewznabParameters's cat.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's cat does not contain all given Integer elements.
     */
    public S hasCat(Integer... cat) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given Integer varargs is not null.
        if (cat == null) {
            failWithMessage("Expecting cat parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCat(), cat);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's cat contains the given Integer elements in Collection.
     *
     * @param cat the given elements that should be contained in actual NewznabParameters's cat.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's cat does not contain all given Integer elements.
     */
    public S hasCat(java.util.Collection<? extends Integer> cat) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given Integer collection is not null.
        if (cat == null) {
            failWithMessage("Expecting cat parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getCat(), cat.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's cat contains <b>only</b> the given Integer elements and nothing else in whatever order.
     *
     * @param cat the given elements that should be contained in actual NewznabParameters's cat.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's cat does not contain all given Integer elements.
     */
    public S hasOnlyCat(Integer... cat) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given Integer varargs is not null.
        if (cat == null) {
            failWithMessage("Expecting cat parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCat(), cat);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's cat contains <b>only</b> the given Integer elements in Collection and nothing else in whatever order.
     *
     * @param cat the given elements that should be contained in actual NewznabParameters's cat.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's cat does not contain all given Integer elements.
     */
    public S hasOnlyCat(java.util.Collection<? extends Integer> cat) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given Integer collection is not null.
        if (cat == null) {
            failWithMessage("Expecting cat parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getCat(), cat.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's cat does not contain the given Integer elements.
     *
     * @param cat the given elements that should not be in actual NewznabParameters's cat.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's cat contains any given Integer elements.
     */
    public S doesNotHaveCat(Integer... cat) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given Integer varargs is not null.
        if (cat == null) {
            failWithMessage("Expecting cat parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCat(), cat);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's cat does not contain the given Integer elements in Collection.
     *
     * @param cat the given elements that should not be in actual NewznabParameters's cat.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's cat contains any given Integer elements.
     */
    public S doesNotHaveCat(java.util.Collection<? extends Integer> cat) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given Integer collection is not null.
        if (cat == null) {
            failWithMessage("Expecting cat parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getCat(), cat.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters has no cat.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's cat is not empty.
     */
    public S hasNoCat() {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have cat but had :\n  <%s>";

        // check
        if (actual.getCat().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getCat());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual NewznabParameters's ep is equal to the given one.
     *
     * @param ep the given ep to compare the actual NewznabParameters's ep to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's ep is not equal to the given one.
     */
    public S hasEp(String ep) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting ep of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualEp = actual.getEp();
        if (!Objects.areEqual(actualEp, ep)) {
            failWithMessage(assertjErrorMessage, actual, ep, actualEp);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters is extended.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters is not extended.
     */
    public S isExtended() {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isExtended()) {
            failWithMessage("\nExpecting that actual NewznabParameters is extended but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters is not extended.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters is extended.
     */
    public S isNotExtended() {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isExtended()) {
            failWithMessage("\nExpecting that actual NewznabParameters is not extended but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's genre is equal to the given one.
     *
     * @param genre the given genre to compare the actual NewznabParameters's genre to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's genre is not equal to the given one.
     */
    public S hasGenre(String genre) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting genre of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualGenre = actual.getGenre();
        if (!Objects.areEqual(actualGenre, genre)) {
            failWithMessage(assertjErrorMessage, actual, genre, actualGenre);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's id is equal to the given one.
     *
     * @param id the given id to compare the actual NewznabParameters's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's id is not equal to the given one.
     */
    public S hasId(String id) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualId = actual.getId();
        if (!Objects.areEqual(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's imdbid is equal to the given one.
     *
     * @param imdbid the given imdbid to compare the actual NewznabParameters's imdbid to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's imdbid is not equal to the given one.
     */
    public S hasImdbid(String imdbid) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting imdbid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualImdbid = actual.getImdbid();
        if (!Objects.areEqual(actualImdbid, imdbid)) {
            failWithMessage(assertjErrorMessage, actual, imdbid, actualImdbid);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's indexers contains the given String elements.
     *
     * @param indexers the given elements that should be contained in actual NewznabParameters's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's indexers does not contain all given String elements.
     */
    public S hasIndexers(String... indexers) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexers(), indexers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's indexers contains the given String elements in Collection.
     *
     * @param indexers the given elements that should be contained in actual NewznabParameters's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's indexers does not contain all given String elements.
     */
    public S hasIndexers(java.util.Collection<? extends String> indexers) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getIndexers(), indexers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's indexers contains <b>only</b> the given String elements and nothing else in whatever order.
     *
     * @param indexers the given elements that should be contained in actual NewznabParameters's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's indexers does not contain all given String elements.
     */
    public S hasOnlyIndexers(String... indexers) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexers(), indexers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's indexers contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
     *
     * @param indexers the given elements that should be contained in actual NewznabParameters's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's indexers does not contain all given String elements.
     */
    public S hasOnlyIndexers(java.util.Collection<? extends String> indexers) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getIndexers(), indexers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's indexers does not contain the given String elements.
     *
     * @param indexers the given elements that should not be in actual NewznabParameters's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's indexers contains any given String elements.
     */
    public S doesNotHaveIndexers(String... indexers) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String varargs is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexers(), indexers);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's indexers does not contain the given String elements in Collection.
     *
     * @param indexers the given elements that should not be in actual NewznabParameters's indexers.
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's indexers contains any given String elements.
     */
    public S doesNotHaveIndexers(java.util.Collection<? extends String> indexers) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that given String collection is not null.
        if (indexers == null) {
            failWithMessage("Expecting indexers parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getIndexers(), indexers.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters has no indexers.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual NewznabParameters's indexers is not empty.
     */
    public S hasNoIndexers() {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have indexers but had :\n  <%s>";

        // check
        if (actual.getIndexers().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getIndexers());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual NewznabParameters's limit is equal to the given one.
     *
     * @param limit the given limit to compare the actual NewznabParameters's limit to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's limit is not equal to the given one.
     */
    public S hasLimit(Integer limit) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting limit of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualLimit = actual.getLimit();
        if (!Objects.areEqual(actualLimit, limit)) {
            failWithMessage(assertjErrorMessage, actual, limit, actualLimit);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's maxage is equal to the given one.
     *
     * @param maxage the given maxage to compare the actual NewznabParameters's maxage to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's maxage is not equal to the given one.
     */
    public S hasMaxage(Integer maxage) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting maxage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualMaxage = actual.getMaxage();
        if (!Objects.areEqual(actualMaxage, maxage)) {
            failWithMessage(assertjErrorMessage, actual, maxage, actualMaxage);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's maxsize is equal to the given one.
     *
     * @param maxsize the given maxsize to compare the actual NewznabParameters's maxsize to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's maxsize is not equal to the given one.
     */
    public S hasMaxsize(Integer maxsize) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting maxsize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualMaxsize = actual.getMaxsize();
        if (!Objects.areEqual(actualMaxsize, maxsize)) {
            failWithMessage(assertjErrorMessage, actual, maxsize, actualMaxsize);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's minage is equal to the given one.
     *
     * @param minage the given minage to compare the actual NewznabParameters's minage to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's minage is not equal to the given one.
     */
    public S hasMinage(Integer minage) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting minage of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualMinage = actual.getMinage();
        if (!Objects.areEqual(actualMinage, minage)) {
            failWithMessage(assertjErrorMessage, actual, minage, actualMinage);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's minsize is equal to the given one.
     *
     * @param minsize the given minsize to compare the actual NewznabParameters's minsize to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's minsize is not equal to the given one.
     */
    public S hasMinsize(Integer minsize) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting minsize of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualMinsize = actual.getMinsize();
        if (!Objects.areEqual(actualMinsize, minsize)) {
            failWithMessage(assertjErrorMessage, actual, minsize, actualMinsize);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's o is equal to the given one.
     *
     * @param o the given o to compare the actual NewznabParameters's o to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's o is not equal to the given one.
     */
    public S hasO(OutputType o) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting o of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        OutputType actualO = actual.getO();
        if (!Objects.areEqual(actualO, o)) {
            failWithMessage(assertjErrorMessage, actual, o, actualO);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's offset is equal to the given one.
     *
     * @param offset the given offset to compare the actual NewznabParameters's offset to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's offset is not equal to the given one.
     */
    public S hasOffset(Integer offset) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting offset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualOffset = actual.getOffset();
        if (!Objects.areEqual(actualOffset, offset)) {
            failWithMessage(assertjErrorMessage, actual, offset, actualOffset);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's password is equal to the given one.
     *
     * @param password the given password to compare the actual NewznabParameters's password to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's password is not equal to the given one.
     */
    public S hasPassword(Integer password) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting password of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualPassword = actual.getPassword();
        if (!Objects.areEqual(actualPassword, password)) {
            failWithMessage(assertjErrorMessage, actual, password, actualPassword);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's q is equal to the given one.
     *
     * @param q the given q to compare the actual NewznabParameters's q to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's q is not equal to the given one.
     */
    public S hasQ(String q) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting q of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualQ = actual.getQ();
        if (!Objects.areEqual(actualQ, q)) {
            failWithMessage(assertjErrorMessage, actual, q, actualQ);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters is raw.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters is not raw.
     */
    public S isRaw() {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isRaw()) {
            failWithMessage("\nExpecting that actual NewznabParameters is raw but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters is not raw.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters is raw.
     */
    public S isNotRaw() {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isRaw()) {
            failWithMessage("\nExpecting that actual NewznabParameters is not raw but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's rid is equal to the given one.
     *
     * @param rid the given rid to compare the actual NewznabParameters's rid to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's rid is not equal to the given one.
     */
    public S hasRid(String rid) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting rid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualRid = actual.getRid();
        if (!Objects.areEqual(actualRid, rid)) {
            failWithMessage(assertjErrorMessage, actual, rid, actualRid);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's season is equal to the given one.
     *
     * @param season the given season to compare the actual NewznabParameters's season to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's season is not equal to the given one.
     */
    public S hasSeason(Integer season) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting season of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualSeason = actual.getSeason();
        if (!Objects.areEqual(actualSeason, season)) {
            failWithMessage(assertjErrorMessage, actual, season, actualSeason);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's t is equal to the given one.
     *
     * @param t the given t to compare the actual NewznabParameters's t to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's t is not equal to the given one.
     */
    public S hasT(ActionAttribute t) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting t of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        ActionAttribute actualT = actual.getT();
        if (!Objects.areEqual(actualT, t)) {
            failWithMessage(assertjErrorMessage, actual, t, actualT);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's title is equal to the given one.
     *
     * @param title the given title to compare the actual NewznabParameters's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's title is not equal to the given one.
     */
    public S hasTitle(String title) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTitle = actual.getTitle();
        if (!Objects.areEqual(actualTitle, title)) {
            failWithMessage(assertjErrorMessage, actual, title, actualTitle);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's tmdbid is equal to the given one.
     *
     * @param tmdbid the given tmdbid to compare the actual NewznabParameters's tmdbid to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's tmdbid is not equal to the given one.
     */
    public S hasTmdbid(String tmdbid) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting tmdbid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTmdbid = actual.getTmdbid();
        if (!Objects.areEqual(actualTmdbid, tmdbid)) {
            failWithMessage(assertjErrorMessage, actual, tmdbid, actualTmdbid);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's traktId is equal to the given one.
     *
     * @param traktId the given traktId to compare the actual NewznabParameters's traktId to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's traktId is not equal to the given one.
     */
    public S hasTraktId(String traktId) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting traktId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTraktId = actual.getTraktId();
        if (!Objects.areEqual(actualTraktId, traktId)) {
            failWithMessage(assertjErrorMessage, actual, traktId, actualTraktId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's tvdbid is equal to the given one.
     *
     * @param tvdbid the given tvdbid to compare the actual NewznabParameters's tvdbid to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's tvdbid is not equal to the given one.
     */
    public S hasTvdbid(String tvdbid) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting tvdbid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTvdbid = actual.getTvdbid();
        if (!Objects.areEqual(actualTvdbid, tvdbid)) {
            failWithMessage(assertjErrorMessage, actual, tvdbid, actualTvdbid);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabParameters's tvmazeid is equal to the given one.
     *
     * @param tvmazeid the given tvmazeid to compare the actual NewznabParameters's tvmazeid to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabParameters's tvmazeid is not equal to the given one.
     */
    public S hasTvmazeid(String tvmazeid) {
        // check that actual NewznabParameters we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting tvmazeid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTvmazeid = actual.getTvmazeid();
        if (!Objects.areEqual(actualTvmazeid, tvmazeid)) {
            failWithMessage(assertjErrorMessage, actual, tvmazeid, actualTvmazeid);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
