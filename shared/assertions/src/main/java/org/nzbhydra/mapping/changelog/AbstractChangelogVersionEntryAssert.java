package org.nzbhydra.mapping.changelog;

import org.assertj.core.api.AbstractComparableAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ChangelogVersionEntry} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractChangelogVersionEntryAssert<S extends AbstractChangelogVersionEntryAssert<S, A>, A extends ChangelogVersionEntry> extends AbstractComparableAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractChangelogVersionEntryAssert}</code> to make assertions on actual ChangelogVersionEntry.
     *
     * @param actual the ChangelogVersionEntry we want to make assertions on.
     */
    protected AbstractChangelogVersionEntryAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's changes contains the given ChangelogChangeEntry elements.
     *
     * @param changes the given elements that should be contained in actual ChangelogVersionEntry's changes.
     * @return this assertion object.
     * @throws AssertionError if the actual ChangelogVersionEntry's changes does not contain all given ChangelogChangeEntry elements.
     */
    public S hasChanges(ChangelogChangeEntry... changes) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that given ChangelogChangeEntry varargs is not null.
        if (changes == null) {
            failWithMessage("Expecting changes parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getChanges(), changes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's changes contains the given ChangelogChangeEntry elements in Collection.
     *
     * @param changes the given elements that should be contained in actual ChangelogVersionEntry's changes.
     * @return this assertion object.
     * @throws AssertionError if the actual ChangelogVersionEntry's changes does not contain all given ChangelogChangeEntry elements.
     */
    public S hasChanges(java.util.Collection<? extends ChangelogChangeEntry> changes) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that given ChangelogChangeEntry collection is not null.
        if (changes == null) {
            failWithMessage("Expecting changes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getChanges(), changes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's changes contains <b>only</b> the given ChangelogChangeEntry elements and nothing else in whatever order.
     *
     * @param changes the given elements that should be contained in actual ChangelogVersionEntry's changes.
     * @return this assertion object.
     * @throws AssertionError if the actual ChangelogVersionEntry's changes does not contain all given ChangelogChangeEntry elements.
     */
    public S hasOnlyChanges(ChangelogChangeEntry... changes) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that given ChangelogChangeEntry varargs is not null.
        if (changes == null) {
            failWithMessage("Expecting changes parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getChanges(), changes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's changes contains <b>only</b> the given ChangelogChangeEntry elements in Collection and nothing else in whatever order.
     *
     * @param changes the given elements that should be contained in actual ChangelogVersionEntry's changes.
     * @return this assertion object.
     * @throws AssertionError if the actual ChangelogVersionEntry's changes does not contain all given ChangelogChangeEntry elements.
     */
    public S hasOnlyChanges(java.util.Collection<? extends ChangelogChangeEntry> changes) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that given ChangelogChangeEntry collection is not null.
        if (changes == null) {
            failWithMessage("Expecting changes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getChanges(), changes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's changes does not contain the given ChangelogChangeEntry elements.
     *
     * @param changes the given elements that should not be in actual ChangelogVersionEntry's changes.
     * @return this assertion object.
     * @throws AssertionError if the actual ChangelogVersionEntry's changes contains any given ChangelogChangeEntry elements.
     */
    public S doesNotHaveChanges(ChangelogChangeEntry... changes) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that given ChangelogChangeEntry varargs is not null.
        if (changes == null) {
            failWithMessage("Expecting changes parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getChanges(), changes);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's changes does not contain the given ChangelogChangeEntry elements in Collection.
     *
     * @param changes the given elements that should not be in actual ChangelogVersionEntry's changes.
     * @return this assertion object.
     * @throws AssertionError if the actual ChangelogVersionEntry's changes contains any given ChangelogChangeEntry elements.
     */
    public S doesNotHaveChanges(java.util.Collection<? extends ChangelogChangeEntry> changes) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that given ChangelogChangeEntry collection is not null.
        if (changes == null) {
            failWithMessage("Expecting changes parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getChanges(), changes.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry has no changes.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual ChangelogVersionEntry's changes is not empty.
     */
    public S hasNoChanges() {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have changes but had :\n  <%s>";

        // check
        if (actual.getChanges().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getChanges());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual ChangelogVersionEntry's date is equal to the given one.
     *
     * @param date the given date to compare the actual ChangelogVersionEntry's date to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ChangelogVersionEntry's date is not equal to the given one.
     */
    public S hasDate(String date) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualDate = actual.getDate();
        if (!Objects.areEqual(actualDate, date)) {
            failWithMessage(assertjErrorMessage, actual, date, actualDate);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry is final.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual ChangelogVersionEntry is not final.
     */
    public S isFinal() {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isFinal()) {
            failWithMessage("\nExpecting that actual ChangelogVersionEntry is final but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry is not final.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual ChangelogVersionEntry is final.
     */
    public S isNotFinal() {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isFinal()) {
            failWithMessage("\nExpecting that actual ChangelogVersionEntry is not final but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's semanticVersion is equal to the given one.
     *
     * @param semanticVersion the given semanticVersion to compare the actual ChangelogVersionEntry's semanticVersion to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ChangelogVersionEntry's semanticVersion is not equal to the given one.
     */
    public S hasSemanticVersion(org.nzbhydra.mapping.SemanticVersion semanticVersion) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting semanticVersion of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        org.nzbhydra.mapping.SemanticVersion actualSemanticVersion = actual.getSemanticVersion();
        if (!Objects.areEqual(actualSemanticVersion, semanticVersion)) {
            failWithMessage(assertjErrorMessage, actual, semanticVersion, actualSemanticVersion);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual ChangelogVersionEntry's version is equal to the given one.
     *
     * @param version the given version to compare the actual ChangelogVersionEntry's version to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ChangelogVersionEntry's version is not equal to the given one.
     */
    public S hasVersion(String version) {
        // check that actual ChangelogVersionEntry we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualVersion = actual.getVersion();
        if (!Objects.areEqual(actualVersion, version)) {
            failWithMessage(assertjErrorMessage, actual, version, actualVersion);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
