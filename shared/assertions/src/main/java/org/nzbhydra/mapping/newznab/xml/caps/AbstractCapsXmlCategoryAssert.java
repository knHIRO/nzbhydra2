package org.nzbhydra.mapping.newznab.xml.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsXmlCategory} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsXmlCategoryAssert<S extends AbstractCapsXmlCategoryAssert<S, A>, A extends CapsXmlCategory> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsXmlCategoryAssert}</code> to make assertions on actual CapsXmlCategory.
     *
     * @param actual the CapsXmlCategory we want to make assertions on.
     */
    protected AbstractCapsXmlCategoryAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsXmlCategory's id is equal to the given one.
     *
     * @param id the given id to compare the actual CapsXmlCategory's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlCategory's id is not equal to the given one.
     */
    public S hasId(int id) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // check
        int actualId = actual.getId();
        if (actualId != id) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory's name is equal to the given one.
     *
     * @param name the given name to compare the actual CapsXmlCategory's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlCategory's name is not equal to the given one.
     */
    public S hasName(String name) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory's subCategories contains the given CapsXmlCategory elements.
     *
     * @param subCategories the given elements that should be contained in actual CapsXmlCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategory's subCategories does not contain all given CapsXmlCategory elements.
     */
    public S hasSubCategories(CapsXmlCategory... subCategories) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory varargs is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSubCategories(), subCategories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory's subCategories contains the given CapsXmlCategory elements in Collection.
     *
     * @param subCategories the given elements that should be contained in actual CapsXmlCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategory's subCategories does not contain all given CapsXmlCategory elements.
     */
    public S hasSubCategories(java.util.Collection<? extends CapsXmlCategory> subCategories) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory collection is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSubCategories(), subCategories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory's subCategories contains <b>only</b> the given CapsXmlCategory elements and nothing else in whatever order.
     *
     * @param subCategories the given elements that should be contained in actual CapsXmlCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategory's subCategories does not contain all given CapsXmlCategory elements.
     */
    public S hasOnlySubCategories(CapsXmlCategory... subCategories) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory varargs is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSubCategories(), subCategories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory's subCategories contains <b>only</b> the given CapsXmlCategory elements in Collection and nothing else in whatever order.
     *
     * @param subCategories the given elements that should be contained in actual CapsXmlCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategory's subCategories does not contain all given CapsXmlCategory elements.
     */
    public S hasOnlySubCategories(java.util.Collection<? extends CapsXmlCategory> subCategories) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory collection is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSubCategories(), subCategories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory's subCategories does not contain the given CapsXmlCategory elements.
     *
     * @param subCategories the given elements that should not be in actual CapsXmlCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategory's subCategories contains any given CapsXmlCategory elements.
     */
    public S doesNotHaveSubCategories(CapsXmlCategory... subCategories) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory varargs is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSubCategories(), subCategories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory's subCategories does not contain the given CapsXmlCategory elements in Collection.
     *
     * @param subCategories the given elements that should not be in actual CapsXmlCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategory's subCategories contains any given CapsXmlCategory elements.
     */
    public S doesNotHaveSubCategories(java.util.Collection<? extends CapsXmlCategory> subCategories) {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsXmlCategory collection is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSubCategories(), subCategories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlCategory has no subCategories.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual CapsXmlCategory's subCategories is not empty.
     */
    public S hasNoSubCategories() {
        // check that actual CapsXmlCategory we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have subCategories but had :\n  <%s>";

        // check
        if (actual.getSubCategories().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSubCategories());
        }

        // return the current assertion for method chaining
        return myself;
    }


}
