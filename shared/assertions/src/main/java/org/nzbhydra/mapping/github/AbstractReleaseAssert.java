package org.nzbhydra.mapping.github;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Release} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractReleaseAssert<S extends AbstractReleaseAssert<S, A>, A extends Release> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractReleaseAssert}</code> to make assertions on actual Release.
     *
     * @param actual the Release we want to make assertions on.
     */
    protected AbstractReleaseAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual Release's assets contains the given Asset elements.
     *
     * @param assets the given elements that should be contained in actual Release's assets.
     * @return this assertion object.
     * @throws AssertionError if the actual Release's assets does not contain all given Asset elements.
     */
    public S hasAssets(Asset... assets) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // check that given Asset varargs is not null.
        if (assets == null) {
            failWithMessage("Expecting assets parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAssets(), assets);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's assets contains the given Asset elements in Collection.
     *
     * @param assets the given elements that should be contained in actual Release's assets.
     * @return this assertion object.
     * @throws AssertionError if the actual Release's assets does not contain all given Asset elements.
     */
    public S hasAssets(java.util.Collection<? extends Asset> assets) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // check that given Asset collection is not null.
        if (assets == null) {
            failWithMessage("Expecting assets parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getAssets(), assets.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's assets contains <b>only</b> the given Asset elements and nothing else in whatever order.
     *
     * @param assets the given elements that should be contained in actual Release's assets.
     * @return this assertion object.
     * @throws AssertionError if the actual Release's assets does not contain all given Asset elements.
     */
    public S hasOnlyAssets(Asset... assets) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // check that given Asset varargs is not null.
        if (assets == null) {
            failWithMessage("Expecting assets parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAssets(), assets);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's assets contains <b>only</b> the given Asset elements in Collection and nothing else in whatever order.
     *
     * @param assets the given elements that should be contained in actual Release's assets.
     * @return this assertion object.
     * @throws AssertionError if the actual Release's assets does not contain all given Asset elements.
     */
    public S hasOnlyAssets(java.util.Collection<? extends Asset> assets) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // check that given Asset collection is not null.
        if (assets == null) {
            failWithMessage("Expecting assets parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getAssets(), assets.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's assets does not contain the given Asset elements.
     *
     * @param assets the given elements that should not be in actual Release's assets.
     * @return this assertion object.
     * @throws AssertionError if the actual Release's assets contains any given Asset elements.
     */
    public S doesNotHaveAssets(Asset... assets) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // check that given Asset varargs is not null.
        if (assets == null) {
            failWithMessage("Expecting assets parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAssets(), assets);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's assets does not contain the given Asset elements in Collection.
     *
     * @param assets the given elements that should not be in actual Release's assets.
     * @return this assertion object.
     * @throws AssertionError if the actual Release's assets contains any given Asset elements.
     */
    public S doesNotHaveAssets(java.util.Collection<? extends Asset> assets) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // check that given Asset collection is not null.
        if (assets == null) {
            failWithMessage("Expecting assets parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getAssets(), assets.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release has no assets.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual Release's assets is not empty.
     */
    public S hasNoAssets() {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have assets but had :\n  <%s>";

        // check
        if (actual.getAssets().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getAssets());
        }

        // return the current assertion for method chaining
        return myself;
    }


    /**
     * Verifies that the actual Release's assetsUrl is equal to the given one.
     *
     * @param assetsUrl the given assetsUrl to compare the actual Release's assetsUrl to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's assetsUrl is not equal to the given one.
     */
    public S hasAssetsUrl(String assetsUrl) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting assetsUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualAssetsUrl = actual.getAssetsUrl();
        if (!Objects.areEqual(actualAssetsUrl, assetsUrl)) {
            failWithMessage(assertjErrorMessage, actual, assetsUrl, actualAssetsUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's body is equal to the given one.
     *
     * @param body the given body to compare the actual Release's body to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's body is not equal to the given one.
     */
    public S hasBody(String body) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting body of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualBody = actual.getBody();
        if (!Objects.areEqual(actualBody, body)) {
            failWithMessage(assertjErrorMessage, actual, body, actualBody);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's createdAt is equal to the given one.
     *
     * @param createdAt the given createdAt to compare the actual Release's createdAt to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's createdAt is not equal to the given one.
     */
    public S hasCreatedAt(String createdAt) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting createdAt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualCreatedAt = actual.getCreatedAt();
        if (!Objects.areEqual(actualCreatedAt, createdAt)) {
            failWithMessage(assertjErrorMessage, actual, createdAt, actualCreatedAt);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's draft is equal to the given one.
     *
     * @param draft the given draft to compare the actual Release's draft to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's draft is not equal to the given one.
     */
    public S hasDraft(Boolean draft) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting draft of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualDraft = actual.getDraft();
        if (!Objects.areEqual(actualDraft, draft)) {
            failWithMessage(assertjErrorMessage, actual, draft, actualDraft);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's htmlUrl is equal to the given one.
     *
     * @param htmlUrl the given htmlUrl to compare the actual Release's htmlUrl to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's htmlUrl is not equal to the given one.
     */
    public S hasHtmlUrl(String htmlUrl) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting htmlUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualHtmlUrl = actual.getHtmlUrl();
        if (!Objects.areEqual(actualHtmlUrl, htmlUrl)) {
            failWithMessage(assertjErrorMessage, actual, htmlUrl, actualHtmlUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's id is equal to the given one.
     *
     * @param id the given id to compare the actual Release's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's id is not equal to the given one.
     */
    public S hasId(Integer id) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Integer actualId = actual.getId();
        if (!Objects.areEqual(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's name is equal to the given one.
     *
     * @param name the given name to compare the actual Release's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's name is not equal to the given one.
     */
    public S hasName(String name) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's prerelease is equal to the given one.
     *
     * @param prerelease the given prerelease to compare the actual Release's prerelease to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's prerelease is not equal to the given one.
     */
    public S hasPrerelease(Boolean prerelease) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting prerelease of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        Boolean actualPrerelease = actual.getPrerelease();
        if (!Objects.areEqual(actualPrerelease, prerelease)) {
            failWithMessage(assertjErrorMessage, actual, prerelease, actualPrerelease);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's publishedAt is equal to the given one.
     *
     * @param publishedAt the given publishedAt to compare the actual Release's publishedAt to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's publishedAt is not equal to the given one.
     */
    public S hasPublishedAt(String publishedAt) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting publishedAt of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualPublishedAt = actual.getPublishedAt();
        if (!Objects.areEqual(actualPublishedAt, publishedAt)) {
            failWithMessage(assertjErrorMessage, actual, publishedAt, actualPublishedAt);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's tagName is equal to the given one.
     *
     * @param tagName the given tagName to compare the actual Release's tagName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's tagName is not equal to the given one.
     */
    public S hasTagName(String tagName) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting tagName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTagName = actual.getTagName();
        if (!Objects.areEqual(actualTagName, tagName)) {
            failWithMessage(assertjErrorMessage, actual, tagName, actualTagName);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's tarballUrl is equal to the given one.
     *
     * @param tarballUrl the given tarballUrl to compare the actual Release's tarballUrl to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's tarballUrl is not equal to the given one.
     */
    public S hasTarballUrl(String tarballUrl) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting tarballUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTarballUrl = actual.getTarballUrl();
        if (!Objects.areEqual(actualTarballUrl, tarballUrl)) {
            failWithMessage(assertjErrorMessage, actual, tarballUrl, actualTarballUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's targetCommitish is equal to the given one.
     *
     * @param targetCommitish the given targetCommitish to compare the actual Release's targetCommitish to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's targetCommitish is not equal to the given one.
     */
    public S hasTargetCommitish(String targetCommitish) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting targetCommitish of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualTargetCommitish = actual.getTargetCommitish();
        if (!Objects.areEqual(actualTargetCommitish, targetCommitish)) {
            failWithMessage(assertjErrorMessage, actual, targetCommitish, actualTargetCommitish);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's uploadUrl is equal to the given one.
     *
     * @param uploadUrl the given uploadUrl to compare the actual Release's uploadUrl to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's uploadUrl is not equal to the given one.
     */
    public S hasUploadUrl(String uploadUrl) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting uploadUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualUploadUrl = actual.getUploadUrl();
        if (!Objects.areEqual(actualUploadUrl, uploadUrl)) {
            failWithMessage(assertjErrorMessage, actual, uploadUrl, actualUploadUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's url is equal to the given one.
     *
     * @param url the given url to compare the actual Release's url to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's url is not equal to the given one.
     */
    public S hasUrl(String url) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualUrl = actual.getUrl();
        if (!Objects.areEqual(actualUrl, url)) {
            failWithMessage(assertjErrorMessage, actual, url, actualUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual Release's zipballUrl is equal to the given one.
     *
     * @param zipballUrl the given zipballUrl to compare the actual Release's zipballUrl to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Release's zipballUrl is not equal to the given one.
     */
    public S hasZipballUrl(String zipballUrl) {
        // check that actual Release we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting zipballUrl of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualZipballUrl = actual.getZipballUrl();
        if (!Objects.areEqual(actualZipballUrl, zipballUrl)) {
            failWithMessage(assertjErrorMessage, actual, zipballUrl, actualZipballUrl);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
