package org.nzbhydra.mapping.newznab.xml.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsXmlRoot} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsXmlRootAssert<S extends AbstractCapsXmlRootAssert<S, A>, A extends CapsXmlRoot> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsXmlRootAssert}</code> to make assertions on actual CapsXmlRoot.
     *
     * @param actual the CapsXmlRoot we want to make assertions on.
     */
    protected AbstractCapsXmlRootAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsXmlRoot's categories is equal to the given one.
     *
     * @param categories the given categories to compare the actual CapsXmlRoot's categories to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlRoot's categories is not equal to the given one.
     */
    public S hasCategories(CapsXmlCategories categories) {
        // check that actual CapsXmlRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting categories of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsXmlCategories actualCategories = actual.getCategories();
        if (!Objects.areEqual(actualCategories, categories)) {
            failWithMessage(assertjErrorMessage, actual, categories, actualCategories);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlRoot's limits is equal to the given one.
     *
     * @param limits the given limits to compare the actual CapsXmlRoot's limits to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlRoot's limits is not equal to the given one.
     */
    public S hasLimits(CapsXmlLimits limits) {
        // check that actual CapsXmlRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting limits of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsXmlLimits actualLimits = actual.getLimits();
        if (!Objects.areEqual(actualLimits, limits)) {
            failWithMessage(assertjErrorMessage, actual, limits, actualLimits);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlRoot's retention is equal to the given one.
     *
     * @param retention the given retention to compare the actual CapsXmlRoot's retention to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlRoot's retention is not equal to the given one.
     */
    public S hasRetention(CapsXmlRetention retention) {
        // check that actual CapsXmlRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting retention of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsXmlRetention actualRetention = actual.getRetention();
        if (!Objects.areEqual(actualRetention, retention)) {
            failWithMessage(assertjErrorMessage, actual, retention, actualRetention);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlRoot's searching is equal to the given one.
     *
     * @param searching the given searching to compare the actual CapsXmlRoot's searching to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlRoot's searching is not equal to the given one.
     */
    public S hasSearching(CapsXmlSearching searching) {
        // check that actual CapsXmlRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting searching of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsXmlSearching actualSearching = actual.getSearching();
        if (!Objects.areEqual(actualSearching, searching)) {
            failWithMessage(assertjErrorMessage, actual, searching, actualSearching);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlRoot's server is equal to the given one.
     *
     * @param server the given server to compare the actual CapsXmlRoot's server to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlRoot's server is not equal to the given one.
     */
    public S hasServer(CapsXmlServer server) {
        // check that actual CapsXmlRoot we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting server of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsXmlServer actualServer = actual.getServer();
        if (!Objects.areEqual(actualServer, server)) {
            failWithMessage(assertjErrorMessage, actual, server, actualServer);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
