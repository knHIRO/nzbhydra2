package org.nzbhydra.mapping.newznab.json.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsJsonCategory} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsJsonCategoryAssert<S extends AbstractCapsJsonCategoryAssert<S, A>, A extends CapsJsonCategory> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsJsonCategoryAssert}</code> to make assertions on actual CapsJsonCategory.
     *
     * @param actual the CapsJsonCategory we want to make assertions on.
     */
    protected AbstractCapsJsonCategoryAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsJsonCategory's attributes is equal to the given one.
     *
     * @param attributes the given attributes to compare the actual CapsJsonCategory's attributes to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonCategory's attributes is not equal to the given one.
     */
    public S hasAttributes(CapsJsonCategoryAttributes attributes) {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting attributes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonCategoryAttributes actualAttributes = actual.getAttributes();
        if (!Objects.areEqual(actualAttributes, attributes)) {
            failWithMessage(assertjErrorMessage, actual, attributes, actualAttributes);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonCategory's subCategories contains the given CapsJsonCategory elements.
     *
     * @param subCategories the given elements that should be contained in actual CapsJsonCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsJsonCategory's subCategories does not contain all given CapsJsonCategory elements.
     */
    public S hasSubCategories(CapsJsonCategory... subCategories) {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsJsonCategory varargs is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSubCategories(), subCategories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonCategory's subCategories contains the given CapsJsonCategory elements in Collection.
     *
     * @param subCategories the given elements that should be contained in actual CapsJsonCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsJsonCategory's subCategories does not contain all given CapsJsonCategory elements.
     */
    public S hasSubCategories(java.util.Collection<? extends CapsJsonCategory> subCategories) {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsJsonCategory collection is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContains(info, actual.getSubCategories(), subCategories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonCategory's subCategories contains <b>only</b> the given CapsJsonCategory elements and nothing else in whatever order.
     *
     * @param subCategories the given elements that should be contained in actual CapsJsonCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsJsonCategory's subCategories does not contain all given CapsJsonCategory elements.
     */
    public S hasOnlySubCategories(CapsJsonCategory... subCategories) {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsJsonCategory varargs is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSubCategories(), subCategories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonCategory's subCategories contains <b>only</b> the given CapsJsonCategory elements in Collection and nothing else in whatever order.
     *
     * @param subCategories the given elements that should be contained in actual CapsJsonCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsJsonCategory's subCategories does not contain all given CapsJsonCategory elements.
     */
    public S hasOnlySubCategories(java.util.Collection<? extends CapsJsonCategory> subCategories) {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsJsonCategory collection is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual.getSubCategories(), subCategories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonCategory's subCategories does not contain the given CapsJsonCategory elements.
     *
     * @param subCategories the given elements that should not be in actual CapsJsonCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsJsonCategory's subCategories contains any given CapsJsonCategory elements.
     */
    public S doesNotHaveSubCategories(CapsJsonCategory... subCategories) {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsJsonCategory varargs is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSubCategories(), subCategories);

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonCategory's subCategories does not contain the given CapsJsonCategory elements in Collection.
     *
     * @param subCategories the given elements that should not be in actual CapsJsonCategory's subCategories.
     * @return this assertion object.
     * @throws AssertionError if the actual CapsJsonCategory's subCategories contains any given CapsJsonCategory elements.
     */
    public S doesNotHaveSubCategories(java.util.Collection<? extends CapsJsonCategory> subCategories) {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // check that given CapsJsonCategory collection is not null.
        if (subCategories == null) {
            failWithMessage("Expecting subCategories parameter not to be null.");
            return myself; // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual.getSubCategories(), subCategories.toArray());

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonCategory has no subCategories.
     *
     * @return this assertion object.
     * @throws AssertionError if the actual CapsJsonCategory's subCategories is not empty.
     */
    public S hasNoSubCategories() {
        // check that actual CapsJsonCategory we want to make assertions on is not null.
        isNotNull();

        // we override the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have subCategories but had :\n  <%s>";

        // check
        if (actual.getSubCategories().iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual.getSubCategories());
        }

        // return the current assertion for method chaining
        return myself;
    }


}
