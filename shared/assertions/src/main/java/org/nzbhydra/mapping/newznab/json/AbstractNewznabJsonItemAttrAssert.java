package org.nzbhydra.mapping.newznab.json;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link NewznabJsonItemAttr} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractNewznabJsonItemAttrAssert<S extends AbstractNewznabJsonItemAttrAssert<S, A>, A extends NewznabJsonItemAttr> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractNewznabJsonItemAttrAssert}</code> to make assertions on actual NewznabJsonItemAttr.
     *
     * @param actual the NewznabJsonItemAttr we want to make assertions on.
     */
    protected AbstractNewznabJsonItemAttrAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual NewznabJsonItemAttr's attributes is equal to the given one.
     *
     * @param attributes the given attributes to compare the actual NewznabJsonItemAttr's attributes to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabJsonItemAttr's attributes is not equal to the given one.
     */
    public S hasAttributes(NewznabJsonItemAttributes attributes) {
        // check that actual NewznabJsonItemAttr we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting attributes of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        NewznabJsonItemAttributes actualAttributes = actual.getAttributes();
        if (!Objects.areEqual(actualAttributes, attributes)) {
            failWithMessage(assertjErrorMessage, actual, attributes, actualAttributes);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
