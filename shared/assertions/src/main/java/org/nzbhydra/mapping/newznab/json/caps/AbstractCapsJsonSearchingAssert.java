package org.nzbhydra.mapping.newznab.json.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsJsonSearching} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsJsonSearchingAssert<S extends AbstractCapsJsonSearchingAssert<S, A>, A extends CapsJsonSearching> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsJsonSearchingAssert}</code> to make assertions on actual CapsJsonSearching.
     *
     * @param actual the CapsJsonSearching we want to make assertions on.
     */
    protected AbstractCapsJsonSearchingAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsJsonSearching's audioSearch is equal to the given one.
     *
     * @param audioSearch the given audioSearch to compare the actual CapsJsonSearching's audioSearch to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonSearching's audioSearch is not equal to the given one.
     */
    public S hasAudioSearch(CapsJsonSearchIdAttributesHolder audioSearch) {
        // check that actual CapsJsonSearching we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting audioSearch of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonSearchIdAttributesHolder actualAudioSearch = actual.getAudioSearch();
        if (!Objects.areEqual(actualAudioSearch, audioSearch)) {
            failWithMessage(assertjErrorMessage, actual, audioSearch, actualAudioSearch);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonSearching's bookSearch is equal to the given one.
     *
     * @param bookSearch the given bookSearch to compare the actual CapsJsonSearching's bookSearch to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonSearching's bookSearch is not equal to the given one.
     */
    public S hasBookSearch(CapsJsonSearchIdAttributesHolder bookSearch) {
        // check that actual CapsJsonSearching we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting bookSearch of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonSearchIdAttributesHolder actualBookSearch = actual.getBookSearch();
        if (!Objects.areEqual(actualBookSearch, bookSearch)) {
            failWithMessage(assertjErrorMessage, actual, bookSearch, actualBookSearch);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonSearching's movieSearch is equal to the given one.
     *
     * @param movieSearch the given movieSearch to compare the actual CapsJsonSearching's movieSearch to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonSearching's movieSearch is not equal to the given one.
     */
    public S hasMovieSearch(CapsJsonSearchIdAttributesHolder movieSearch) {
        // check that actual CapsJsonSearching we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting movieSearch of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonSearchIdAttributesHolder actualMovieSearch = actual.getMovieSearch();
        if (!Objects.areEqual(actualMovieSearch, movieSearch)) {
            failWithMessage(assertjErrorMessage, actual, movieSearch, actualMovieSearch);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonSearching's search is equal to the given one.
     *
     * @param search the given search to compare the actual CapsJsonSearching's search to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonSearching's search is not equal to the given one.
     */
    public S hasSearch(CapsJsonSearchIdAttributesHolder search) {
        // check that actual CapsJsonSearching we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting search of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonSearchIdAttributesHolder actualSearch = actual.getSearch();
        if (!Objects.areEqual(actualSearch, search)) {
            failWithMessage(assertjErrorMessage, actual, search, actualSearch);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonSearching's tvSearch is equal to the given one.
     *
     * @param tvSearch the given tvSearch to compare the actual CapsJsonSearching's tvSearch to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonSearching's tvSearch is not equal to the given one.
     */
    public S hasTvSearch(CapsJsonSearchIdAttributesHolder tvSearch) {
        // check that actual CapsJsonSearching we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting tvSearch of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        CapsJsonSearchIdAttributesHolder actualTvSearch = actual.getTvSearch();
        if (!Objects.areEqual(actualTvSearch, tvSearch)) {
            failWithMessage(assertjErrorMessage, actual, tvSearch, actualTvSearch);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
