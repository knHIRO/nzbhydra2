package org.nzbhydra.mapping.newznab.json.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsJsonIdAttributes} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsJsonIdAttributesAssert<S extends AbstractCapsJsonIdAttributesAssert<S, A>, A extends CapsJsonIdAttributes> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsJsonIdAttributesAssert}</code> to make assertions on actual CapsJsonIdAttributes.
     *
     * @param actual the CapsJsonIdAttributes we want to make assertions on.
     */
    protected AbstractCapsJsonIdAttributesAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsJsonIdAttributes's available is equal to the given one.
     *
     * @param available the given available to compare the actual CapsJsonIdAttributes's available to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonIdAttributes's available is not equal to the given one.
     */
    public S hasAvailable(String available) {
        // check that actual CapsJsonIdAttributes we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting available of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualAvailable = actual.getAvailable();
        if (!Objects.areEqual(actualAvailable, available)) {
            failWithMessage(assertjErrorMessage, actual, available, actualAvailable);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsJsonIdAttributes's supportedParams is equal to the given one.
     *
     * @param supportedParams the given supportedParams to compare the actual CapsJsonIdAttributes's supportedParams to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsJsonIdAttributes's supportedParams is not equal to the given one.
     */
    public S hasSupportedParams(String supportedParams) {
        // check that actual CapsJsonIdAttributes we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting supportedParams of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSupportedParams = actual.getSupportedParams();
        if (!Objects.areEqual(actualSupportedParams, supportedParams)) {
            failWithMessage(assertjErrorMessage, actual, supportedParams, actualSupportedParams);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
