package org.nzbhydra.mapping.newznab.xml;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link NewznabXmlGuid} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractNewznabXmlGuidAssert<S extends AbstractNewznabXmlGuidAssert<S, A>, A extends NewznabXmlGuid> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractNewznabXmlGuidAssert}</code> to make assertions on actual NewznabXmlGuid.
     *
     * @param actual the NewznabXmlGuid we want to make assertions on.
     */
    protected AbstractNewznabXmlGuidAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual NewznabXmlGuid's guid is equal to the given one.
     *
     * @param guid the given guid to compare the actual NewznabXmlGuid's guid to.
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlGuid's guid is not equal to the given one.
     */
    public S hasGuid(String guid) {
        // check that actual NewznabXmlGuid we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting guid of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualGuid = actual.getGuid();
        if (!Objects.areEqual(actualGuid, guid)) {
            failWithMessage(assertjErrorMessage, actual, guid, actualGuid);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlGuid is perma link.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlGuid is not perma link.
     */
    public S isPermaLink() {
        // check that actual NewznabXmlGuid we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isPermaLink()) {
            failWithMessage("\nExpecting that actual NewznabXmlGuid is perma link but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual NewznabXmlGuid is not perma link.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual NewznabXmlGuid is perma link.
     */
    public S isNotPermaLink() {
        // check that actual NewznabXmlGuid we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isPermaLink()) {
            failWithMessage("\nExpecting that actual NewznabXmlGuid is not perma link but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

}
