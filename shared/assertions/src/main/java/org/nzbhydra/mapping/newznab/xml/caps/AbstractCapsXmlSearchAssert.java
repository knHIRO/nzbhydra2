package org.nzbhydra.mapping.newznab.xml.caps;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CapsXmlSearch} specific assertions - Generated by CustomAssertionGenerator.
 */
@jakarta.annotation.Generated(value = "assertj-assertions-generator")
public abstract class AbstractCapsXmlSearchAssert<S extends AbstractCapsXmlSearchAssert<S, A>, A extends CapsXmlSearch> extends AbstractObjectAssert<S, A> {

    /**
     * Creates a new <code>{@link AbstractCapsXmlSearchAssert}</code> to make assertions on actual CapsXmlSearch.
     *
     * @param actual the CapsXmlSearch we want to make assertions on.
     */
    protected AbstractCapsXmlSearchAssert(A actual, Class<S> selfType) {
        super(actual, selfType);
    }

    /**
     * Verifies that the actual CapsXmlSearch's available is equal to the given one.
     *
     * @param available the given available to compare the actual CapsXmlSearch's available to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlSearch's available is not equal to the given one.
     */
    public S hasAvailable(String available) {
        // check that actual CapsXmlSearch we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting available of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualAvailable = actual.getAvailable();
        if (!Objects.areEqual(actualAvailable, available)) {
            failWithMessage(assertjErrorMessage, actual, available, actualAvailable);
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlSearch is available.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlSearch is not available.
     */
    public S isAvailable() {
        // check that actual CapsXmlSearch we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is true
        if (!actual.isAvailable()) {
            failWithMessage("\nExpecting that actual CapsXmlSearch is available but is not.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlSearch is not available.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlSearch is available.
     */
    public S isNotAvailable() {
        // check that actual CapsXmlSearch we want to make assertions on is not null.
        isNotNull();

        // check that property call/field access is false
        if (actual.isAvailable()) {
            failWithMessage("\nExpecting that actual CapsXmlSearch is not available but is.");
        }

        // return the current assertion for method chaining
        return myself;
    }

    /**
     * Verifies that the actual CapsXmlSearch's supportedParams is equal to the given one.
     *
     * @param supportedParams the given supportedParams to compare the actual CapsXmlSearch's supportedParams to.
     * @return this assertion object.
     * @throws AssertionError - if the actual CapsXmlSearch's supportedParams is not equal to the given one.
     */
    public S hasSupportedParams(String supportedParams) {
        // check that actual CapsXmlSearch we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        String assertjErrorMessage = "\nExpecting supportedParams of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        String actualSupportedParams = actual.getSupportedParams();
        if (!Objects.areEqual(actualSupportedParams, supportedParams)) {
            failWithMessage(assertjErrorMessage, actual, supportedParams, actualSupportedParams);
        }

        // return the current assertion for method chaining
        return myself;
    }

}
