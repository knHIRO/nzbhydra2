/*
 *  (C) Copyright 2017 TheOtherP (theotherp@posteo.net)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.nzbhydra;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.nzbhydra.config.ConfigProvider;
import org.nzbhydra.config.indexer.IndexerConfig;
import org.nzbhydra.externaltools.AddRequest;
import org.nzbhydra.externaltools.ExternalTools;
import org.nzbhydra.notifications.IndexerDisabledNotificationEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.MediaType;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.access.annotation.Secured;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import sun.misc.Unsafe;

import java.lang.reflect.Field;
import java.math.BigInteger;
import java.util.List;

@SuppressWarnings("unchecked")
@RestController
public class DevEndpoint {

    @PersistenceContext
    private EntityManager entityManager;
    @Autowired
    private ExternalTools xdarr;
    @Autowired
    private ConfigProvider configProvider;
    @Autowired
    private ApplicationEventPublisher applicationEventPublisher;

    private static final Logger logger = LoggerFactory.getLogger(DevEndpoint.class);

    @Secured({"ROLE_ADMIN"})
    @RequestMapping(value = "/dev/countDanglingIndexersearches", method = RequestMethod.GET)
    public BigInteger countDanglingIndexersearches() throws Exception {
        final List<BigInteger> resultList = entityManager.createNativeQuery("select count(*) from SEARCHRESULT x where x.INDEXERSEARCHENTITY not in (select y.id from INDEXERSEARCH y)").getResultList();
        return resultList.get(0);
    }

    @Secured({"ROLE_ADMIN"})
    @RequestMapping(value = "/dev/throwException", method = RequestMethod.GET)
    public BigInteger throwException() throws Exception {
        throw new RuntimeException("test");
    }

    @Secured({"ROLE_ADMIN"})
    @RequestMapping(value = "/dev/throwAccessDeniedException", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
    public BigInteger throwAccessDeniedException() throws Exception {
        throw new AccessDeniedException("test");
    }

    @Secured({"ROLE_ADMIN"})
    @Transactional
    @RequestMapping(value = "/dev/deleteDanglingIndexersearches", method = RequestMethod.GET)
    public String deleteDanglingIndexersearches() throws Exception {
        return "Deleted " + entityManager.createNativeQuery("delete from SEARCHRESULT where INDEXERSEARCHENTITY not in (select y.id from INDEXERSEARCH y)").executeUpdate() + " entries";
    }

    @RequestMapping(value = "/dev/testAddToSonarr", method = RequestMethod.GET)
    public String testAddToSonarr() throws Exception {
        final AddRequest addRequest = new AddRequest();
        addRequest.setAddTorrent(false);
        addRequest.setAddUsenet(false);
        addRequest.setXdarrHost("http://localhost:9191");
        addRequest.setXdarrApiKey("51b42e76e902445d8ed3f068d698914a");
        addRequest.setNzbhydraHost("http://127.0.0.1:5076");

        xdarr.addNzbhydraAsIndexer(addRequest);

        return "OK";
    }

    @Secured({"ROLE_ADMIN"})
    @RequestMapping(value = "/dev/sendIndexerDisabledNotification", method = RequestMethod.GET)
    public void sendIndexerDisabledNotification() {
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra"));
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra2"));
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra3"));
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra4"));
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra5"));
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra6"));
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra7"));
        applicationEventPublisher.publishEvent(new IndexerDisabledNotificationEvent(configProvider.getBaseConfig().getIndexers().get(0).getName(), IndexerConfig.State.DISABLED_SYSTEM_TEMPORARY, "Some message generated by hydra8"));
    }


    @RequestMapping(value = "/dev/crash", method = RequestMethod.GET)
    public void crashHard() throws Exception {
        Field f = Unsafe.class.getDeclaredField("theUnsafe");
        f.setAccessible(true);
        Unsafe unsafe = (Unsafe) f.get(null);
        unsafe.putAddress(0, 0);
    }


}
